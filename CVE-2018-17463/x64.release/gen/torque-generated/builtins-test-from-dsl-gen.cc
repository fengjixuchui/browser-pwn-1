#include "src/builtins/builtins-test-gen.h"
#include "src/builtins/builtins-utils-gen.h"
#include "src/builtins/builtins.h"
#include "src/code-factory.h"
#include "src/elements-kind.h"
#include "src/heap/factory-inl.h"
#include "src/objects.h"
#include "src/objects/bigint.h"
#include "builtins-test-from-dsl-gen.h"

namespace v8 {
namespace internal {

using Node = compiler::Node;

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::ElementsKindTestHelper1(ElementsKind p_kind) {
  TVARIABLE(BoolT, _return_313_impl);
  auto _return_313 = &_return_313_impl;
  USE(_return_313);
  Label label_macro_end_1512_impl(this, {_return_313}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1512 = &label_macro_end_1512_impl;
  USE(label_macro_end_1512);
  // ../../test/torque/test-torque.tq:6:69
  {
    // ../../test/torque/test-torque.tq:7:5
    {
      Label label__False_521_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_521 = &label__False_521_impl;
      USE(label__False_521);
      bool t1888 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT8_ELEMENTS));
      USE(implicit_cast<bool>(t1888));
      bool t1889 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT16_ELEMENTS));
      USE(implicit_cast<bool>(t1889));
      if ((implicit_cast<bool>((implicit_cast<bool>(t1888) || implicit_cast<bool>(t1889))))) {
        // ../../test/torque/test-torque.tq:7:74
        {
          // ../../test/torque/test-torque.tq:8:7
          TNode<BoolT> t1890 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
          *_return_313 = implicit_cast<TNode<BoolT>>(t1890);
          Goto(label_macro_end_1512);
        }
      } else {
        // ../../test/torque/test-torque.tq:9:12
        {
          // ../../test/torque/test-torque.tq:10:7
          TNode<BoolT> t1891 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
          *_return_313 = implicit_cast<TNode<BoolT>>(t1891);
          Goto(label_macro_end_1512);
        }
      }
    }
  }
  BIND(label_macro_end_1512);
  return implicit_cast<TNode<BoolT>>((*_return_313).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::ElementsKindTestHelper2(ElementsKind p_kind) {
  TVARIABLE(BoolT, _return_314_impl);
  auto _return_314 = &_return_314_impl;
  USE(_return_314);
  Label label_macro_end_1513_impl(this, {_return_314}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1513 = &label_macro_end_1513_impl;
  USE(label_macro_end_1513);
  // ../../test/torque/test-torque.tq:14:69
  {
    // ../../test/torque/test-torque.tq:15:5
    Label label__False_522_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_522 = &label__False_522_impl;
    USE(label__False_522);
    bool t1892 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT8_ELEMENTS));
    USE(implicit_cast<bool>(t1892));
    bool t1893 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT16_ELEMENTS));
    USE(implicit_cast<bool>(t1893));
    TNode<BoolT> t1894 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>((implicit_cast<bool>(t1892) || implicit_cast<bool>(t1893)))));
    *_return_314 = implicit_cast<TNode<BoolT>>(t1894);
    Goto(label_macro_end_1513);
  }
  BIND(label_macro_end_1513);
  return implicit_cast<TNode<BoolT>>((*_return_314).value());
}

bool TestBuiltinsFromDSLAssembler::ElementsKindTestHelper3(ElementsKind p_kind) {
  bool _return_315_impl;
  auto _return_315 = &_return_315_impl;
  USE(_return_315);
  Label label_macro_end_1514_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1514 = &label_macro_end_1514_impl;
  USE(label_macro_end_1514);
  // ../../test/torque/test-torque.tq:18:79
  {
    // ../../test/torque/test-torque.tq:19:5
    Label label__False_523_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_523 = &label__False_523_impl;
    USE(label__False_523);
    bool t1895 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT8_ELEMENTS));
    USE(implicit_cast<bool>(t1895));
    bool t1896 = ElementsKindEqual(implicit_cast<ElementsKind>(p_kind), implicit_cast<ElementsKind>(UINT16_ELEMENTS));
    USE(implicit_cast<bool>(t1896));
    *_return_315 = implicit_cast<bool>((implicit_cast<bool>(t1895) || implicit_cast<bool>(t1896)));
    Goto(label_macro_end_1514);
  }
  BIND(label_macro_end_1514);
  return implicit_cast<bool>((*_return_315));
}

void TestBuiltinsFromDSLAssembler::LabelTestHelper1(Label* label_Label1_524) {
  Label label_macro_end_1515_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1515 = &label_macro_end_1515_impl;
  USE(label_macro_end_1515);
  // ../../test/torque/test-torque.tq:23:21
  {
    // ../../test/torque/test-torque.tq:24:5
    Goto(label_Label1_524);
  }
}

void TestBuiltinsFromDSLAssembler::LabelTestHelper2(Label* label_Label2_525, TVariable<Smi>* Label20_316) {
  Label label_macro_end_1516_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1516 = &label_macro_end_1516_impl;
  USE(label_macro_end_1516);
  // ../../test/torque/test-torque.tq:28:26
  {
    // ../../test/torque/test-torque.tq:29:5
    int31_t t1897 = 42;
    TNode<Smi> t1898 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1897)));
    *Label20_316 = implicit_cast<TNode<Smi>>(t1898);
    Goto(label_Label2_525);
  }
}

void TestBuiltinsFromDSLAssembler::LabelTestHelper3(Label* label_Label3_526, TVariable<String>* Label30_317, TVariable<Smi>* Label31_318) {
  Label label_macro_end_1517_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1517 = &label_macro_end_1517_impl;
  USE(label_macro_end_1517);
  // ../../test/torque/test-torque.tq:33:34
  {
    // ../../test/torque/test-torque.tq:34:5
    const char* t1899 = "foo";
    TNode<String> t1900 = UncheckedCast<String>(FromConstexpr8ATString(implicit_cast<const char*>(t1899)));
    *Label30_317 = implicit_cast<TNode<String>>(t1900);
    int31_t t1901 = 7;
    TNode<Smi> t1902 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1901)));
    *Label31_318 = implicit_cast<TNode<Smi>>(t1902);
    Goto(label_Label3_526);
  }
}

void TestBuiltinsFromDSLAssembler::TestConstexpr1() {
  Label label_macro_end_1518_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1518 = &label_macro_end_1518_impl;
  USE(label_macro_end_1518);
  // ../../test/torque/test-torque.tq:37:26
  {
    // ../../test/torque/test-torque.tq:38:5
    Label label__True_527_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_527 = &label__True_527_impl;
    USE(label__True_527);
    Label label__False_528_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_528 = &label__False_528_impl;
    USE(label__False_528);
    bool t1903 = IsFastElementsKind(implicit_cast<ElementsKind>(PACKED_SMI_ELEMENTS));
    USE(implicit_cast<bool>(t1903));
    TNode<BoolT> t1904 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1903)));
    USE(implicit_cast<TNode<BoolT>>(t1904));
    Branch(implicit_cast<TNode<BoolT>>(t1904), label__True_527, label__False_528);
    BIND(label__False_528);
    Print("assert 'FromConstexpr<bool>(IsFastElementsKind(PACKED_SMI_ELEMENTS))' failed at ../../test/torque/test-torque.tq:38:5");
    Unreachable();
    BIND(label__True_527);
  }
}

void TestBuiltinsFromDSLAssembler::TestConstexprIf() {
  Label label_macro_end_1519_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1519 = &label_macro_end_1519_impl;
  USE(label_macro_end_1519);
  // ../../test/torque/test-torque.tq:41:27
  {
    // ../../test/torque/test-torque.tq:42:5
    Label label__True_529_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_529 = &label__True_529_impl;
    USE(label__True_529);
    Label label__False_530_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_530 = &label__False_530_impl;
    USE(label__False_530);
    TNode<BoolT> t1905 = UncheckedCast<BoolT>(ElementsKindTestHelper1(implicit_cast<ElementsKind>(UINT8_ELEMENTS)));
    USE(implicit_cast<TNode<BoolT>>(t1905));
    Branch(implicit_cast<TNode<BoolT>>(t1905), label__True_529, label__False_530);
    BIND(label__False_530);
    Print("assert 'ElementsKindTestHelper1(UINT8_ELEMENTS)' failed at ../../test/torque/test-torque.tq:42:5");
    Unreachable();
    BIND(label__True_529);
    // ../../test/torque/test-torque.tq:43:5
    Label label__True_531_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_531 = &label__True_531_impl;
    USE(label__True_531);
    Label label__False_532_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_532 = &label__False_532_impl;
    USE(label__False_532);
    TNode<BoolT> t1906 = UncheckedCast<BoolT>(ElementsKindTestHelper1(implicit_cast<ElementsKind>(UINT16_ELEMENTS)));
    USE(implicit_cast<TNode<BoolT>>(t1906));
    Branch(implicit_cast<TNode<BoolT>>(t1906), label__True_531, label__False_532);
    BIND(label__False_532);
    Print("assert 'ElementsKindTestHelper1(UINT16_ELEMENTS)' failed at ../../test/torque/test-torque.tq:43:5");
    Unreachable();
    BIND(label__True_531);
    // ../../test/torque/test-torque.tq:44:5
    Label label__True_533_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_533 = &label__True_533_impl;
    USE(label__True_533);
    Label label__False_534_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_534 = &label__False_534_impl;
    USE(label__False_534);
    TNode<BoolT> t1907 = UncheckedCast<BoolT>(ElementsKindTestHelper1(implicit_cast<ElementsKind>(UINT32_ELEMENTS)));
    USE(implicit_cast<TNode<BoolT>>(t1907));
    TNode<BoolT> t1908 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t1907)));
    USE(implicit_cast<TNode<BoolT>>(t1908));
    Branch(implicit_cast<TNode<BoolT>>(t1908), label__True_533, label__False_534);
    BIND(label__False_534);
    Print("assert '!ElementsKindTestHelper1(UINT32_ELEMENTS)' failed at ../../test/torque/test-torque.tq:44:5");
    Unreachable();
    BIND(label__True_533);
  }
}

void TestBuiltinsFromDSLAssembler::TestConstexprReturn() {
  Label label_macro_end_1520_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1520 = &label_macro_end_1520_impl;
  USE(label_macro_end_1520);
  // ../../test/torque/test-torque.tq:47:31
  {
    // ../../test/torque/test-torque.tq:48:5
    Label label__True_535_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_535 = &label__True_535_impl;
    USE(label__True_535);
    Label label__False_536_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_536 = &label__False_536_impl;
    USE(label__False_536);
    bool t1909 = ElementsKindTestHelper3(implicit_cast<ElementsKind>(UINT8_ELEMENTS));
    USE(implicit_cast<bool>(t1909));
    TNode<BoolT> t1910 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1909)));
    USE(implicit_cast<TNode<BoolT>>(t1910));
    Branch(implicit_cast<TNode<BoolT>>(t1910), label__True_535, label__False_536);
    BIND(label__False_536);
    Print("assert 'FromConstexpr<bool>(ElementsKindTestHelper3(UINT8_ELEMENTS))' failed at ../../test/torque/test-torque.tq:48:5");
    Unreachable();
    BIND(label__True_535);
    // ../../test/torque/test-torque.tq:49:5
    Label label__True_537_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_537 = &label__True_537_impl;
    USE(label__True_537);
    Label label__False_538_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_538 = &label__False_538_impl;
    USE(label__False_538);
    bool t1911 = ElementsKindTestHelper3(implicit_cast<ElementsKind>(UINT16_ELEMENTS));
    USE(implicit_cast<bool>(t1911));
    TNode<BoolT> t1912 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1911)));
    USE(implicit_cast<TNode<BoolT>>(t1912));
    Branch(implicit_cast<TNode<BoolT>>(t1912), label__True_537, label__False_538);
    BIND(label__False_538);
    Print("assert 'FromConstexpr<bool>(ElementsKindTestHelper3(UINT16_ELEMENTS))' failed at ../../test/torque/test-torque.tq:49:5");
    Unreachable();
    BIND(label__True_537);
    // ../../test/torque/test-torque.tq:50:5
    Label label__True_539_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_539 = &label__True_539_impl;
    USE(label__True_539);
    Label label__False_540_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_540 = &label__False_540_impl;
    USE(label__False_540);
    bool t1913 = ElementsKindTestHelper3(implicit_cast<ElementsKind>(UINT32_ELEMENTS));
    USE(implicit_cast<bool>(t1913));
    TNode<BoolT> t1914 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1913)));
    USE(implicit_cast<TNode<BoolT>>(t1914));
    TNode<BoolT> t1915 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t1914)));
    USE(implicit_cast<TNode<BoolT>>(t1915));
    Branch(implicit_cast<TNode<BoolT>>(t1915), label__True_539, label__False_540);
    BIND(label__False_540);
    Print("assert '!FromConstexpr<bool>(ElementsKindTestHelper3(UINT32_ELEMENTS))' failed at ../../test/torque/test-torque.tq:50:5");
    Unreachable();
    BIND(label__True_539);
    // ../../test/torque/test-torque.tq:51:5
    Label label__True_541_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_541 = &label__True_541_impl;
    USE(label__True_541);
    Label label__False_542_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_542 = &label__False_542_impl;
    USE(label__False_542);
    bool t1916 = ElementsKindTestHelper3(implicit_cast<ElementsKind>(UINT32_ELEMENTS));
    USE(implicit_cast<bool>(t1916));
    bool t1917 = ConstexprBoolNot(implicit_cast<bool>(t1916));
    USE(implicit_cast<bool>(t1917));
    TNode<BoolT> t1918 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1917)));
    USE(implicit_cast<TNode<BoolT>>(t1918));
    Branch(implicit_cast<TNode<BoolT>>(t1918), label__True_541, label__False_542);
    BIND(label__False_542);
    Print("assert 'FromConstexpr<bool>(!ElementsKindTestHelper3(UINT32_ELEMENTS))' failed at ../../test/torque/test-torque.tq:51:5");
    Unreachable();
    BIND(label__True_541);
  }
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestGotoLabel() {
  TVARIABLE(Oddball, _return_319_impl);
  auto _return_319 = &_return_319_impl;
  USE(_return_319);
  Label label_macro_end_1521_impl(this, {_return_319}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1521 = &label_macro_end_1521_impl;
  USE(label_macro_end_1521);
  // ../../test/torque/test-torque.tq:54:34
  {
    // ../../test/torque/test-torque.tq:55:5
    {
      Label label_try_done_902_1522_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_902_1522 = &label_try_done_902_1522_impl;
      USE(label_try_done_902_1522);
      Label label_Label1_543_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Label1_543 = &label_Label1_543_impl;
      USE(label_Label1_543);
      Label label_try_begin_903_1523_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_903_1523 = &label_try_begin_903_1523_impl;
      USE(label_try_begin_903_1523);
      Goto(label_try_begin_903_1523);
      if (label_try_begin_903_1523->is_used())
      {
        BIND(label_try_begin_903_1523);
        // ../../test/torque/test-torque.tq:55:9
        {
          // ../../test/torque/test-torque.tq:56:7
          LabelTestHelper1(label_Label1_543);
        }
      }
      if (label_Label1_543->is_used())
      {
        BIND(label_Label1_543);
        // ../../test/torque/test-torque.tq:58:18
        {
          // ../../test/torque/test-torque.tq:59:7
          *_return_319 = implicit_cast<TNode<Oddball>>(True());
          Goto(label_macro_end_1521);
        }
      }
    }
  }
  BIND(label_macro_end_1521);
  return implicit_cast<TNode<Oddball>>((*_return_319).value());
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestGotoLabelWithOneParameter() {
  TVARIABLE(Oddball, _return_320_impl);
  auto _return_320 = &_return_320_impl;
  USE(_return_320);
  Label label_macro_end_1524_impl(this, {_return_320}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1524 = &label_macro_end_1524_impl;
  USE(label_macro_end_1524);
  // ../../test/torque/test-torque.tq:63:50
  {
    // ../../test/torque/test-torque.tq:64:5
    {
      Label label_try_done_904_1525_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_904_1525 = &label_try_done_904_1525_impl;
      USE(label_try_done_904_1525);
      Label label_Label2_544_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Label2_544 = &label_Label2_544_impl;
      USE(label_Label2_544);
      TVARIABLE(Smi, smi_321_impl);
      auto smi_321 = &smi_321_impl;
      USE(smi_321);
      Label label_try_begin_905_1526_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_905_1526 = &label_try_begin_905_1526_impl;
      USE(label_try_begin_905_1526);
      Goto(label_try_begin_905_1526);
      if (label_try_begin_905_1526->is_used())
      {
        BIND(label_try_begin_905_1526);
        // ../../test/torque/test-torque.tq:64:9
        {
          // ../../test/torque/test-torque.tq:65:7
          LabelTestHelper2(label_Label2_544, smi_321);
        }
      }
      if (label_Label2_544->is_used())
      {
        BIND(label_Label2_544);
        // ../../test/torque/test-torque.tq:67:28
        {
          // ../../test/torque/test-torque.tq:68:7
          Label label__True_545_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_545 = &label__True_545_impl;
          USE(label__True_545);
          Label label__False_546_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_546 = &label__False_546_impl;
          USE(label__False_546);
          int31_t t1919 = 42;
          TNode<Smi> t1920 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1919)));
          TNode<BoolT> t1921 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*smi_321).value()), implicit_cast<TNode<Smi>>(t1920)));
          USE(implicit_cast<TNode<BoolT>>(t1921));
          Branch(implicit_cast<TNode<BoolT>>(t1921), label__True_545, label__False_546);
          BIND(label__False_546);
          Print("assert 'smi == 42' failed at ../../test/torque/test-torque.tq:68:7");
          Unreachable();
          BIND(label__True_545);
          // ../../test/torque/test-torque.tq:69:7
          *_return_320 = implicit_cast<TNode<Oddball>>(True());
          Goto(label_macro_end_1524);
        }
      }
    }
  }
  BIND(label_macro_end_1524);
  return implicit_cast<TNode<Oddball>>((*_return_320).value());
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestGotoLabelWithTwoParameters() {
  TVARIABLE(Oddball, _return_322_impl);
  auto _return_322 = &_return_322_impl;
  USE(_return_322);
  Label label_macro_end_1527_impl(this, {_return_322}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1527 = &label_macro_end_1527_impl;
  USE(label_macro_end_1527);
  // ../../test/torque/test-torque.tq:73:51
  {
    // ../../test/torque/test-torque.tq:74:5
    {
      Label label_try_done_906_1528_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_906_1528 = &label_try_done_906_1528_impl;
      USE(label_try_done_906_1528);
      Label label_Label3_547_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Label3_547 = &label_Label3_547_impl;
      USE(label_Label3_547);
      TVARIABLE(String, str_323_impl);
      auto str_323 = &str_323_impl;
      USE(str_323);
      TVARIABLE(Smi, smi_324_impl);
      auto smi_324 = &smi_324_impl;
      USE(smi_324);
      Label label_try_begin_907_1529_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_907_1529 = &label_try_begin_907_1529_impl;
      USE(label_try_begin_907_1529);
      Goto(label_try_begin_907_1529);
      if (label_try_begin_907_1529->is_used())
      {
        BIND(label_try_begin_907_1529);
        // ../../test/torque/test-torque.tq:74:9
        {
          // ../../test/torque/test-torque.tq:75:7
          LabelTestHelper3(label_Label3_547, str_323, smi_324);
        }
      }
      if (label_Label3_547->is_used())
      {
        BIND(label_Label3_547);
        // ../../test/torque/test-torque.tq:77:41
        {
          // ../../test/torque/test-torque.tq:78:7
          Label label__True_548_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_548 = &label__True_548_impl;
          USE(label__True_548);
          Label label__False_549_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_549 = &label__False_549_impl;
          USE(label__False_549);
          const char* t1922 = "foo";
          TNode<Object> t1923 = UncheckedCast<Object>(FromConstexpr22UT12ATHeapObject5ATSmi(implicit_cast<const char*>(t1922)));
          TNode<BoolT> t1924 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>((*str_323).value()), implicit_cast<TNode<Object>>(t1923)));
          USE(implicit_cast<TNode<BoolT>>(t1924));
          Branch(implicit_cast<TNode<BoolT>>(t1924), label__True_548, label__False_549);
          BIND(label__False_549);
          Print("assert 'str == 'foo'' failed at ../../test/torque/test-torque.tq:78:7");
          Unreachable();
          BIND(label__True_548);
          // ../../test/torque/test-torque.tq:79:7
          Label label__True_550_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_550 = &label__True_550_impl;
          USE(label__True_550);
          Label label__False_551_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_551 = &label__False_551_impl;
          USE(label__False_551);
          int31_t t1925 = 7;
          TNode<Smi> t1926 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1925)));
          TNode<BoolT> t1927 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*smi_324).value()), implicit_cast<TNode<Smi>>(t1926)));
          USE(implicit_cast<TNode<BoolT>>(t1927));
          Branch(implicit_cast<TNode<BoolT>>(t1927), label__True_550, label__False_551);
          BIND(label__False_551);
          Print("assert 'smi == 7' failed at ../../test/torque/test-torque.tq:79:7");
          Unreachable();
          BIND(label__True_550);
          // ../../test/torque/test-torque.tq:80:7
          *_return_322 = implicit_cast<TNode<Oddball>>(True());
          Goto(label_macro_end_1527);
        }
      }
    }
  }
  BIND(label_macro_end_1527);
  return implicit_cast<TNode<Oddball>>((*_return_322).value());
}

TF_BUILTIN(GenericBuiltinTest22UT12ATHeapObject5ATSmi, TestBuiltinsFromDSLAssembler) {
  TNode<Context> p_c = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_c);
  TNode<Object> p_param = UncheckedCast<Object>(Parameter(Descriptor::kParam));
  USE(p_param);
  // ../../test/torque/test-torque.tq:88:65
  {
    // ../../test/torque/test-torque.tq:89:5
    Return(implicit_cast<TNode<Object>>(p_param));
  }
}

void TestBuiltinsFromDSLAssembler::TestBuiltinSpecialization(TNode<Context> p_c) {
  Label label_macro_end_1530_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1530 = &label_macro_end_1530_impl;
  USE(label_macro_end_1530);
  // ../../test/torque/test-torque.tq:92:47
  {
    // ../../test/torque/test-torque.tq:93:5
    Label label__True_552_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_552 = &label__True_552_impl;
    USE(label__True_552);
    Label label__False_553_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_553 = &label__False_553_impl;
    USE(label__False_553);
    int31_t t1928 = 0;
    TNode<Smi> t1929 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1928)));
    TNode<Object> t1930 = UncheckedCast<Object>(CallBuiltin(Builtins::kGenericBuiltinTest5ATSmi, implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Smi>>(t1929)));
    USE(implicit_cast<TNode<Object>>(t1930));
    TNode<BoolT> t1931 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1930), implicit_cast<TNode<Object>>(Null())));
    USE(implicit_cast<TNode<BoolT>>(t1931));
    Branch(implicit_cast<TNode<BoolT>>(t1931), label__True_552, label__False_553);
    BIND(label__False_553);
    Print("assert 'GenericBuiltinTest<Smi>(c, 0) == Null' failed at ../../test/torque/test-torque.tq:93:5");
    Unreachable();
    BIND(label__True_552);
    // ../../test/torque/test-torque.tq:94:5
    Label label__True_554_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_554 = &label__True_554_impl;
    USE(label__True_554);
    Label label__False_555_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_555 = &label__False_555_impl;
    USE(label__False_555);
    int31_t t1932 = 1;
    TNode<Smi> t1933 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1932)));
    TNode<Object> t1934 = UncheckedCast<Object>(CallBuiltin(Builtins::kGenericBuiltinTest5ATSmi, implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Smi>>(t1933)));
    USE(implicit_cast<TNode<Object>>(t1934));
    TNode<BoolT> t1935 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1934), implicit_cast<TNode<Object>>(Null())));
    USE(implicit_cast<TNode<BoolT>>(t1935));
    Branch(implicit_cast<TNode<BoolT>>(t1935), label__True_554, label__False_555);
    BIND(label__False_555);
    Print("assert 'GenericBuiltinTest<Smi>(c, 1) == Null' failed at ../../test/torque/test-torque.tq:94:5");
    Unreachable();
    BIND(label__True_554);
    // ../../test/torque/test-torque.tq:95:5
    Label label__True_556_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_556 = &label__True_556_impl;
    USE(label__True_556);
    Label label__False_557_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_557 = &label__False_557_impl;
    USE(label__False_557);
    TNode<Object> t1936 = UncheckedCast<Object>(CallBuiltin(Builtins::kGenericBuiltinTest22UT12ATHeapObject5ATSmi, implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<Object>>(t1936));
    TNode<BoolT> t1937 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1936), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<BoolT>>(t1937));
    Branch(implicit_cast<TNode<BoolT>>(t1937), label__True_556, label__False_557);
    BIND(label__False_557);
    Print("assert 'GenericBuiltinTest<Object>(c, Undefined) == Undefined' failed at ../../test/torque/test-torque.tq:95:5");
    Unreachable();
    BIND(label__True_556);
    // ../../test/torque/test-torque.tq:96:5
    Label label__True_558_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_558 = &label__True_558_impl;
    USE(label__True_558);
    Label label__False_559_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_559 = &label__False_559_impl;
    USE(label__False_559);
    TNode<Object> t1938 = UncheckedCast<Object>(CallBuiltin(Builtins::kGenericBuiltinTest22UT12ATHeapObject5ATSmi, implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<Object>>(t1938));
    TNode<BoolT> t1939 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1938), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<BoolT>>(t1939));
    Branch(implicit_cast<TNode<BoolT>>(t1939), label__True_558, label__False_559);
    BIND(label__False_559);
    Print("assert 'GenericBuiltinTest<Object>(c, Undefined) == Undefined' failed at ../../test/torque/test-torque.tq:96:5");
    Unreachable();
    BIND(label__True_558);
  }
}

void TestBuiltinsFromDSLAssembler::LabelTestHelper4(bool p_flag, Label* label_Label4_560, Label* label_Label5_561) {
  Label label_macro_end_1531_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1531 = &label_macro_end_1531_impl;
  USE(label_macro_end_1531);
  // ../../test/torque/test-torque.tq:100:29
  {
    // ../../test/torque/test-torque.tq:101:5
    {
      if ((implicit_cast<bool>(p_flag))) {
        // ../../test/torque/test-torque.tq:101:25
        {
          // ../../test/torque/test-torque.tq:102:7
          Goto(label_Label4_560);
        }
      } else {
        // ../../test/torque/test-torque.tq:103:12
        {
          // ../../test/torque/test-torque.tq:104:7
          Goto(label_Label5_561);
        }
      }
    }
  }
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::CallLabelTestHelper4(bool p_flag) {
  TVARIABLE(BoolT, _return_325_impl);
  auto _return_325 = &_return_325_impl;
  USE(_return_325);
  Label label_macro_end_1532_impl(this, {_return_325}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1532 = &label_macro_end_1532_impl;
  USE(label_macro_end_1532);
  // ../../test/torque/test-torque.tq:108:58
  {
    // ../../test/torque/test-torque.tq:109:5
    {
      Label label_try_done_908_1533_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_908_1533 = &label_try_done_908_1533_impl;
      USE(label_try_done_908_1533);
      Label label_Label4_564_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Label4_564 = &label_Label4_564_impl;
      USE(label_Label4_564);
      Label label_Label5_565_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Label5_565 = &label_Label5_565_impl;
      USE(label_Label5_565);
      Label label_try_begin_909_1534_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_909_1534 = &label_try_begin_909_1534_impl;
      USE(label_try_begin_909_1534);
      Goto(label_try_begin_909_1534);
      if (label_try_begin_909_1534->is_used())
      {
        BIND(label_try_begin_909_1534);
        // ../../test/torque/test-torque.tq:109:9
        {
          // ../../test/torque/test-torque.tq:110:7
          LabelTestHelper4(implicit_cast<bool>(p_flag), label_Label4_564, label_Label5_565);
        }
      }
      if (label_Label4_564->is_used())
      {
        BIND(label_Label4_564);
        // ../../test/torque/test-torque.tq:112:18
        {
          // ../../test/torque/test-torque.tq:113:7
          TNode<BoolT> t1940 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
          *_return_325 = implicit_cast<TNode<BoolT>>(t1940);
          Goto(label_macro_end_1532);
        }
      }
      if (label_Label5_565->is_used())
      {
        BIND(label_Label5_565);
        // ../../test/torque/test-torque.tq:115:18
        {
          // ../../test/torque/test-torque.tq:116:7
          TNode<BoolT> t1941 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
          *_return_325 = implicit_cast<TNode<BoolT>>(t1941);
          Goto(label_macro_end_1532);
        }
      }
    }
  }
  BIND(label_macro_end_1532);
  return implicit_cast<TNode<BoolT>>((*_return_325).value());
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestPartiallyUnusedLabel() {
  TVARIABLE(Oddball, _return_326_impl);
  auto _return_326 = &_return_326_impl;
  USE(_return_326);
  Label label_macro_end_1535_impl(this, {_return_326}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1535 = &label_macro_end_1535_impl;
  USE(label_macro_end_1535);
  // ../../test/torque/test-torque.tq:120:45
  {
    // ../../test/torque/test-torque.tq:121:5
    TNode<BoolT> t1942 = UncheckedCast<BoolT>(CallLabelTestHelper4(implicit_cast<bool>(true)));
    USE(implicit_cast<TNode<BoolT>>(t1942));
    TVARIABLE(BoolT, r1_327_impl);
    auto r1_327 = &r1_327_impl;
    USE(r1_327);
    *r1_327 = implicit_cast<TNode<BoolT>>(t1942);
    // ../../test/torque/test-torque.tq:122:5
    TNode<BoolT> t1943 = UncheckedCast<BoolT>(CallLabelTestHelper4(implicit_cast<bool>(false)));
    USE(implicit_cast<TNode<BoolT>>(t1943));
    TVARIABLE(BoolT, r2_328_impl);
    auto r2_328 = &r2_328_impl;
    USE(r2_328);
    *r2_328 = implicit_cast<TNode<BoolT>>(t1943);
    // ../../test/torque/test-torque.tq:124:5
    {
      Label label__True_566_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_566 = &label__True_566_impl;
      USE(label__True_566);
      Label label__False_567_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_567 = &label__False_567_impl;
      USE(label__False_567);
      Label label_if_done_label_910_1536_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_if_done_label_910_1536 = &label_if_done_label_910_1536_impl;
      USE(label_if_done_label_910_1536);
      Label label__True_568_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_568 = &label__True_568_impl;
      USE(label__True_568);
      GotoIfNot(implicit_cast<TNode<BoolT>>((*r1_327).value()), label__False_567);
      TNode<BoolT> t1944 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>((*r2_328).value())));
      USE(implicit_cast<TNode<BoolT>>(t1944));
Branch(implicit_cast<TNode<BoolT>>(t1944), label__True_566, label__False_567);
      if (label__True_566->is_used())
      {
        BIND(label__True_566);
        // ../../test/torque/test-torque.tq:124:20
        {
          // ../../test/torque/test-torque.tq:125:7
          *_return_326 = implicit_cast<TNode<Oddball>>(True());
          Goto(label_macro_end_1535);
        }
      }
      if (label__False_567->is_used())
      {
        BIND(label__False_567);
        // ../../test/torque/test-torque.tq:126:12
        {
          // ../../test/torque/test-torque.tq:127:7
          *_return_326 = implicit_cast<TNode<Oddball>>(False());
          Goto(label_macro_end_1535);
        }
      }
    }
  }
  BIND(label_macro_end_1535);
  return implicit_cast<TNode<Oddball>>((*_return_326).value());
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::GenericMacroTest22UT12ATHeapObject5ATSmi(TNode<Object> p_param2) {
  TVARIABLE(Object, _return_329_impl);
  auto _return_329 = &_return_329_impl;
  USE(_return_329);
  Label label_macro_end_1537_impl(this, {_return_329}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1537 = &label_macro_end_1537_impl;
  USE(label_macro_end_1537);
  // ../../test/torque/test-torque.tq:135:52
  {
    // ../../test/torque/test-torque.tq:136:5
    *_return_329 = implicit_cast<TNode<Object>>(p_param2);
    Goto(label_macro_end_1537);
  }
  BIND(label_macro_end_1537);
  return implicit_cast<TNode<Object>>((*_return_329).value());
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::GenericMacroTestWithLabels22UT12ATHeapObject5ATSmi(TNode<Object> p_param2, Label* label_Y_569) {
  TVARIABLE(Object, _return_330_impl);
  auto _return_330 = &_return_330_impl;
  USE(_return_330);
  Label label_macro_end_1538_impl(this, {_return_330}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1538 = &label_macro_end_1538_impl;
  USE(label_macro_end_1538);
  // ../../test/torque/test-torque.tq:145:16
  {
    // ../../test/torque/test-torque.tq:146:5
    *_return_330 = implicit_cast<TNode<Object>>(p_param2);
    Goto(label_macro_end_1538);
  }
  BIND(label_macro_end_1538);
  return implicit_cast<TNode<Object>>((*_return_330).value());
}

void TestBuiltinsFromDSLAssembler::TestMacroSpecialization() {
  Label label_macro_end_1539_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1539 = &label_macro_end_1539_impl;
  USE(label_macro_end_1539);
  // ../../test/torque/test-torque.tq:149:35
  {
    // ../../test/torque/test-torque.tq:150:5
    {
      Label label_try_done_911_1540_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_911_1540 = &label_try_done_911_1540_impl;
      USE(label_try_done_911_1540);
      Label label_Fail_570_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Fail_570 = &label_Fail_570_impl;
      USE(label_Fail_570);
      Label label_try_begin_912_1541_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_912_1541 = &label_try_begin_912_1541_impl;
      USE(label_try_begin_912_1541);
      Goto(label_try_begin_912_1541);
      if (label_try_begin_912_1541->is_used())
      {
        BIND(label_try_begin_912_1541);
        // ../../test/torque/test-torque.tq:150:9
        {
          // ../../test/torque/test-torque.tq:151:7
          Label label__True_571_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_571 = &label__True_571_impl;
          USE(label__True_571);
          Label label__False_572_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_572 = &label__False_572_impl;
          USE(label__False_572);
          int31_t t1945 = 0;
          TNode<Smi> t1946 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1945)));
          TNode<Object> t1947 = UncheckedCast<Object>(GenericMacroTest5ATSmi(implicit_cast<TNode<Smi>>(t1946)));
          USE(implicit_cast<TNode<Object>>(t1947));
          TNode<BoolT> t1948 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1947), implicit_cast<TNode<Object>>(Undefined())));
          USE(implicit_cast<TNode<BoolT>>(t1948));
          Branch(implicit_cast<TNode<BoolT>>(t1948), label__True_571, label__False_572);
          BIND(label__False_572);
          Print("assert 'GenericMacroTest<Smi>(0) == Undefined' failed at ../../test/torque/test-torque.tq:151:7");
          Unreachable();
          BIND(label__True_571);
          // ../../test/torque/test-torque.tq:152:7
          Label label__True_573_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_573 = &label__True_573_impl;
          USE(label__True_573);
          Label label__False_574_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_574 = &label__False_574_impl;
          USE(label__False_574);
          int31_t t1949 = 1;
          TNode<Smi> t1950 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1949)));
          TNode<Object> t1951 = UncheckedCast<Object>(GenericMacroTest5ATSmi(implicit_cast<TNode<Smi>>(t1950)));
          USE(implicit_cast<TNode<Object>>(t1951));
          TNode<BoolT> t1952 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1951), implicit_cast<TNode<Object>>(Undefined())));
          USE(implicit_cast<TNode<BoolT>>(t1952));
          Branch(implicit_cast<TNode<BoolT>>(t1952), label__True_573, label__False_574);
          BIND(label__False_574);
          Print("assert 'GenericMacroTest<Smi>(1) == Undefined' failed at ../../test/torque/test-torque.tq:152:7");
          Unreachable();
          BIND(label__True_573);
          // ../../test/torque/test-torque.tq:153:7
          Label label__True_575_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_575 = &label__True_575_impl;
          USE(label__True_575);
          Label label__False_576_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_576 = &label__False_576_impl;
          USE(label__False_576);
          TNode<Object> t1953 = UncheckedCast<Object>(GenericMacroTest22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>(Null())));
          USE(implicit_cast<TNode<Object>>(t1953));
          TNode<BoolT> t1954 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1953), implicit_cast<TNode<Object>>(Null())));
          USE(implicit_cast<TNode<BoolT>>(t1954));
          Branch(implicit_cast<TNode<BoolT>>(t1954), label__True_575, label__False_576);
          BIND(label__False_576);
          Print("assert 'GenericMacroTest<Object>(Null) == Null' failed at ../../test/torque/test-torque.tq:153:7");
          Unreachable();
          BIND(label__True_575);
          // ../../test/torque/test-torque.tq:154:7
          Label label__True_577_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_577 = &label__True_577_impl;
          USE(label__True_577);
          Label label__False_578_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_578 = &label__False_578_impl;
          USE(label__False_578);
          TNode<Object> t1955 = UncheckedCast<Object>(GenericMacroTest22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>(False())));
          USE(implicit_cast<TNode<Object>>(t1955));
          TNode<BoolT> t1956 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1955), implicit_cast<TNode<Object>>(False())));
          USE(implicit_cast<TNode<BoolT>>(t1956));
          Branch(implicit_cast<TNode<BoolT>>(t1956), label__True_577, label__False_578);
          BIND(label__False_578);
          Print("assert 'GenericMacroTest<Object>(False) == False' failed at ../../test/torque/test-torque.tq:154:7");
          Unreachable();
          BIND(label__True_577);
          // ../../test/torque/test-torque.tq:155:7
          Label label__True_579_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_579 = &label__True_579_impl;
          USE(label__True_579);
          Label label__False_580_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_580 = &label__False_580_impl;
          USE(label__False_580);
          TNode<Object> t1957 = UncheckedCast<Object>(GenericMacroTest22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>(True())));
          USE(implicit_cast<TNode<Object>>(t1957));
          TNode<BoolT> t1958 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1957), implicit_cast<TNode<Object>>(True())));
          USE(implicit_cast<TNode<BoolT>>(t1958));
          Branch(implicit_cast<TNode<BoolT>>(t1958), label__True_579, label__False_580);
          BIND(label__False_580);
          Print("assert 'GenericMacroTest<Object>(True) == True' failed at ../../test/torque/test-torque.tq:155:7");
          Unreachable();
          BIND(label__True_579);
          // ../../test/torque/test-torque.tq:156:7
          Label label__True_581_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_581 = &label__True_581_impl;
          USE(label__True_581);
          Label label__False_582_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_582 = &label__False_582_impl;
          USE(label__False_582);
          int31_t t1959 = 0;
          TNode<Smi> t1960 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1959)));
          TNode<Object> t1961 = UncheckedCast<Object>(GenericMacroTestWithLabels5ATSmi(implicit_cast<TNode<Smi>>(t1960), label_Fail_570));
          USE(implicit_cast<TNode<Object>>(t1961));
          TNode<BoolT> t1962 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1961), implicit_cast<TNode<Object>>(Undefined())));
          USE(implicit_cast<TNode<BoolT>>(t1962));
          Branch(implicit_cast<TNode<BoolT>>(t1962), label__True_581, label__False_582);
          BIND(label__False_582);
          Print("assert 'GenericMacroTestWithLabels<Smi>(0) otherwise Fail == Undefined' failed at ../../test/torque/test-torque.tq:156:7");
          Unreachable();
          BIND(label__True_581);
          // ../../test/torque/test-torque.tq:157:7
          Label label__True_583_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_583 = &label__True_583_impl;
          USE(label__True_583);
          Label label__False_584_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_584 = &label__False_584_impl;
          USE(label__False_584);
          int31_t t1963 = 0;
          TNode<Smi> t1964 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1963)));
          TNode<Object> t1965 = UncheckedCast<Object>(GenericMacroTestWithLabels5ATSmi(implicit_cast<TNode<Smi>>(t1964), label_Fail_570));
          USE(implicit_cast<TNode<Object>>(t1965));
          TNode<BoolT> t1966 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1965), implicit_cast<TNode<Object>>(Undefined())));
          USE(implicit_cast<TNode<BoolT>>(t1966));
          Branch(implicit_cast<TNode<BoolT>>(t1966), label__True_583, label__False_584);
          BIND(label__False_584);
          Print("assert 'GenericMacroTestWithLabels<Smi>(0) otherwise Fail == Undefined' failed at ../../test/torque/test-torque.tq:157:7");
          Unreachable();
          BIND(label__True_583);
          // ../../test/torque/test-torque.tq:158:7
          Label label__True_585_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_585 = &label__True_585_impl;
          USE(label__True_585);
          Label label__False_586_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_586 = &label__False_586_impl;
          USE(label__False_586);
          TNode<Object> t1967 = UncheckedCast<Object>(GenericMacroTestWithLabels22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>(Null()), label_Fail_570));
          USE(implicit_cast<TNode<Object>>(t1967));
          TNode<BoolT> t1968 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1967), implicit_cast<TNode<Object>>(Null())));
          USE(implicit_cast<TNode<BoolT>>(t1968));
          Branch(implicit_cast<TNode<BoolT>>(t1968), label__True_585, label__False_586);
          BIND(label__False_586);
          Print("assert 'GenericMacroTestWithLabels<Object>(Null) otherwise Fail == Null' failed at ../../test/torque/test-torque.tq:158:7");
          Unreachable();
          BIND(label__True_585);
          // ../../test/torque/test-torque.tq:159:7
          Label label__True_587_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_587 = &label__True_587_impl;
          USE(label__True_587);
          Label label__False_588_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_588 = &label__False_588_impl;
          USE(label__False_588);
          TNode<Object> t1969 = UncheckedCast<Object>(GenericMacroTestWithLabels22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>(False()), label_Fail_570));
          USE(implicit_cast<TNode<Object>>(t1969));
          TNode<BoolT> t1970 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t1969), implicit_cast<TNode<Object>>(False())));
          USE(implicit_cast<TNode<BoolT>>(t1970));
          Branch(implicit_cast<TNode<BoolT>>(t1970), label__True_587, label__False_588);
          BIND(label__False_588);
          Print("assert 'GenericMacroTestWithLabels<Object>(False) otherwise Fail == False' failed at ../../test/torque/test-torque.tq:159:7");
          Unreachable();
          BIND(label__True_587);
        }
        Goto(label_try_done_911_1540);
      }
      if (label_Fail_570->is_used())
      {
        BIND(label_Fail_570);
        // ../../test/torque/test-torque.tq:161:16
        {
          // ../../test/torque/test-torque.tq:162:7
          Unreachable();
        }
      }
      BIND(label_try_done_911_1540);
    }
  }
}

TF_BUILTIN(TestHelperPlus1, TestBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<Smi> p_x = UncheckedCast<Smi>(Parameter(Descriptor::kX));
  USE(p_x);
  // ../../test/torque/test-torque.tq:166:58
  {
    // ../../test/torque/test-torque.tq:167:5
    int31_t t1971 = 1;
    TNode<Smi> t1972 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1971)));
    TNode<Smi> t1973 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>(p_x), implicit_cast<TNode<Smi>>(t1972)));
    USE(implicit_cast<TNode<Smi>>(t1973));
    Return(implicit_cast<TNode<Smi>>(t1973));
  }
}

TF_BUILTIN(TestHelperPlus2, TestBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<Smi> p_x = UncheckedCast<Smi>(Parameter(Descriptor::kX));
  USE(p_x);
  // ../../test/torque/test-torque.tq:169:58
  {
    // ../../test/torque/test-torque.tq:170:5
    int31_t t1974 = 2;
    TNode<Smi> t1975 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1974)));
    TNode<Smi> t1976 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>(p_x), implicit_cast<TNode<Smi>>(t1975)));
    USE(implicit_cast<TNode<Smi>>(t1976));
    Return(implicit_cast<TNode<Smi>>(t1976));
  }
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestFunctionPointers(TNode<Context> p_context) {
  TVARIABLE(Oddball, _return_331_impl);
  auto _return_331 = &_return_331_impl;
  USE(_return_331);
  Label label_macro_end_1542_impl(this, {_return_331}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1542 = &label_macro_end_1542_impl;
  USE(label_macro_end_1542);
  // ../../test/torque/test-torque.tq:173:57
  {
    // ../../test/torque/test-torque.tq:174:5
    TVARIABLE(Code, fptr_332_impl);
    auto fptr_332 = &fptr_332_impl;
    USE(fptr_332);
    *fptr_332 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kTestHelperPlus1).code()));
    // ../../test/torque/test-torque.tq:175:5
    Label label__True_589_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_589 = &label__True_589_impl;
    USE(label__True_589);
    Label label__False_590_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_590 = &label__False_590_impl;
    USE(label__False_590);
    int31_t t1977 = 42;
    TNode<Smi> t1978 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1977)));
    TNode<Smi> t1979 = UncheckedCast<Smi>(CallStub(Builtins::CallableFor(isolate(), Builtins::kTestHelperPlus1).descriptor(), implicit_cast<TNode<Code>>((*fptr_332).value()), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<Smi>>(t1978)));
    USE(implicit_cast<TNode<Smi>>(t1979));
    int31_t t1980 = 43;
    TNode<Smi> t1981 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1980)));
    TNode<BoolT> t1982 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t1979), implicit_cast<TNode<Smi>>(t1981)));
    USE(implicit_cast<TNode<BoolT>>(t1982));
    Branch(implicit_cast<TNode<BoolT>>(t1982), label__True_589, label__False_590);
    BIND(label__False_590);
    Print("assert 'fptr(context, 42) == 43' failed at ../../test/torque/test-torque.tq:175:5");
    Unreachable();
    BIND(label__True_589);
    // ../../test/torque/test-torque.tq:176:5
    *fptr_332 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kTestHelperPlus2).code()));
    // ../../test/torque/test-torque.tq:177:5
    Label label__True_591_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_591 = &label__True_591_impl;
    USE(label__True_591);
    Label label__False_592_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_592 = &label__False_592_impl;
    USE(label__False_592);
    int31_t t1983 = 42;
    TNode<Smi> t1984 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1983)));
    TNode<Smi> t1985 = UncheckedCast<Smi>(CallStub(Builtins::CallableFor(isolate(), Builtins::kTestHelperPlus1).descriptor(), implicit_cast<TNode<Code>>((*fptr_332).value()), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<Smi>>(t1984)));
    USE(implicit_cast<TNode<Smi>>(t1985));
    int31_t t1986 = 44;
    TNode<Smi> t1987 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t1986)));
    TNode<BoolT> t1988 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t1985), implicit_cast<TNode<Smi>>(t1987)));
    USE(implicit_cast<TNode<BoolT>>(t1988));
    Branch(implicit_cast<TNode<BoolT>>(t1988), label__True_591, label__False_592);
    BIND(label__False_592);
    Print("assert 'fptr(context, 42) == 44' failed at ../../test/torque/test-torque.tq:177:5");
    Unreachable();
    BIND(label__True_591);
    // ../../test/torque/test-torque.tq:178:5
    *_return_331 = implicit_cast<TNode<Oddball>>(True());
    Goto(label_macro_end_1542);
  }
  BIND(label_macro_end_1542);
  return implicit_cast<TNode<Oddball>>((*_return_331).value());
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestVariableRedeclaration(TNode<Context> p_context) {
  TVARIABLE(Oddball, _return_333_impl);
  auto _return_333 = &_return_333_impl;
  USE(_return_333);
  Label label_macro_end_1543_impl(this, {_return_333}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1543 = &label_macro_end_1543_impl;
  USE(label_macro_end_1543);
  // ../../test/torque/test-torque.tq:181:62
  {
    // ../../test/torque/test-torque.tq:182:5
    auto t1989 = [=]() {
      int31_t t1991 = 0;
      return implicit_cast<int31_t>(t1991);
    };
    auto t1990 = [=]() {
      int31_t t1992 = 1;
      return implicit_cast<int31_t>(t1992);
    };
    TVARIABLE(Int32T, t1993_913_impl);
    auto t1993_913 = &t1993_913_impl;
    USE(t1993_913);
    {
      Label label__True_593_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_593 = &label__True_593_impl;
      USE(label__True_593);
      Label label__False_594_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_594 = &label__False_594_impl;
      USE(label__False_594);
      Label label__done_914_1544_impl(this, {t1993_913}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_914_1544 = &label__done_914_1544_impl;
      USE(label__done_914_1544);
      int31_t t1994 = 42;
      int31_t t1995 = 0;
      bool t1996 = ConstexprInt31Equal(implicit_cast<int31_t>(t1994), implicit_cast<int31_t>(t1995));
      USE(implicit_cast<bool>(t1996));
      TNode<BoolT> t1997 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t1996)));
      USE(implicit_cast<TNode<BoolT>>(t1997));
      Branch(implicit_cast<TNode<BoolT>>(t1997), label__True_593, label__False_594);
      BIND(label__True_593);
            TNode<Int32T> t1998 = UncheckedCast<Int32T>(FromConstexpr7ATint31(implicit_cast<int31_t>(t1989())));
      *t1993_913 = implicit_cast<TNode<Int32T>>(t1998);
      Goto(label__done_914_1544);
      BIND(label__False_594);
            TNode<Int32T> t1999 = UncheckedCast<Int32T>(FromConstexpr7ATint31(implicit_cast<int31_t>(t1990())));
      *t1993_913 = implicit_cast<TNode<Int32T>>(t1999);
      Goto(label__done_914_1544);
      BIND(label__done_914_1544);
    }
    TVARIABLE(Int32T, var1_334_impl);
    auto var1_334 = &var1_334_impl;
    USE(var1_334);
    *var1_334 = implicit_cast<TNode<Int32T>>((*t1993_913).value());
    // ../../test/torque/test-torque.tq:183:5
    auto t2000 = [=]() {
      int31_t t2002 = 1;
      return implicit_cast<int31_t>(t2002);
    };
    auto t2001 = [=]() {
      int31_t t2003 = 0;
      return implicit_cast<int31_t>(t2003);
    };
    TVARIABLE(Int32T, t2004_915_impl);
    auto t2004_915 = &t2004_915_impl;
    USE(t2004_915);
    {
      Label label__True_595_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_595 = &label__True_595_impl;
      USE(label__True_595);
      Label label__False_596_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_596 = &label__False_596_impl;
      USE(label__False_596);
      Label label__done_916_1545_impl(this, {t2004_915}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_916_1545 = &label__done_916_1545_impl;
      USE(label__done_916_1545);
      int31_t t2005 = 42;
      int31_t t2006 = 0;
      bool t2007 = ConstexprInt31Equal(implicit_cast<int31_t>(t2005), implicit_cast<int31_t>(t2006));
      USE(implicit_cast<bool>(t2007));
      TNode<BoolT> t2008 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2007)));
      USE(implicit_cast<TNode<BoolT>>(t2008));
      Branch(implicit_cast<TNode<BoolT>>(t2008), label__True_595, label__False_596);
      BIND(label__True_595);
            TNode<Int32T> t2009 = UncheckedCast<Int32T>(FromConstexpr7ATint31(implicit_cast<int31_t>(t2000())));
      *t2004_915 = implicit_cast<TNode<Int32T>>(t2009);
      Goto(label__done_916_1545);
      BIND(label__False_596);
            TNode<Int32T> t2010 = UncheckedCast<Int32T>(FromConstexpr7ATint31(implicit_cast<int31_t>(t2001())));
      *t2004_915 = implicit_cast<TNode<Int32T>>(t2010);
      Goto(label__done_916_1545);
      BIND(label__done_916_1545);
    }
    TVARIABLE(Int32T, var2_335_impl);
    auto var2_335 = &var2_335_impl;
    USE(var2_335);
    *var2_335 = implicit_cast<TNode<Int32T>>((*t2004_915).value());
    // ../../test/torque/test-torque.tq:184:5
    *_return_333 = implicit_cast<TNode<Oddball>>(True());
    Goto(label_macro_end_1543);
  }
  BIND(label_macro_end_1543);
  return implicit_cast<TNode<Oddball>>((*_return_333).value());
}

compiler::TNode<Smi> TestBuiltinsFromDSLAssembler::TestTernaryOperator(TNode<Smi> p_x) {
  TVARIABLE(Smi, _return_336_impl);
  auto _return_336 = &_return_336_impl;
  USE(_return_336);
  Label label_macro_end_1546_impl(this, {_return_336}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1546 = &label_macro_end_1546_impl;
  USE(label_macro_end_1546);
  // ../../test/torque/test-torque.tq:187:42
  {
    // ../../test/torque/test-torque.tq:188:5
    auto t2011 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2012 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2013_917_impl);
    auto t2013_917 = &t2013_917_impl;
    USE(t2013_917);
    {
      Label label__True_597_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_597 = &label__True_597_impl;
      USE(label__True_597);
      Label label__False_598_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_598 = &label__False_598_impl;
      USE(label__False_598);
      Label label__done_918_1547_impl(this, {t2013_917}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_918_1547 = &label__done_918_1547_impl;
      USE(label__done_918_1547);
      int31_t t2014 = 0;
      TNode<Smi> t2015 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2014)));
      TNode<BoolT> t2016 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>(p_x), implicit_cast<TNode<Smi>>(t2015)));
      USE(implicit_cast<TNode<BoolT>>(t2016));
      Branch(implicit_cast<TNode<BoolT>>(t2016), label__True_597, label__False_598);
      BIND(label__True_597);
            TNode<BoolT> t2017 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2011())));
      *t2013_917 = implicit_cast<TNode<BoolT>>(t2017);
      Goto(label__done_918_1547);
      BIND(label__False_598);
            TNode<BoolT> t2018 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2012())));
      *t2013_917 = implicit_cast<TNode<BoolT>>(t2018);
      Goto(label__done_918_1547);
      BIND(label__done_918_1547);
    }
    TVARIABLE(BoolT, b_337_impl);
    auto b_337 = &b_337_impl;
    USE(b_337);
    *b_337 = implicit_cast<TNode<BoolT>>((*t2013_917).value());
    // ../../test/torque/test-torque.tq:189:5
    auto t2019 = [=]() {
      int31_t t2021 = 10;
      TNode<Smi> t2022 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2021)));
      TNode<Smi> t2023 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>(p_x), implicit_cast<TNode<Smi>>(t2022)));
      USE(implicit_cast<TNode<Smi>>(t2023));
      return implicit_cast<TNode<Smi>>(t2023);
    };
    auto t2020 = [=]() {
      int31_t t2024 = 100;
      TNode<Smi> t2025 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2024)));
      TNode<Smi> t2026 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>(p_x), implicit_cast<TNode<Smi>>(t2025)));
      USE(implicit_cast<TNode<Smi>>(t2026));
      return implicit_cast<TNode<Smi>>(t2026);
    };
    TVARIABLE(Smi, t2027_919_impl);
    auto t2027_919 = &t2027_919_impl;
    USE(t2027_919);
    {
      Label label__True_599_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_599 = &label__True_599_impl;
      USE(label__True_599);
      Label label__False_600_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_600 = &label__False_600_impl;
      USE(label__False_600);
      Label label__done_920_1548_impl(this, {t2027_919}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_920_1548 = &label__done_920_1548_impl;
      USE(label__done_920_1548);
      Branch(implicit_cast<TNode<BoolT>>((*b_337).value()), label__True_599, label__False_600);
      BIND(label__True_599);
            *t2027_919 = implicit_cast<TNode<Smi>>(t2019());
      Goto(label__done_920_1548);
      BIND(label__False_600);
            *t2027_919 = implicit_cast<TNode<Smi>>(t2020());
      Goto(label__done_920_1548);
      BIND(label__done_920_1548);
    }
    *_return_336 = implicit_cast<TNode<Smi>>((*t2027_919).value());
    Goto(label_macro_end_1546);
  }
  BIND(label_macro_end_1546);
  return implicit_cast<TNode<Smi>>((*_return_336).value());
}

void TestBuiltinsFromDSLAssembler::TestFunctionPointerToGeneric(TNode<Context> p_c) {
  Label label_macro_end_1549_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1549 = &label_macro_end_1549_impl;
  USE(label_macro_end_1549);
  // ../../test/torque/test-torque.tq:192:50
  {
    // ../../test/torque/test-torque.tq:193:5
    TVARIABLE(Code, fptr1_338_impl);
    auto fptr1_338 = &fptr1_338_impl;
    USE(fptr1_338);
    *fptr1_338 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest5ATSmi).code()));
    // ../../test/torque/test-torque.tq:194:5
    TVARIABLE(Code, fptr2_339_impl);
    auto fptr2_339 = &fptr2_339_impl;
    USE(fptr2_339);
    *fptr2_339 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest22UT12ATHeapObject5ATSmi).code()));
    // ../../test/torque/test-torque.tq:196:5
    Label label__True_601_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_601 = &label__True_601_impl;
    USE(label__True_601);
    Label label__False_602_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_602 = &label__False_602_impl;
    USE(label__False_602);
    int31_t t2028 = 0;
    TNode<Smi> t2029 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2028)));
    TNode<Object> t2030 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest5ATSmi).descriptor(), implicit_cast<TNode<Code>>((*fptr1_338).value()), implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Smi>>(t2029)));
    USE(implicit_cast<TNode<Object>>(t2030));
    TNode<BoolT> t2031 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t2030), implicit_cast<TNode<Object>>(Null())));
    USE(implicit_cast<TNode<BoolT>>(t2031));
    Branch(implicit_cast<TNode<BoolT>>(t2031), label__True_601, label__False_602);
    BIND(label__False_602);
    Print("assert 'fptr1(c, 0) == Null' failed at ../../test/torque/test-torque.tq:196:5");
    Unreachable();
    BIND(label__True_601);
    // ../../test/torque/test-torque.tq:197:5
    Label label__True_603_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_603 = &label__True_603_impl;
    USE(label__True_603);
    Label label__False_604_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_604 = &label__False_604_impl;
    USE(label__False_604);
    int31_t t2032 = 1;
    TNode<Smi> t2033 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2032)));
    TNode<Object> t2034 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest5ATSmi).descriptor(), implicit_cast<TNode<Code>>((*fptr1_338).value()), implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Smi>>(t2033)));
    USE(implicit_cast<TNode<Object>>(t2034));
    TNode<BoolT> t2035 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t2034), implicit_cast<TNode<Object>>(Null())));
    USE(implicit_cast<TNode<BoolT>>(t2035));
    Branch(implicit_cast<TNode<BoolT>>(t2035), label__True_603, label__False_604);
    BIND(label__False_604);
    Print("assert 'fptr1(c, 1) == Null' failed at ../../test/torque/test-torque.tq:197:5");
    Unreachable();
    BIND(label__True_603);
    // ../../test/torque/test-torque.tq:198:5
    Label label__True_605_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_605 = &label__True_605_impl;
    USE(label__True_605);
    Label label__False_606_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_606 = &label__False_606_impl;
    USE(label__False_606);
    TNode<Object> t2036 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest22UT12ATHeapObject5ATSmi).descriptor(), implicit_cast<TNode<Code>>((*fptr2_339).value()), implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<Object>>(t2036));
    TNode<BoolT> t2037 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t2036), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<BoolT>>(t2037));
    Branch(implicit_cast<TNode<BoolT>>(t2037), label__True_605, label__False_606);
    BIND(label__False_606);
    Print("assert 'fptr2(c, Undefined) == Undefined' failed at ../../test/torque/test-torque.tq:198:5");
    Unreachable();
    BIND(label__True_605);
    // ../../test/torque/test-torque.tq:199:5
    Label label__True_607_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_607 = &label__True_607_impl;
    USE(label__True_607);
    Label label__False_608_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_608 = &label__False_608_impl;
    USE(label__False_608);
    TNode<Object> t2038 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kGenericBuiltinTest22UT12ATHeapObject5ATSmi).descriptor(), implicit_cast<TNode<Code>>((*fptr2_339).value()), implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<Object>>(t2038));
    TNode<BoolT> t2039 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>(t2038), implicit_cast<TNode<Object>>(Undefined())));
    USE(implicit_cast<TNode<BoolT>>(t2039));
    Branch(implicit_cast<TNode<BoolT>>(t2039), label__True_607, label__False_608);
    BIND(label__False_608);
    Print("assert 'fptr2(c, Undefined) == Undefined' failed at ../../test/torque/test-torque.tq:199:5");
    Unreachable();
    BIND(label__True_607);
  }
}

compiler::TNode<Code> TestBuiltinsFromDSLAssembler::TestTypeAlias(TNode<Code> p_x) {
  TVARIABLE(Code, _return_340_impl);
  auto _return_340 = &_return_340_impl;
  USE(_return_340);
  Label label_macro_end_1550_impl(this, {_return_340}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1550 = &label_macro_end_1550_impl;
  USE(label_macro_end_1550);
  // ../../test/torque/test-torque.tq:203:42
  {
    // ../../test/torque/test-torque.tq:204:5
    *_return_340 = implicit_cast<TNode<Code>>(p_x);
    Goto(label_macro_end_1550);
  }
  BIND(label_macro_end_1550);
  return implicit_cast<TNode<Code>>((*_return_340).value());
}

compiler::TNode<Oddball> TestBuiltinsFromDSLAssembler::TestUnsafeCast(TNode<Context> p_c, TNode<Number> p_n) {
  TVARIABLE(Oddball, _return_341_impl);
  auto _return_341 = &_return_341_impl;
  USE(_return_341);
  Label label_macro_end_1551_impl(this, {_return_341}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1551 = &label_macro_end_1551_impl;
  USE(label_macro_end_1551);
  // ../../test/torque/test-torque.tq:207:56
  {
    // ../../test/torque/test-torque.tq:208:5
    {
      Label label__True_609_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_609 = &label__True_609_impl;
      USE(label__True_609);
      Label label__False_610_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_610 = &label__False_610_impl;
      USE(label__False_610);
      TNode<BoolT> t2040 = UncheckedCast<BoolT>(TaggedIsSmi(implicit_cast<TNode<Object>>(p_n)));
      USE(implicit_cast<TNode<BoolT>>(t2040));
      Branch(implicit_cast<TNode<BoolT>>(t2040), label__True_609, label__False_610);
      if (label__True_609->is_used())
      {
        BIND(label__True_609);
        // ../../test/torque/test-torque.tq:208:25
        {
          // ../../test/torque/test-torque.tq:209:7
          TNode<Smi> t2041 = UncheckedCast<Smi>(UnsafeCast5ATSmi(implicit_cast<TNode<Object>>(p_n)));
          USE(implicit_cast<TNode<Smi>>(t2041));
          TVARIABLE(Smi, m_342_impl);
          auto m_342 = &m_342_impl;
          USE(m_342);
          *m_342 = implicit_cast<TNode<Smi>>(t2041);
          // ../../test/torque/test-torque.tq:211:7
          Label label__True_611_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_611 = &label__True_611_impl;
          USE(label__True_611);
          Label label__False_612_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_612 = &label__False_612_impl;
          USE(label__False_612);
          TNode<Smi> t2042 = UncheckedCast<Smi>(CallBuiltin(Builtins::kTestHelperPlus1, implicit_cast<TNode<Context>>(p_c), implicit_cast<TNode<Smi>>((*m_342).value())));
          USE(implicit_cast<TNode<Smi>>(t2042));
          int31_t t2043 = 11;
          TNode<Smi> t2044 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2043)));
          TNode<BoolT> t2045 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t2042), implicit_cast<TNode<Smi>>(t2044)));
          USE(implicit_cast<TNode<BoolT>>(t2045));
          Branch(implicit_cast<TNode<BoolT>>(t2045), label__True_611, label__False_612);
          BIND(label__False_612);
          Print("assert 'TestHelperPlus1(c, m) == 11' failed at ../../test/torque/test-torque.tq:211:7");
          Unreachable();
          BIND(label__True_611);
          // ../../test/torque/test-torque.tq:212:7
          *_return_341 = implicit_cast<TNode<Oddball>>(True());
          Goto(label_macro_end_1551);
        }
      }
      BIND(label__False_610);
    }
    // ../../test/torque/test-torque.tq:214:5
    *_return_341 = implicit_cast<TNode<Oddball>>(False());
    Goto(label_macro_end_1551);
  }
  BIND(label_macro_end_1551);
  return implicit_cast<TNode<Oddball>>((*_return_341).value());
}

void TestBuiltinsFromDSLAssembler::TestHexLiteral() {
  Label label_macro_end_1552_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1552 = &label_macro_end_1552_impl;
  USE(label_macro_end_1552);
  // ../../test/torque/test-torque.tq:217:26
  {
    // ../../test/torque/test-torque.tq:218:5
    Label label__True_613_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_613 = &label__True_613_impl;
    USE(label__True_613);
    Label label__False_614_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_614 = &label__False_614_impl;
    USE(label__False_614);
    int31_t t2046 = 0xffff;
    TNode<IntPtrT> t2047 = UncheckedCast<IntPtrT>(Convert8ATintptr(implicit_cast<int31_t>(t2046)));
    USE(implicit_cast<TNode<IntPtrT>>(t2047));
    int31_t t2048 = 1;
    TNode<IntPtrT> t2049 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2048)));
    TNode<IntPtrT> t2050 = UncheckedCast<IntPtrT>(IntPtrAdd(implicit_cast<TNode<IntPtrT>>(t2047), implicit_cast<TNode<IntPtrT>>(t2049)));
    USE(implicit_cast<TNode<IntPtrT>>(t2050));
    int31_t t2051 = 0x10000;
    TNode<IntPtrT> t2052 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2051)));
    TNode<BoolT> t2053 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<IntPtrT>>(t2050), implicit_cast<TNode<IntPtrT>>(t2052)));
    USE(implicit_cast<TNode<BoolT>>(t2053));
    Branch(implicit_cast<TNode<BoolT>>(t2053), label__True_613, label__False_614);
    BIND(label__False_614);
    Print("assert 'Convert<intptr>(0xffff) + 1 == 0x10000' failed at ../../test/torque/test-torque.tq:218:5");
    Unreachable();
    BIND(label__True_613);
    // ../../test/torque/test-torque.tq:219:5
    Label label__True_615_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_615 = &label__True_615_impl;
    USE(label__True_615);
    Label label__False_616_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_616 = &label__False_616_impl;
    USE(label__False_616);
    int31_t t2054 = -0xffff;
    TNode<IntPtrT> t2055 = UncheckedCast<IntPtrT>(Convert8ATintptr(implicit_cast<int31_t>(t2054)));
    USE(implicit_cast<TNode<IntPtrT>>(t2055));
    int31_t t2056 = -65535;
    TNode<IntPtrT> t2057 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2056)));
    TNode<BoolT> t2058 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<IntPtrT>>(t2055), implicit_cast<TNode<IntPtrT>>(t2057)));
    USE(implicit_cast<TNode<BoolT>>(t2058));
    Branch(implicit_cast<TNode<BoolT>>(t2058), label__True_615, label__False_616);
    BIND(label__False_616);
    Print("assert 'Convert<intptr>(-0xffff) == -65535' failed at ../../test/torque/test-torque.tq:219:5");
    Unreachable();
    BIND(label__True_615);
  }
}

void TestBuiltinsFromDSLAssembler::TestLargeIntegerLiterals(TNode<Context> p_c) {
  Label label_macro_end_1553_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1553 = &label_macro_end_1553_impl;
  USE(label_macro_end_1553);
  // ../../test/torque/test-torque.tq:222:46
  {
    // ../../test/torque/test-torque.tq:223:5
    int32_t t2059 = 0x40000000;
    TVARIABLE(Int32T, x_343_impl);
    auto x_343 = &x_343_impl;
    USE(x_343);
    TNode<Int32T> t2060 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int32_t>(t2059)));
    *x_343 = implicit_cast<TNode<Int32T>>(t2060);
    // ../../test/torque/test-torque.tq:224:5
    int32_t t2061 = 0x7fffffff;
    TVARIABLE(Int32T, y_344_impl);
    auto y_344 = &y_344_impl;
    USE(y_344);
    TNode<Int32T> t2062 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int32_t>(t2061)));
    *y_344 = implicit_cast<TNode<Int32T>>(t2062);
  }
}

void TestBuiltinsFromDSLAssembler::TestMultilineAssert() {
  Label label_macro_end_1554_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1554 = &label_macro_end_1554_impl;
  USE(label_macro_end_1554);
  // ../../test/torque/test-torque.tq:227:31
  {
    // ../../test/torque/test-torque.tq:228:5
    int31_t t2063 = 5;
    TVARIABLE(Smi, someVeryLongVariableNameThatWillCauseLineBreaks_345_impl);
    auto someVeryLongVariableNameThatWillCauseLineBreaks_345 = &someVeryLongVariableNameThatWillCauseLineBreaks_345_impl;
    USE(someVeryLongVariableNameThatWillCauseLineBreaks_345);
    TNode<Smi> t2064 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2063)));
    *someVeryLongVariableNameThatWillCauseLineBreaks_345 = implicit_cast<TNode<Smi>>(t2064);
    // ../../test/torque/test-torque.tq:229:5
    Label label__True_617_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_617 = &label__True_617_impl;
    USE(label__True_617);
    Label label__False_618_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_618 = &label__False_618_impl;
    USE(label__False_618);
    Label label__True_619_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_619 = &label__True_619_impl;
    USE(label__True_619);
    int31_t t2065 = 0;
    TNode<Smi> t2066 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2065)));
    TNode<BoolT> t2067 = UncheckedCast<BoolT>(SmiGreaterThan(implicit_cast<TNode<Smi>>((*someVeryLongVariableNameThatWillCauseLineBreaks_345).value()), implicit_cast<TNode<Smi>>(t2066)));
    USE(implicit_cast<TNode<BoolT>>(t2067));
    GotoIfNot(implicit_cast<TNode<BoolT>>(t2067), label__False_618);
    int31_t t2068 = 10;
    TNode<Smi> t2069 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2068)));
    TNode<BoolT> t2070 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*someVeryLongVariableNameThatWillCauseLineBreaks_345).value()), implicit_cast<TNode<Smi>>(t2069)));
    USE(implicit_cast<TNode<BoolT>>(t2070));
Branch(implicit_cast<TNode<BoolT>>(t2070), label__True_617, label__False_618);
    BIND(label__False_618);
    Print("assert 'someVeryLongVariableNameThatWillCauseLineBreaks > 0 && someVeryLongVariableNameThatWillCauseLineBreaks < 10' failed at ../../test/torque/test-torque.tq:229:5");
    Unreachable();
    BIND(label__True_617);
  }
}

void TestBuiltinsFromDSLAssembler::TestNewlineInString() {
  Label label_macro_end_1555_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1555 = &label_macro_end_1555_impl;
  USE(label_macro_end_1555);
  // ../../test/torque/test-torque.tq:234:31
  {
    // ../../test/torque/test-torque.tq:235:5
    const char* t2071 = "Hello, World!\n";
    Print(implicit_cast<const char*>(t2071));
  }
}

int31_t TestBuiltinsFromDSLAssembler::kConstexprConst() {
  int31_t t2072 = 5;
  return implicit_cast<int31_t>(t2072);
}

compiler::TNode<IntPtrT> TestBuiltinsFromDSLAssembler::kIntptrConst() {
  int31_t t2073 = 4;
  TNode<IntPtrT> t2074 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2073)));
  return implicit_cast<TNode<IntPtrT>>(t2074);
}

compiler::TNode<Smi> TestBuiltinsFromDSLAssembler::kSmiConst() {
  int31_t t2075 = 3;
  TNode<Smi> t2076 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2075)));
  return implicit_cast<TNode<Smi>>(t2076);
}

void TestBuiltinsFromDSLAssembler::TestModuleConstBindings() {
  Label label_macro_end_1556_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1556 = &label_macro_end_1556_impl;
  USE(label_macro_end_1556);
  // ../../test/torque/test-torque.tq:242:35
  {
    // ../../test/torque/test-torque.tq:243:5
    Label label__True_620_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_620 = &label__True_620_impl;
    USE(label__True_620);
    Label label__False_621_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_621 = &label__False_621_impl;
    USE(label__False_621);
    int31_t t2077 = 5;
    TNode<Int32T> t2078 = UncheckedCast<Int32T>(Int32Constant(implicit_cast<int31_t>(t2077)));
    USE(implicit_cast<TNode<Int32T>>(t2078));
    TNode<Int32T> t2079 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(kConstexprConst())));
    TNode<BoolT> t2080 = UncheckedCast<BoolT>(Word32Equal(implicit_cast<TNode<Int32T>>(t2079), implicit_cast<TNode<Int32T>>(t2078)));
    USE(implicit_cast<TNode<BoolT>>(t2080));
    Branch(implicit_cast<TNode<BoolT>>(t2080), label__True_620, label__False_621);
    BIND(label__False_621);
    Print("assert 'kConstexprConst == Int32Constant(5)' failed at ../../test/torque/test-torque.tq:243:5");
    Unreachable();
    BIND(label__True_620);
    // ../../test/torque/test-torque.tq:244:5
    Label label__True_622_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_622 = &label__True_622_impl;
    USE(label__True_622);
    Label label__False_623_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_623 = &label__False_623_impl;
    USE(label__False_623);
    int31_t t2081 = 4;
    TNode<IntPtrT> t2082 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2081)));
    TNode<BoolT> t2083 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<IntPtrT>>(kIntptrConst()), implicit_cast<TNode<IntPtrT>>(t2082)));
    USE(implicit_cast<TNode<BoolT>>(t2083));
    Branch(implicit_cast<TNode<BoolT>>(t2083), label__True_622, label__False_623);
    BIND(label__False_623);
    Print("assert 'kIntptrConst == 4' failed at ../../test/torque/test-torque.tq:244:5");
    Unreachable();
    BIND(label__True_622);
    // ../../test/torque/test-torque.tq:245:5
    Label label__True_624_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_624 = &label__True_624_impl;
    USE(label__True_624);
    Label label__False_625_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_625 = &label__False_625_impl;
    USE(label__False_625);
    int31_t t2084 = 3;
    TNode<Smi> t2085 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2084)));
    TNode<BoolT> t2086 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(kSmiConst()), implicit_cast<TNode<Smi>>(t2085)));
    USE(implicit_cast<TNode<BoolT>>(t2086));
    Branch(implicit_cast<TNode<BoolT>>(t2086), label__True_624, label__False_625);
    BIND(label__False_625);
    Print("assert 'kSmiConst == 3' failed at ../../test/torque/test-torque.tq:245:5");
    Unreachable();
    BIND(label__True_624);
  }
}

void TestBuiltinsFromDSLAssembler::TestLocalConstBindings() {
  Label label_macro_end_1557_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1557 = &label_macro_end_1557_impl;
  USE(label_macro_end_1557);
  // ../../test/torque/test-torque.tq:248:34
  {
    // ../../test/torque/test-torque.tq:249:5
    int31_t t2087 = 3;
    int31_t x_921_impl;
    auto x_921 = &x_921_impl;
    USE(x_921);
    *x_921 = implicit_cast<int31_t>(t2087);
    // ../../test/torque/test-torque.tq:250:5
    TNode<Smi> xSmi_922_impl;
    auto xSmi_922 = &xSmi_922_impl;
    USE(xSmi_922);
    TNode<Smi> t2088 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>((*x_921))));
    *xSmi_922 = implicit_cast<TNode<Smi>>(t2088);
    // ../../test/torque/test-torque.tq:251:5
    {
      // ../../test/torque/test-torque.tq:252:7
      int31_t t2089 = 1;
      TNode<Smi> t2090 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2089)));
      USE(implicit_cast<TNode<Smi>>(t2090));
      TNode<Smi> t2091 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>((*x_921))));
      TNode<Smi> t2092 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>(t2091), implicit_cast<TNode<Smi>>(t2090)));
      USE(implicit_cast<TNode<Smi>>(t2092));
      TNode<Smi> x_923_impl;
      auto x_923 = &x_923_impl;
      USE(x_923);
      *x_923 = implicit_cast<TNode<Smi>>(t2092);
      // ../../test/torque/test-torque.tq:253:7
      Label label__True_626_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_626 = &label__True_626_impl;
      USE(label__True_626);
      Label label__False_627_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_627 = &label__False_627_impl;
      USE(label__False_627);
      int31_t t2093 = 1;
      TNode<Smi> t2094 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2093)));
      TNode<Smi> t2095 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*xSmi_922)), implicit_cast<TNode<Smi>>(t2094)));
      USE(implicit_cast<TNode<Smi>>(t2095));
      TNode<BoolT> t2096 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*x_923)), implicit_cast<TNode<Smi>>(t2095)));
      USE(implicit_cast<TNode<BoolT>>(t2096));
      Branch(implicit_cast<TNode<BoolT>>(t2096), label__True_626, label__False_627);
      BIND(label__False_627);
      Print("assert 'x == xSmi + 1' failed at ../../test/torque/test-torque.tq:253:7");
      Unreachable();
      BIND(label__True_626);
      // ../../test/torque/test-torque.tq:254:7
      TNode<Smi> xSmi_924_impl;
      auto xSmi_924 = &xSmi_924_impl;
      USE(xSmi_924);
      *xSmi_924 = implicit_cast<TNode<Smi>>((*x_923));
      // ../../test/torque/test-torque.tq:255:7
      Label label__True_628_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_628 = &label__True_628_impl;
      USE(label__True_628);
      Label label__False_629_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_629 = &label__False_629_impl;
      USE(label__False_629);
      TNode<BoolT> t2097 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*x_923)), implicit_cast<TNode<Smi>>((*xSmi_924))));
      USE(implicit_cast<TNode<BoolT>>(t2097));
      Branch(implicit_cast<TNode<BoolT>>(t2097), label__True_628, label__False_629);
      BIND(label__False_629);
      Print("assert 'x == xSmi' failed at ../../test/torque/test-torque.tq:255:7");
      Unreachable();
      BIND(label__True_628);
      // ../../test/torque/test-torque.tq:256:7
      Label label__True_630_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_630 = &label__True_630_impl;
      USE(label__True_630);
      Label label__False_631_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_631 = &label__False_631_impl;
      USE(label__False_631);
      int31_t t2098 = 4;
      TNode<Smi> t2099 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2098)));
      TNode<BoolT> t2100 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*x_923)), implicit_cast<TNode<Smi>>(t2099)));
      USE(implicit_cast<TNode<BoolT>>(t2100));
      Branch(implicit_cast<TNode<BoolT>>(t2100), label__True_630, label__False_631);
      BIND(label__False_631);
      Print("assert 'x == 4' failed at ../../test/torque/test-torque.tq:256:7");
      Unreachable();
      BIND(label__True_630);
    }
    // ../../test/torque/test-torque.tq:258:5
    Label label__True_632_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_632 = &label__True_632_impl;
    USE(label__True_632);
    Label label__False_633_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_633 = &label__False_633_impl;
    USE(label__False_633);
    int31_t t2101 = 3;
    TNode<Smi> t2102 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2101)));
    TNode<BoolT> t2103 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*xSmi_922)), implicit_cast<TNode<Smi>>(t2102)));
    USE(implicit_cast<TNode<BoolT>>(t2103));
    Branch(implicit_cast<TNode<BoolT>>(t2103), label__True_632, label__False_633);
    BIND(label__False_633);
    Print("assert 'xSmi == 3' failed at ../../test/torque/test-torque.tq:258:5");
    Unreachable();
    BIND(label__True_632);
    // ../../test/torque/test-torque.tq:259:5
    Label label__True_634_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_634 = &label__True_634_impl;
    USE(label__True_634);
    Label label__False_635_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_635 = &label__False_635_impl;
    USE(label__False_635);
    TNode<Smi> t2104 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>((*x_921))));
    TNode<BoolT> t2105 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t2104), implicit_cast<TNode<Smi>>((*xSmi_922))));
    USE(implicit_cast<TNode<BoolT>>(t2105));
    Branch(implicit_cast<TNode<BoolT>>(t2105), label__True_634, label__False_635);
    BIND(label__False_635);
    Print("assert 'x == xSmi' failed at ../../test/torque/test-torque.tq:259:5");
    Unreachable();
    BIND(label__True_634);
  }
}

compiler::TNode<Smi> TestBuiltinsFromDSLAssembler::TestStruct1(TestStructA p_i) {
  TVARIABLE(Smi, _return_346_impl);
  auto _return_346 = &_return_346_impl;
  USE(_return_346);
  Label label_macro_end_1558_impl(this, {_return_346}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1558 = &label_macro_end_1558_impl;
  USE(label_macro_end_1558);
  // ../../test/torque/test-torque.tq:273:42
  {
    // ../../test/torque/test-torque.tq:274:5
    *_return_346 = implicit_cast<TNode<Smi>>(p_i.i);
    Goto(label_macro_end_1558);
  }
  BIND(label_macro_end_1558);
  return implicit_cast<TNode<Smi>>((*_return_346).value());
}

TestBuiltinsFromDSLAssembler::TestStructA TestBuiltinsFromDSLAssembler::TestStruct2() {
  TVARIABLE(FixedArray, _return_indexes_348_impl);
  auto _return_indexes_348 = &_return_indexes_348_impl;
  USE(_return_indexes_348);
  TVARIABLE(Smi, _return_i_349_impl);
  auto _return_i_349 = &_return_i_349_impl;
  USE(_return_i_349);
  TVARIABLE(Number, _return_k_350_impl);
  auto _return_k_350 = &_return_k_350_impl;
  USE(_return_k_350);
  Label label_macro_end_1559_impl(this, {_return_i_349, _return_indexes_348, _return_k_350}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1559 = &label_macro_end_1559_impl;
  USE(label_macro_end_1559);
  // ../../test/torque/test-torque.tq:277:36
  {
    // ../../test/torque/test-torque.tq:278:5
    TNode<FixedArray> t2106 = UncheckedCast<FixedArray>(UnsafeCast12ATFixedArray(implicit_cast<TNode<Object>>(kEmptyFixedArray())));
    USE(implicit_cast<TNode<FixedArray>>(t2106));
    int31_t t2107 = 27;
    TNode<Smi> t2108 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2107)));
    int31_t t2109 = 31;
    TNode<Number> t2110 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t2109)));
    TestStructA t2111 = {implicit_cast<TNode<FixedArray>>(t2106), implicit_cast<TNode<Smi>>(t2108), implicit_cast<TNode<Number>>(t2110)};
    *_return_indexes_348 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(t2111).indexes);
    *_return_i_349 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(t2111).i);
    *_return_k_350 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(t2111).k);
    Goto(label_macro_end_1559);
  }
  BIND(label_macro_end_1559);
  return TestStructA{implicit_cast<TNode<FixedArray>>((*_return_indexes_348).value()), implicit_cast<TNode<Smi>>((*_return_i_349).value()), implicit_cast<TNode<Number>>((*_return_k_350).value())};
}

TestBuiltinsFromDSLAssembler::TestStructA TestBuiltinsFromDSLAssembler::TestStruct3() {
  TVARIABLE(FixedArray, _return_indexes_352_impl);
  auto _return_indexes_352 = &_return_indexes_352_impl;
  USE(_return_indexes_352);
  TVARIABLE(Smi, _return_i_353_impl);
  auto _return_i_353 = &_return_i_353_impl;
  USE(_return_i_353);
  TVARIABLE(Number, _return_k_354_impl);
  auto _return_k_354 = &_return_k_354_impl;
  USE(_return_k_354);
  Label label_macro_end_1560_impl(this, {_return_i_353, _return_indexes_352, _return_k_354}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1560 = &label_macro_end_1560_impl;
  USE(label_macro_end_1560);
  // ../../test/torque/test-torque.tq:281:36
  {
    // ../../test/torque/test-torque.tq:282:5
    TNode<FixedArray> t2112 = UncheckedCast<FixedArray>(UnsafeCast12ATFixedArray(implicit_cast<TNode<Object>>(kEmptyFixedArray())));
    USE(implicit_cast<TNode<FixedArray>>(t2112));
    int31_t t2113 = 13;
    TNode<Smi> t2114 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2113)));
    int31_t t2115 = 5;
    TNode<Number> t2116 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t2115)));
    TestStructA t2117 = {implicit_cast<TNode<FixedArray>>(t2112), implicit_cast<TNode<Smi>>(t2114), implicit_cast<TNode<Number>>(t2116)};
    TVARIABLE(FixedArray, a_indexes_356_impl);
    auto a_indexes_356 = &a_indexes_356_impl;
    USE(a_indexes_356);
    TVARIABLE(Smi, a_i_357_impl);
    auto a_i_357 = &a_i_357_impl;
    USE(a_i_357);
    TVARIABLE(Number, a_k_358_impl);
    auto a_k_358 = &a_k_358_impl;
    USE(a_k_358);
    *a_indexes_356 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(t2117).indexes);
    *a_i_357 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(t2117).i);
    *a_k_358 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(t2117).k);
    // ../../test/torque/test-torque.tq:284:5
    TVARIABLE(FixedArray, b_indexes_360_impl);
    auto b_indexes_360 = &b_indexes_360_impl;
    USE(b_indexes_360);
    TVARIABLE(Smi, b_i_361_impl);
    auto b_i_361 = &b_i_361_impl;
    USE(b_i_361);
    TVARIABLE(Number, b_k_362_impl);
    auto b_k_362 = &b_k_362_impl;
    USE(b_k_362);
    *b_indexes_360 = implicit_cast<TNode<FixedArray>>((*a_indexes_356).value());
    *b_i_361 = implicit_cast<TNode<Smi>>((*a_i_357).value());
    *b_k_362 = implicit_cast<TNode<Number>>((*a_k_358).value());
    // ../../test/torque/test-torque.tq:285:5
    TestStructA t2118 = (TestStruct2());
    USE(implicit_cast<TestStructA>(t2118));
    TVARIABLE(FixedArray, c_indexes_364_impl);
    auto c_indexes_364 = &c_indexes_364_impl;
    USE(c_indexes_364);
    TVARIABLE(Smi, c_i_365_impl);
    auto c_i_365 = &c_i_365_impl;
    USE(c_i_365);
    TVARIABLE(Number, c_k_366_impl);
    auto c_k_366 = &c_k_366_impl;
    USE(c_k_366);
    *c_indexes_364 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(t2118).indexes);
    *c_i_365 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(t2118).i);
    *c_k_366 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(t2118).k);
    // ../../test/torque/test-torque.tq:286:5
    TNode<Smi> t2119 = UncheckedCast<Smi>(TestStruct1(TestStructA{implicit_cast<TNode<FixedArray>>((*c_indexes_364).value()), implicit_cast<TNode<Smi>>((*c_i_365).value()), implicit_cast<TNode<Number>>((*c_k_366).value())}));
    USE(implicit_cast<TNode<Smi>>(t2119));
    *a_i_357 = implicit_cast<TNode<Smi>>(t2119);
    // ../../test/torque/test-torque.tq:287:5
    *a_k_358 = implicit_cast<TNode<Number>>((*a_i_357).value());
    // ../../test/torque/test-torque.tq:288:5
    TVARIABLE(FixedArray, d_x_indexes_369_impl);
    auto d_x_indexes_369 = &d_x_indexes_369_impl;
    USE(d_x_indexes_369);
    TVARIABLE(Smi, d_x_i_370_impl);
    auto d_x_i_370 = &d_x_i_370_impl;
    USE(d_x_i_370);
    TVARIABLE(Number, d_x_k_371_impl);
    auto d_x_k_371 = &d_x_k_371_impl;
    USE(d_x_k_371);
    TVARIABLE(Smi, d_y_372_impl);
    auto d_y_372 = &d_y_372_impl;
    USE(d_y_372);
    // ../../test/torque/test-torque.tq:289:5
    *d_x_indexes_369 = implicit_cast<TNode<FixedArray>>((*a_indexes_356).value());
    *d_x_i_370 = implicit_cast<TNode<Smi>>((*a_i_357).value());
    *d_x_k_371 = implicit_cast<TNode<Number>>((*a_k_358).value());
    // ../../test/torque/test-torque.tq:290:5
    int31_t t2120 = 7;
    TNode<Smi> t2121 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2120)));
    TestStructB t2122 = {TestStructA{implicit_cast<TNode<FixedArray>>((*a_indexes_356).value()), implicit_cast<TNode<Smi>>((*a_i_357).value()), implicit_cast<TNode<Number>>((*a_k_358).value())}, implicit_cast<TNode<Smi>>(t2121)};
    *d_x_indexes_369 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(implicit_cast<TestStructB>(t2122).x).indexes);
    *d_x_i_370 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(implicit_cast<TestStructB>(t2122).x).i);
    *d_x_k_371 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(implicit_cast<TestStructB>(t2122).x).k);
    *d_y_372 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructB>(t2122).y);
    // ../../test/torque/test-torque.tq:291:5
    TVARIABLE(FixedArray, e_indexes_374_impl);
    auto e_indexes_374 = &e_indexes_374_impl;
    USE(e_indexes_374);
    TVARIABLE(Smi, e_i_375_impl);
    auto e_i_375 = &e_i_375_impl;
    USE(e_i_375);
    TVARIABLE(Number, e_k_376_impl);
    auto e_k_376 = &e_k_376_impl;
    USE(e_k_376);
    *e_indexes_374 = implicit_cast<TNode<FixedArray>>((*d_x_indexes_369).value());
    *e_i_375 = implicit_cast<TNode<Smi>>((*d_x_i_370).value());
    *e_k_376 = implicit_cast<TNode<Number>>((*d_x_k_371).value());
    // ../../test/torque/test-torque.tq:292:5
    TNode<FixedArray> t2123 = UncheckedCast<FixedArray>(UnsafeCast12ATFixedArray(implicit_cast<TNode<Object>>(kEmptyFixedArray())));
    USE(implicit_cast<TNode<FixedArray>>(t2123));
    int31_t t2124 = 27;
    TNode<Smi> t2125 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2124)));
    int31_t t2126 = 31;
    TNode<Number> t2127 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t2126)));
    TestStructA t2128 = {implicit_cast<TNode<FixedArray>>(t2123), implicit_cast<TNode<Smi>>(t2125), implicit_cast<TNode<Number>>(t2127)};
    TVARIABLE(Smi, f_377_impl);
    auto f_377 = &f_377_impl;
    USE(f_377);
    *f_377 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(t2128).i);
    // ../../test/torque/test-torque.tq:294:5
    TestStructA t2129 = (TestStruct2());
    USE(implicit_cast<TestStructA>(t2129));
    *f_377 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(t2129).i);
    // ../../test/torque/test-torque.tq:295:5
    *_return_indexes_352 = implicit_cast<TNode<FixedArray>>((*a_indexes_356).value());
    *_return_i_353 = implicit_cast<TNode<Smi>>((*a_i_357).value());
    *_return_k_354 = implicit_cast<TNode<Number>>((*a_k_358).value());
    Goto(label_macro_end_1560);
  }
  BIND(label_macro_end_1560);
  return TestStructA{implicit_cast<TNode<FixedArray>>((*_return_indexes_352).value()), implicit_cast<TNode<Smi>>((*_return_i_353).value()), implicit_cast<TNode<Number>>((*_return_k_354).value())};
}

TestBuiltinsFromDSLAssembler::TestStructC TestBuiltinsFromDSLAssembler::TestStruct4() {
  TVARIABLE(FixedArray, _return_x_indexes_380_impl);
  auto _return_x_indexes_380 = &_return_x_indexes_380_impl;
  USE(_return_x_indexes_380);
  TVARIABLE(Smi, _return_x_i_381_impl);
  auto _return_x_i_381 = &_return_x_i_381_impl;
  USE(_return_x_i_381);
  TVARIABLE(Number, _return_x_k_382_impl);
  auto _return_x_k_382 = &_return_x_k_382_impl;
  USE(_return_x_k_382);
  TVARIABLE(FixedArray, _return_y_indexes_384_impl);
  auto _return_y_indexes_384 = &_return_y_indexes_384_impl;
  USE(_return_y_indexes_384);
  TVARIABLE(Smi, _return_y_i_385_impl);
  auto _return_y_i_385 = &_return_y_i_385_impl;
  USE(_return_y_i_385);
  TVARIABLE(Number, _return_y_k_386_impl);
  auto _return_y_k_386 = &_return_y_k_386_impl;
  USE(_return_y_k_386);
  Label label_macro_end_1561_impl(this, {_return_x_i_381, _return_x_indexes_380, _return_x_k_382, _return_y_i_385, _return_y_indexes_384, _return_y_k_386}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1561 = &label_macro_end_1561_impl;
  USE(label_macro_end_1561);
  // ../../test/torque/test-torque.tq:303:36
  {
    // ../../test/torque/test-torque.tq:304:5
    TestStructA t2130 = (TestStruct2());
    USE(implicit_cast<TestStructA>(t2130));
    TestStructA t2131 = (TestStruct2());
    USE(implicit_cast<TestStructA>(t2131));
    TestStructC t2132 = {implicit_cast<TestStructA>(t2130), implicit_cast<TestStructA>(t2131)};
    *_return_x_indexes_380 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).x).indexes);
    *_return_x_i_381 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).x).i);
    *_return_x_k_382 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).x).k);
    *_return_y_indexes_384 = implicit_cast<TNode<FixedArray>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).y).indexes);
    *_return_y_i_385 = implicit_cast<TNode<Smi>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).y).i);
    *_return_y_k_386 = implicit_cast<TNode<Number>>(implicit_cast<TestStructA>(implicit_cast<TestStructC>(t2132).y).k);
    Goto(label_macro_end_1561);
  }
  BIND(label_macro_end_1561);
  return TestStructC{TestStructA{implicit_cast<TNode<FixedArray>>((*_return_x_indexes_380).value()), implicit_cast<TNode<Smi>>((*_return_x_i_381).value()), implicit_cast<TNode<Number>>((*_return_x_k_382).value())}, TestStructA{implicit_cast<TNode<FixedArray>>((*_return_y_indexes_384).value()), implicit_cast<TNode<Smi>>((*_return_y_i_385).value()), implicit_cast<TNode<Number>>((*_return_y_k_386).value())}};
}

void TestBuiltinsFromDSLAssembler::TestForLoop() {
  Label label_macro_end_1562_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1562 = &label_macro_end_1562_impl;
  USE(label_macro_end_1562);
  // ../../test/torque/test-torque.tq:309:23
  {
    // ../../test/torque/test-torque.tq:310:5
    int31_t t2133 = 0;
    TVARIABLE(Smi, sum_387_impl);
    auto sum_387 = &sum_387_impl;
    USE(sum_387);
    TNode<Smi> t2134 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2133)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2134);
    // ../../test/torque/test-torque.tq:311:5
    int31_t t2135 = 0;
    TVARIABLE(Smi, i_388_impl);
    auto i_388 = &i_388_impl;
    USE(i_388);
    TNode<Smi> t2136 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2135)));
    *i_388 = implicit_cast<TNode<Smi>>(t2136);
    Label label__True_636_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_636 = &label__True_636_impl;
    USE(label__True_636);
    Label label__False_637_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_637 = &label__False_637_impl;
    USE(label__False_637);
    Label label_header_925_1563_impl(this, {i_388, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_925_1563 = &label_header_925_1563_impl;
    USE(label_header_925_1563);
    Goto(label_header_925_1563);
    BIND(label_header_925_1563);
    Label label_action_926_1564_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_926_1564 = &label_action_926_1564_impl;
    USE(label_action_926_1564);
    int31_t t2137 = 5;
    TNode<Smi> t2138 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2137)));
    TNode<BoolT> t2139 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*i_388).value()), implicit_cast<TNode<Smi>>(t2138)));
    USE(implicit_cast<TNode<BoolT>>(t2139));
    Branch(implicit_cast<TNode<BoolT>>(t2139), label__True_636, label__False_637);
    if (label__True_636->is_used())
    {
      BIND(label__True_636);
      // ../../test/torque/test-torque.tq:311:38
      TNode<Smi> t2140 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*i_388).value())));
      *sum_387 = implicit_cast<TNode<Smi>>(t2140);
      Goto(label_action_926_1564);
    }
    {
      BIND(label_action_926_1564);
      TNode<Smi> t2141 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2142 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*i_388).value()), implicit_cast<TNode<Smi>>(t2141)));
      *i_388 = implicit_cast<TNode<Smi>>(t2142);
      Goto(label_header_925_1563);
    }
    BIND(label__False_637);
    // ../../test/torque/test-torque.tq:312:5
    Label label__True_638_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_638 = &label__True_638_impl;
    USE(label__True_638);
    Label label__False_639_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_639 = &label__False_639_impl;
    USE(label__False_639);
    int31_t t2143 = 10;
    TNode<Smi> t2144 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2143)));
    TNode<BoolT> t2145 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2144)));
    USE(implicit_cast<TNode<BoolT>>(t2145));
    Branch(implicit_cast<TNode<BoolT>>(t2145), label__True_638, label__False_639);
    BIND(label__False_639);
    Print("assert 'sum == 10' failed at ../../test/torque/test-torque.tq:312:5");
    Unreachable();
    BIND(label__True_638);
    // ../../test/torque/test-torque.tq:314:5
    int31_t t2146 = 0;
    TNode<Smi> t2147 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2146)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2147);
    // ../../test/torque/test-torque.tq:315:5
    int31_t t2148 = 0;
    TVARIABLE(Smi, j_389_impl);
    auto j_389 = &j_389_impl;
    USE(j_389);
    TNode<Smi> t2149 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2148)));
    *j_389 = implicit_cast<TNode<Smi>>(t2149);
    // ../../test/torque/test-torque.tq:316:5
    Label label__True_640_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_640 = &label__True_640_impl;
    USE(label__True_640);
    Label label__False_641_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_641 = &label__False_641_impl;
    USE(label__False_641);
    Label label_header_927_1565_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_927_1565 = &label_header_927_1565_impl;
    USE(label_header_927_1565);
    Goto(label_header_927_1565);
    BIND(label_header_927_1565);
    Label label_action_928_1566_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_928_1566 = &label_action_928_1566_impl;
    USE(label_action_928_1566);
    int31_t t2150 = 5;
    TNode<Smi> t2151 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2150)));
    TNode<BoolT> t2152 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2151)));
    USE(implicit_cast<TNode<BoolT>>(t2152));
    Branch(implicit_cast<TNode<BoolT>>(t2152), label__True_640, label__False_641);
    if (label__True_640->is_used())
    {
      BIND(label__True_640);
      // ../../test/torque/test-torque.tq:316:24
      TNode<Smi> t2153 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*j_389).value())));
      *sum_387 = implicit_cast<TNode<Smi>>(t2153);
      Goto(label_action_928_1566);
    }
    {
      BIND(label_action_928_1566);
      TNode<Smi> t2154 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2155 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2154)));
      *j_389 = implicit_cast<TNode<Smi>>(t2155);
      Goto(label_header_927_1565);
    }
    BIND(label__False_641);
    // ../../test/torque/test-torque.tq:317:5
    Label label__True_642_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_642 = &label__True_642_impl;
    USE(label__True_642);
    Label label__False_643_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_643 = &label__False_643_impl;
    USE(label__False_643);
    int31_t t2156 = 10;
    TNode<Smi> t2157 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2156)));
    TNode<BoolT> t2158 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2157)));
    USE(implicit_cast<TNode<BoolT>>(t2158));
    Branch(implicit_cast<TNode<BoolT>>(t2158), label__True_642, label__False_643);
    BIND(label__False_643);
    Print("assert 'sum == 10' failed at ../../test/torque/test-torque.tq:317:5");
    Unreachable();
    BIND(label__True_642);
    // ../../test/torque/test-torque.tq:319:5
    int31_t t2159 = 0;
    TNode<Smi> t2160 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2159)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2160);
    // ../../test/torque/test-torque.tq:320:5
    int31_t t2161 = 0;
    TNode<Smi> t2162 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2161)));
    *j_389 = implicit_cast<TNode<Smi>>(t2162);
    // ../../test/torque/test-torque.tq:321:5
    Label label__True_644_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_644 = &label__True_644_impl;
    USE(label__True_644);
    Label label__False_645_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_645 = &label__False_645_impl;
    USE(label__False_645);
    Label label_header_929_1567_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_929_1567 = &label_header_929_1567_impl;
    USE(label_header_929_1567);
    Goto(label_header_929_1567);
    BIND(label_header_929_1567);
    int31_t t2163 = 5;
    TNode<Smi> t2164 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2163)));
    TNode<BoolT> t2165 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2164)));
    USE(implicit_cast<TNode<BoolT>>(t2165));
    Branch(implicit_cast<TNode<BoolT>>(t2165), label__True_644, label__False_645);
    if (label__True_644->is_used())
    {
      BIND(label__True_644);
      // ../../test/torque/test-torque.tq:321:20
      TNode<Smi> t2166 = implicit_cast<TNode<Smi>>((*j_389).value());
      USE(t2166);
      TNode<Smi> t2167 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2168 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2167)));
      *j_389 = implicit_cast<TNode<Smi>>(t2168);
      TNode<Smi> t2169 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2166)));
      *sum_387 = implicit_cast<TNode<Smi>>(t2169);
      Goto(label_header_929_1567);
    }
    BIND(label__False_645);
    // ../../test/torque/test-torque.tq:322:5
    Label label__True_646_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_646 = &label__True_646_impl;
    USE(label__True_646);
    Label label__False_647_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_647 = &label__False_647_impl;
    USE(label__False_647);
    int31_t t2170 = 10;
    TNode<Smi> t2171 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2170)));
    TNode<BoolT> t2172 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2171)));
    USE(implicit_cast<TNode<BoolT>>(t2172));
    Branch(implicit_cast<TNode<BoolT>>(t2172), label__True_646, label__False_647);
    BIND(label__False_647);
    Print("assert 'sum == 10' failed at ../../test/torque/test-torque.tq:322:5");
    Unreachable();
    BIND(label__True_646);
    // ../../test/torque/test-torque.tq:325:5
    int31_t t2173 = 0;
    TNode<Smi> t2174 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2173)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2174);
    // ../../test/torque/test-torque.tq:326:5
    int31_t t2175 = 0;
    TVARIABLE(Smi, i_390_impl);
    auto i_390 = &i_390_impl;
    USE(i_390);
    TNode<Smi> t2176 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2175)));
    *i_390 = implicit_cast<TNode<Smi>>(t2176);
    Label label__True_648_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_648 = &label__True_648_impl;
    USE(label__True_648);
    Label label__False_649_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_649 = &label__False_649_impl;
    USE(label__False_649);
    Label label_header_930_1568_impl(this, {i_390, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_930_1568 = &label_header_930_1568_impl;
    USE(label_header_930_1568);
    Goto(label_header_930_1568);
    BIND(label_header_930_1568);
    Label label_action_931_1569_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_931_1569 = &label_action_931_1569_impl;
    USE(label_action_931_1569);
    Goto(label__True_648);
    if (label__True_648->is_used())
    {
      BIND(label__True_648);
      // ../../test/torque/test-torque.tq:326:32
      {
        // ../../test/torque/test-torque.tq:327:7
        {
          Label label__True_650_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_650 = &label__True_650_impl;
          USE(label__True_650);
          Label label__False_651_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_651 = &label__False_651_impl;
          USE(label__False_651);
          int31_t t2177 = 5;
          TNode<Smi> t2178 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2177)));
          TNode<BoolT> t2179 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*i_390).value()), implicit_cast<TNode<Smi>>(t2178)));
          USE(implicit_cast<TNode<BoolT>>(t2179));
          Branch(implicit_cast<TNode<BoolT>>(t2179), label__True_650, label__False_651);
          if (label__True_650->is_used())
          {
            BIND(label__True_650);
            // ../../test/torque/test-torque.tq:327:19
            Goto(label__False_649);
          }
          BIND(label__False_651);
        }
        // ../../test/torque/test-torque.tq:328:7
        TNode<Smi> t2180 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*i_390).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2180);
      }
      Goto(label_action_931_1569);
    }
    {
      BIND(label_action_931_1569);
      TNode<Smi> t2181 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2182 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*i_390).value()), implicit_cast<TNode<Smi>>(t2181)));
      *i_390 = implicit_cast<TNode<Smi>>(t2182);
      Goto(label_header_930_1568);
    }
    BIND(label__False_649);
    // ../../test/torque/test-torque.tq:330:5
    Label label__True_652_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_652 = &label__True_652_impl;
    USE(label__True_652);
    Label label__False_653_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_653 = &label__False_653_impl;
    USE(label__False_653);
    int31_t t2183 = 10;
    TNode<Smi> t2184 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2183)));
    TNode<BoolT> t2185 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2184)));
    USE(implicit_cast<TNode<BoolT>>(t2185));
    Branch(implicit_cast<TNode<BoolT>>(t2185), label__True_652, label__False_653);
    BIND(label__False_653);
    Print("assert 'sum == 10' failed at ../../test/torque/test-torque.tq:330:5");
    Unreachable();
    BIND(label__True_652);
    // ../../test/torque/test-torque.tq:332:5
    int31_t t2186 = 0;
    TNode<Smi> t2187 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2186)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2187);
    // ../../test/torque/test-torque.tq:333:5
    int31_t t2188 = 0;
    TNode<Smi> t2189 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2188)));
    *j_389 = implicit_cast<TNode<Smi>>(t2189);
    // ../../test/torque/test-torque.tq:334:5
    Label label__True_654_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_654 = &label__True_654_impl;
    USE(label__True_654);
    Label label__False_655_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_655 = &label__False_655_impl;
    USE(label__False_655);
    Label label_header_932_1570_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_932_1570 = &label_header_932_1570_impl;
    USE(label_header_932_1570);
    Goto(label_header_932_1570);
    BIND(label_header_932_1570);
    Goto(label__True_654);
    if (label__True_654->is_used())
    {
      BIND(label__True_654);
      // ../../test/torque/test-torque.tq:334:14
      {
        // ../../test/torque/test-torque.tq:335:7
        {
          Label label__True_656_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_656 = &label__True_656_impl;
          USE(label__True_656);
          Label label__False_657_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_657 = &label__False_657_impl;
          USE(label__False_657);
          int31_t t2190 = 5;
          TNode<Smi> t2191 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2190)));
          TNode<BoolT> t2192 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2191)));
          USE(implicit_cast<TNode<BoolT>>(t2192));
          Branch(implicit_cast<TNode<BoolT>>(t2192), label__True_656, label__False_657);
          if (label__True_656->is_used())
          {
            BIND(label__True_656);
            // ../../test/torque/test-torque.tq:335:19
            Goto(label__False_655);
          }
          BIND(label__False_657);
        }
        // ../../test/torque/test-torque.tq:336:7
        TNode<Smi> t2193 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*j_389).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2193);
        // ../../test/torque/test-torque.tq:337:7
        TNode<Smi> t2194 = implicit_cast<TNode<Smi>>((*j_389).value());
        USE(t2194);
        TNode<Smi> t2195 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
        TNode<Smi> t2196 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2195)));
        *j_389 = implicit_cast<TNode<Smi>>(t2196);
      }
      Goto(label_header_932_1570);
    }
    BIND(label__False_655);
    // ../../test/torque/test-torque.tq:339:5
    Label label__True_658_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_658 = &label__True_658_impl;
    USE(label__True_658);
    Label label__False_659_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_659 = &label__False_659_impl;
    USE(label__False_659);
    int31_t t2197 = 10;
    TNode<Smi> t2198 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2197)));
    TNode<BoolT> t2199 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2198)));
    USE(implicit_cast<TNode<BoolT>>(t2199));
    Branch(implicit_cast<TNode<BoolT>>(t2199), label__True_658, label__False_659);
    BIND(label__False_659);
    Print("assert 'sum == 10' failed at ../../test/torque/test-torque.tq:339:5");
    Unreachable();
    BIND(label__True_658);
    // ../../test/torque/test-torque.tq:343:5
    int31_t t2200 = 0;
    TNode<Smi> t2201 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2200)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2201);
    // ../../test/torque/test-torque.tq:344:5
    int31_t t2202 = 0;
    TVARIABLE(Smi, i_391_impl);
    auto i_391 = &i_391_impl;
    USE(i_391);
    TNode<Smi> t2203 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2202)));
    *i_391 = implicit_cast<TNode<Smi>>(t2203);
    Label label__True_660_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_660 = &label__True_660_impl;
    USE(label__True_660);
    Label label__False_661_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_661 = &label__False_661_impl;
    USE(label__False_661);
    Label label_header_933_1571_impl(this, {i_391, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_933_1571 = &label_header_933_1571_impl;
    USE(label_header_933_1571);
    Goto(label_header_933_1571);
    BIND(label_header_933_1571);
    Label label_action_934_1572_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_934_1572 = &label_action_934_1572_impl;
    USE(label_action_934_1572);
    int31_t t2204 = 5;
    TNode<Smi> t2205 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2204)));
    TNode<BoolT> t2206 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*i_391).value()), implicit_cast<TNode<Smi>>(t2205)));
    USE(implicit_cast<TNode<BoolT>>(t2206));
    Branch(implicit_cast<TNode<BoolT>>(t2206), label__True_660, label__False_661);
    if (label__True_660->is_used())
    {
      BIND(label__True_660);
      // ../../test/torque/test-torque.tq:344:38
      {
        // ../../test/torque/test-torque.tq:345:7
        {
          Label label__True_662_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_662 = &label__True_662_impl;
          USE(label__True_662);
          Label label__False_663_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_663 = &label__False_663_impl;
          USE(label__False_663);
          int31_t t2207 = 3;
          TNode<Smi> t2208 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2207)));
          TNode<BoolT> t2209 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*i_391).value()), implicit_cast<TNode<Smi>>(t2208)));
          USE(implicit_cast<TNode<BoolT>>(t2209));
          Branch(implicit_cast<TNode<BoolT>>(t2209), label__True_662, label__False_663);
          if (label__True_662->is_used())
          {
            BIND(label__True_662);
            // ../../test/torque/test-torque.tq:345:19
            Goto(label_action_934_1572);
          }
          BIND(label__False_663);
        }
        // ../../test/torque/test-torque.tq:346:7
        TNode<Smi> t2210 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*i_391).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2210);
      }
      Goto(label_action_934_1572);
    }
    {
      BIND(label_action_934_1572);
      TNode<Smi> t2211 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2212 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*i_391).value()), implicit_cast<TNode<Smi>>(t2211)));
      *i_391 = implicit_cast<TNode<Smi>>(t2212);
      Goto(label_header_933_1571);
    }
    BIND(label__False_661);
    // ../../test/torque/test-torque.tq:348:5
    Label label__True_664_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_664 = &label__True_664_impl;
    USE(label__True_664);
    Label label__False_665_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_665 = &label__False_665_impl;
    USE(label__False_665);
    int31_t t2213 = 7;
    TNode<Smi> t2214 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2213)));
    TNode<BoolT> t2215 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2214)));
    USE(implicit_cast<TNode<BoolT>>(t2215));
    Branch(implicit_cast<TNode<BoolT>>(t2215), label__True_664, label__False_665);
    BIND(label__False_665);
    Print("assert 'sum == 7' failed at ../../test/torque/test-torque.tq:348:5");
    Unreachable();
    BIND(label__True_664);
    // ../../test/torque/test-torque.tq:350:5
    int31_t t2216 = 0;
    TNode<Smi> t2217 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2216)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2217);
    // ../../test/torque/test-torque.tq:351:5
    int31_t t2218 = 0;
    TNode<Smi> t2219 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2218)));
    *j_389 = implicit_cast<TNode<Smi>>(t2219);
    // ../../test/torque/test-torque.tq:352:5
    Label label__True_666_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_666 = &label__True_666_impl;
    USE(label__True_666);
    Label label__False_667_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_667 = &label__False_667_impl;
    USE(label__False_667);
    Label label_header_935_1573_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_935_1573 = &label_header_935_1573_impl;
    USE(label_header_935_1573);
    Goto(label_header_935_1573);
    BIND(label_header_935_1573);
    Label label_action_936_1574_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_936_1574 = &label_action_936_1574_impl;
    USE(label_action_936_1574);
    int31_t t2220 = 5;
    TNode<Smi> t2221 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2220)));
    TNode<BoolT> t2222 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2221)));
    USE(implicit_cast<TNode<BoolT>>(t2222));
    Branch(implicit_cast<TNode<BoolT>>(t2222), label__True_666, label__False_667);
    if (label__True_666->is_used())
    {
      BIND(label__True_666);
      // ../../test/torque/test-torque.tq:352:24
      {
        // ../../test/torque/test-torque.tq:353:7
        {
          Label label__True_668_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_668 = &label__True_668_impl;
          USE(label__True_668);
          Label label__False_669_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_669 = &label__False_669_impl;
          USE(label__False_669);
          int31_t t2223 = 3;
          TNode<Smi> t2224 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2223)));
          TNode<BoolT> t2225 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2224)));
          USE(implicit_cast<TNode<BoolT>>(t2225));
          Branch(implicit_cast<TNode<BoolT>>(t2225), label__True_668, label__False_669);
          if (label__True_668->is_used())
          {
            BIND(label__True_668);
            // ../../test/torque/test-torque.tq:353:19
            Goto(label_action_936_1574);
          }
          BIND(label__False_669);
        }
        // ../../test/torque/test-torque.tq:354:7
        TNode<Smi> t2226 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*j_389).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2226);
      }
      Goto(label_action_936_1574);
    }
    {
      BIND(label_action_936_1574);
      TNode<Smi> t2227 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2228 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2227)));
      *j_389 = implicit_cast<TNode<Smi>>(t2228);
      Goto(label_header_935_1573);
    }
    BIND(label__False_667);
    // ../../test/torque/test-torque.tq:356:5
    Label label__True_670_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_670 = &label__True_670_impl;
    USE(label__True_670);
    Label label__False_671_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_671 = &label__False_671_impl;
    USE(label__False_671);
    int31_t t2229 = 7;
    TNode<Smi> t2230 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2229)));
    TNode<BoolT> t2231 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2230)));
    USE(implicit_cast<TNode<BoolT>>(t2231));
    Branch(implicit_cast<TNode<BoolT>>(t2231), label__True_670, label__False_671);
    BIND(label__False_671);
    Print("assert 'sum == 7' failed at ../../test/torque/test-torque.tq:356:5");
    Unreachable();
    BIND(label__True_670);
    // ../../test/torque/test-torque.tq:358:5
    int31_t t2232 = 0;
    TNode<Smi> t2233 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2232)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2233);
    // ../../test/torque/test-torque.tq:359:5
    int31_t t2234 = 0;
    TNode<Smi> t2235 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2234)));
    *j_389 = implicit_cast<TNode<Smi>>(t2235);
    // ../../test/torque/test-torque.tq:360:5
    Label label__True_672_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_672 = &label__True_672_impl;
    USE(label__True_672);
    Label label__False_673_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_673 = &label__False_673_impl;
    USE(label__False_673);
    Label label_header_937_1575_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_937_1575 = &label_header_937_1575_impl;
    USE(label_header_937_1575);
    Goto(label_header_937_1575);
    BIND(label_header_937_1575);
    int31_t t2236 = 5;
    TNode<Smi> t2237 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2236)));
    TNode<BoolT> t2238 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2237)));
    USE(implicit_cast<TNode<BoolT>>(t2238));
    Branch(implicit_cast<TNode<BoolT>>(t2238), label__True_672, label__False_673);
    if (label__True_672->is_used())
    {
      BIND(label__True_672);
      // ../../test/torque/test-torque.tq:360:20
      {
        // ../../test/torque/test-torque.tq:361:7
        {
          Label label__True_674_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_674 = &label__True_674_impl;
          USE(label__True_674);
          Label label__False_675_impl(this, {j_389}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_675 = &label__False_675_impl;
          USE(label__False_675);
          int31_t t2239 = 3;
          TNode<Smi> t2240 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2239)));
          TNode<BoolT> t2241 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2240)));
          USE(implicit_cast<TNode<BoolT>>(t2241));
          Branch(implicit_cast<TNode<BoolT>>(t2241), label__True_674, label__False_675);
          if (label__True_674->is_used())
          {
            BIND(label__True_674);
            // ../../test/torque/test-torque.tq:361:19
            {
              // ../../test/torque/test-torque.tq:362:9
              TNode<Smi> t2242 = implicit_cast<TNode<Smi>>((*j_389).value());
              USE(t2242);
              TNode<Smi> t2243 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
              TNode<Smi> t2244 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2243)));
              *j_389 = implicit_cast<TNode<Smi>>(t2244);
              // ../../test/torque/test-torque.tq:363:9
              Goto(label_header_937_1575);
            }
          }
          BIND(label__False_675);
        }
        // ../../test/torque/test-torque.tq:365:7
        TNode<Smi> t2245 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*j_389).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2245);
        // ../../test/torque/test-torque.tq:366:7
        TNode<Smi> t2246 = implicit_cast<TNode<Smi>>((*j_389).value());
        USE(t2246);
        TNode<Smi> t2247 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
        TNode<Smi> t2248 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2247)));
        *j_389 = implicit_cast<TNode<Smi>>(t2248);
      }
      Goto(label_header_937_1575);
    }
    BIND(label__False_673);
    // ../../test/torque/test-torque.tq:368:5
    Label label__True_676_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_676 = &label__True_676_impl;
    USE(label__True_676);
    Label label__False_677_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_677 = &label__False_677_impl;
    USE(label__False_677);
    int31_t t2249 = 7;
    TNode<Smi> t2250 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2249)));
    TNode<BoolT> t2251 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2250)));
    USE(implicit_cast<TNode<BoolT>>(t2251));
    Branch(implicit_cast<TNode<BoolT>>(t2251), label__True_676, label__False_677);
    BIND(label__False_677);
    Print("assert 'sum == 7' failed at ../../test/torque/test-torque.tq:368:5");
    Unreachable();
    BIND(label__True_676);
    // ../../test/torque/test-torque.tq:370:5
    int31_t t2252 = 0;
    TNode<Smi> t2253 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2252)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2253);
    // ../../test/torque/test-torque.tq:371:5
    int31_t t2254 = 0;
    TVARIABLE(Smi, i_392_impl);
    auto i_392 = &i_392_impl;
    USE(i_392);
    TNode<Smi> t2255 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2254)));
    *i_392 = implicit_cast<TNode<Smi>>(t2255);
    Label label__True_678_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_678 = &label__True_678_impl;
    USE(label__True_678);
    Label label__False_679_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_679 = &label__False_679_impl;
    USE(label__False_679);
    Label label_header_938_1576_impl(this, {i_392, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_938_1576 = &label_header_938_1576_impl;
    USE(label_header_938_1576);
    Goto(label_header_938_1576);
    BIND(label_header_938_1576);
    Label label_action_939_1577_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_939_1577 = &label_action_939_1577_impl;
    USE(label_action_939_1577);
    Goto(label__True_678);
    if (label__True_678->is_used())
    {
      BIND(label__True_678);
      // ../../test/torque/test-torque.tq:371:32
      {
        // ../../test/torque/test-torque.tq:372:7
        {
          Label label__True_680_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_680 = &label__True_680_impl;
          USE(label__True_680);
          Label label__False_681_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_681 = &label__False_681_impl;
          USE(label__False_681);
          int31_t t2256 = 3;
          TNode<Smi> t2257 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2256)));
          TNode<BoolT> t2258 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*i_392).value()), implicit_cast<TNode<Smi>>(t2257)));
          USE(implicit_cast<TNode<BoolT>>(t2258));
          Branch(implicit_cast<TNode<BoolT>>(t2258), label__True_680, label__False_681);
          if (label__True_680->is_used())
          {
            BIND(label__True_680);
            // ../../test/torque/test-torque.tq:372:19
            Goto(label_action_939_1577);
          }
          BIND(label__False_681);
        }
        // ../../test/torque/test-torque.tq:373:7
        {
          Label label__True_682_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_682 = &label__True_682_impl;
          USE(label__True_682);
          Label label__False_683_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_683 = &label__False_683_impl;
          USE(label__False_683);
          int31_t t2259 = 5;
          TNode<Smi> t2260 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2259)));
          TNode<BoolT> t2261 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*i_392).value()), implicit_cast<TNode<Smi>>(t2260)));
          USE(implicit_cast<TNode<BoolT>>(t2261));
          Branch(implicit_cast<TNode<BoolT>>(t2261), label__True_682, label__False_683);
          if (label__True_682->is_used())
          {
            BIND(label__True_682);
            // ../../test/torque/test-torque.tq:373:19
            Goto(label__False_679);
          }
          BIND(label__False_683);
        }
        // ../../test/torque/test-torque.tq:374:7
        TNode<Smi> t2262 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*i_392).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2262);
      }
      Goto(label_action_939_1577);
    }
    {
      BIND(label_action_939_1577);
      TNode<Smi> t2263 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t2264 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*i_392).value()), implicit_cast<TNode<Smi>>(t2263)));
      *i_392 = implicit_cast<TNode<Smi>>(t2264);
      Goto(label_header_938_1576);
    }
    BIND(label__False_679);
    // ../../test/torque/test-torque.tq:376:5
    Label label__True_684_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_684 = &label__True_684_impl;
    USE(label__True_684);
    Label label__False_685_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_685 = &label__False_685_impl;
    USE(label__False_685);
    int31_t t2265 = 7;
    TNode<Smi> t2266 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2265)));
    TNode<BoolT> t2267 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2266)));
    USE(implicit_cast<TNode<BoolT>>(t2267));
    Branch(implicit_cast<TNode<BoolT>>(t2267), label__True_684, label__False_685);
    BIND(label__False_685);
    Print("assert 'sum == 7' failed at ../../test/torque/test-torque.tq:376:5");
    Unreachable();
    BIND(label__True_684);
    // ../../test/torque/test-torque.tq:378:5
    int31_t t2268 = 0;
    TNode<Smi> t2269 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2268)));
    *sum_387 = implicit_cast<TNode<Smi>>(t2269);
    // ../../test/torque/test-torque.tq:379:5
    int31_t t2270 = 0;
    TNode<Smi> t2271 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2270)));
    *j_389 = implicit_cast<TNode<Smi>>(t2271);
    // ../../test/torque/test-torque.tq:380:5
    Label label__True_686_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_686 = &label__True_686_impl;
    USE(label__True_686);
    Label label__False_687_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_687 = &label__False_687_impl;
    USE(label__False_687);
    Label label_header_940_1578_impl(this, {j_389, sum_387}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_940_1578 = &label_header_940_1578_impl;
    USE(label_header_940_1578);
    Goto(label_header_940_1578);
    BIND(label_header_940_1578);
    Goto(label__True_686);
    if (label__True_686->is_used())
    {
      BIND(label__True_686);
      // ../../test/torque/test-torque.tq:380:14
      {
        // ../../test/torque/test-torque.tq:381:7
        {
          Label label__True_688_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_688 = &label__True_688_impl;
          USE(label__True_688);
          Label label__False_689_impl(this, {j_389}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_689 = &label__False_689_impl;
          USE(label__False_689);
          int31_t t2272 = 3;
          TNode<Smi> t2273 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2272)));
          TNode<BoolT> t2274 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2273)));
          USE(implicit_cast<TNode<BoolT>>(t2274));
          Branch(implicit_cast<TNode<BoolT>>(t2274), label__True_688, label__False_689);
          if (label__True_688->is_used())
          {
            BIND(label__True_688);
            // ../../test/torque/test-torque.tq:381:19
            {
              // ../../test/torque/test-torque.tq:382:9
              TNode<Smi> t2275 = implicit_cast<TNode<Smi>>((*j_389).value());
              USE(t2275);
              TNode<Smi> t2276 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
              TNode<Smi> t2277 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2276)));
              *j_389 = implicit_cast<TNode<Smi>>(t2277);
              // ../../test/torque/test-torque.tq:383:9
              Goto(label_header_940_1578);
            }
          }
          BIND(label__False_689);
        }
        // ../../test/torque/test-torque.tq:386:7
        {
          Label label__True_690_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_690 = &label__True_690_impl;
          USE(label__True_690);
          Label label__False_691_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_691 = &label__False_691_impl;
          USE(label__False_691);
          int31_t t2278 = 5;
          TNode<Smi> t2279 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2278)));
          TNode<BoolT> t2280 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2279)));
          USE(implicit_cast<TNode<BoolT>>(t2280));
          Branch(implicit_cast<TNode<BoolT>>(t2280), label__True_690, label__False_691);
          if (label__True_690->is_used())
          {
            BIND(label__True_690);
            // ../../test/torque/test-torque.tq:386:19
            Goto(label__False_687);
          }
          BIND(label__False_691);
        }
        // ../../test/torque/test-torque.tq:387:7
        TNode<Smi> t2281 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>((*j_389).value())));
        *sum_387 = implicit_cast<TNode<Smi>>(t2281);
        // ../../test/torque/test-torque.tq:388:7
        TNode<Smi> t2282 = implicit_cast<TNode<Smi>>((*j_389).value());
        USE(t2282);
        TNode<Smi> t2283 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
        TNode<Smi> t2284 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_389).value()), implicit_cast<TNode<Smi>>(t2283)));
        *j_389 = implicit_cast<TNode<Smi>>(t2284);
      }
      Goto(label_header_940_1578);
    }
    BIND(label__False_687);
    // ../../test/torque/test-torque.tq:390:5
    Label label__True_692_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_692 = &label__True_692_impl;
    USE(label__True_692);
    Label label__False_693_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_693 = &label__False_693_impl;
    USE(label__False_693);
    int31_t t2285 = 7;
    TNode<Smi> t2286 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2285)));
    TNode<BoolT> t2287 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*sum_387).value()), implicit_cast<TNode<Smi>>(t2286)));
    USE(implicit_cast<TNode<BoolT>>(t2287));
    Branch(implicit_cast<TNode<BoolT>>(t2287), label__True_692, label__False_693);
    BIND(label__False_693);
    Print("assert 'sum == 7' failed at ../../test/torque/test-torque.tq:390:5");
    Unreachable();
    BIND(label__True_692);
  }
}

void TestBuiltinsFromDSLAssembler::TestSubtyping(TNode<Smi> p_x) {
  Label label_macro_end_1579_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1579 = &label_macro_end_1579_impl;
  USE(label_macro_end_1579);
  // ../../test/torque/test-torque.tq:393:31
  {
    // ../../test/torque/test-torque.tq:394:5
    TNode<Object> foo_941_impl;
    auto foo_941 = &foo_941_impl;
    USE(foo_941);
    *foo_941 = implicit_cast<TNode<Object>>(p_x);
  }
}

compiler::TNode<Int32T> TestBuiltinsFromDSLAssembler::TypeswitchExample(TNode<Object> p_x) {
  TVARIABLE(Int32T, _return_393_impl);
  auto _return_393 = &_return_393_impl;
  USE(_return_393);
  Label label_macro_end_1580_impl(this, {_return_393}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1580 = &label_macro_end_1580_impl;
  USE(label_macro_end_1580);
  // ../../test/torque/test-torque.tq:408:58
  {
    // ../../test/torque/test-torque.tq:409:5
    int31_t t2288 = 0;
    TVARIABLE(Int32T, result_394_impl);
    auto result_394 = &result_394_impl;
    USE(result_394);
    TNode<Int32T> t2289 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2288)));
    *result_394 = implicit_cast<TNode<Int32T>>(t2289);
    // ../../test/torque/test-torque.tq:410:5
    {
      // ../../test/torque/test-torque.tq:410:17
      TNode<Object> t2290 = UncheckedCast<Object>(IncrementIfSmi36UT12ATFixedArray12ATHeapNumber5ATSmi(implicit_cast<TNode<Object>>(p_x)));
      USE(implicit_cast<TNode<Object>>(t2290));
      TNode<Object> _value_942_impl;
      auto _value_942 = &_value_942_impl;
      USE(_value_942);
      *_value_942 = implicit_cast<TNode<Object>>(t2290);
      // ../../test/torque/test-torque.tq:411:7
      {
        Label label_try_done_943_1581_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_done_943_1581 = &label_try_done_943_1581_impl;
        USE(label_try_done_943_1581);
        Label label__NextCase_694_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label__NextCase_694 = &label__NextCase_694_impl;
        USE(label__NextCase_694);
        Label label_try_begin_944_1582_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_begin_944_1582 = &label_try_begin_944_1582_impl;
        USE(label_try_begin_944_1582);
        Goto(label_try_begin_944_1582);
        if (label_try_begin_944_1582->is_used())
        {
          BIND(label_try_begin_944_1582);
          // ../../test/torque/test-torque.tq:411:7
          {
            // ../../test/torque/test-torque.tq:411:7
            TNode<FixedArray> t2291 = UncheckedCast<FixedArray>(Cast12ATFixedArray(implicit_cast<TNode<Object>>((*_value_942)), label__NextCase_694));
            USE(implicit_cast<TNode<FixedArray>>(t2291));
            TNode<FixedArray> x_945_impl;
            auto x_945 = &x_945_impl;
            USE(x_945);
            *x_945 = implicit_cast<TNode<FixedArray>>(t2291);
            // ../../test/torque/test-torque.tq:411:29
            {
              // ../../test/torque/test-torque.tq:412:9
              int31_t t2292 = 1;
              TNode<Int32T> t2293 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2292)));
              TNode<Int32T> t2294 = UncheckedCast<Int32T>(Int32Add(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2293)));
              USE(implicit_cast<TNode<Int32T>>(t2294));
              *result_394 = implicit_cast<TNode<Int32T>>(t2294);
            }
          }
          Goto(label_try_done_943_1581);
        }
        if (label__NextCase_694->is_used())
        {
          BIND(label__NextCase_694);
          // ../../test/torque/test-torque.tq:411:7
          {
            // ../../test/torque/test-torque.tq:414:7
            TNode<Number> _case_value_946_impl;
            auto _case_value_946 = &_case_value_946_impl;
            USE(_case_value_946);
            *_case_value_946 = implicit_cast<TNode<Number>>(UncheckedCast<Number>(implicit_cast<TNode<Object>>((*_value_942))));
            // ../../test/torque/test-torque.tq:414:22
            {
              // ../../test/torque/test-torque.tq:415:9
              int31_t t2295 = 2;
              TNode<Int32T> t2296 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2295)));
              TNode<Int32T> t2297 = UncheckedCast<Int32T>(Int32Add(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2296)));
              USE(implicit_cast<TNode<Int32T>>(t2297));
              *result_394 = implicit_cast<TNode<Int32T>>(t2297);
            }
          }
          Goto(label_try_done_943_1581);
        }
        BIND(label_try_done_943_1581);
      }
    }
    // ../../test/torque/test-torque.tq:419:5
    int31_t t2298 = 10;
    TNode<Int32T> t2299 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2298)));
    TNode<Int32T> t2300 = UncheckedCast<Int32T>(Int32Mul(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2299)));
    USE(implicit_cast<TNode<Int32T>>(t2300));
    *result_394 = implicit_cast<TNode<Int32T>>(t2300);
    // ../../test/torque/test-torque.tq:421:5
    {
      // ../../test/torque/test-torque.tq:421:17
      TNode<Object> t2301 = UncheckedCast<Object>(IncrementIfSmi36UT12ATFixedArray12ATHeapNumber5ATSmi(implicit_cast<TNode<Object>>(p_x)));
      USE(implicit_cast<TNode<Object>>(t2301));
      TNode<Object> _value_947_impl;
      auto _value_947 = &_value_947_impl;
      USE(_value_947);
      *_value_947 = implicit_cast<TNode<Object>>(t2301);
      // ../../test/torque/test-torque.tq:422:7
      {
        Label label_try_done_948_1583_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_done_948_1583 = &label_try_done_948_1583_impl;
        USE(label_try_done_948_1583);
        Label label__NextCase_695_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label__NextCase_695 = &label__NextCase_695_impl;
        USE(label__NextCase_695);
        Label label_try_begin_949_1584_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_begin_949_1584 = &label_try_begin_949_1584_impl;
        USE(label_try_begin_949_1584);
        Goto(label_try_begin_949_1584);
        if (label_try_begin_949_1584->is_used())
        {
          BIND(label_try_begin_949_1584);
          // ../../test/torque/test-torque.tq:422:7
          {
            // ../../test/torque/test-torque.tq:422:7
            TNode<Smi> t2302 = UncheckedCast<Smi>(Cast5ATSmi(implicit_cast<TNode<Object>>((*_value_947)), label__NextCase_695));
            USE(implicit_cast<TNode<Smi>>(t2302));
            TNode<Smi> x_950_impl;
            auto x_950 = &x_950_impl;
            USE(x_950);
            *x_950 = implicit_cast<TNode<Smi>>(t2302);
            // ../../test/torque/test-torque.tq:422:22
            {
              // ../../test/torque/test-torque.tq:423:9
              TNode<Int32T> t2303 = UncheckedCast<Int32T>(Convert7ATint32(implicit_cast<TNode<Smi>>((*x_950))));
              USE(implicit_cast<TNode<Int32T>>(t2303));
              TNode<Int32T> t2304 = UncheckedCast<Int32T>(Int32Add(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2303)));
              USE(implicit_cast<TNode<Int32T>>(t2304));
              *result_394 = implicit_cast<TNode<Int32T>>(t2304);
            }
          }
          Goto(label_try_done_948_1583);
        }
        if (label__NextCase_695->is_used())
        {
          BIND(label__NextCase_695);
          // ../../test/torque/test-torque.tq:422:7
          {
            // ../../test/torque/test-torque.tq:425:7
            {
              Label label_try_done_951_1585_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label_try_done_951_1585 = &label_try_done_951_1585_impl;
              USE(label_try_done_951_1585);
              Label label__NextCase_696_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label__NextCase_696 = &label__NextCase_696_impl;
              USE(label__NextCase_696);
              Label label_try_begin_952_1586_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label_try_begin_952_1586 = &label_try_begin_952_1586_impl;
              USE(label_try_begin_952_1586);
              Goto(label_try_begin_952_1586);
              if (label_try_begin_952_1586->is_used())
              {
                BIND(label_try_begin_952_1586);
                // ../../test/torque/test-torque.tq:425:7
                {
                  // ../../test/torque/test-torque.tq:425:7
                  TNode<FixedArray> t2305 = UncheckedCast<FixedArray>(Cast12ATFixedArray(implicit_cast<TNode<HeapObject>>(UncheckedCast<HeapObject>(implicit_cast<TNode<Object>>((*_value_947)))), label__NextCase_696));
                  USE(implicit_cast<TNode<FixedArray>>(t2305));
                  TNode<FixedArray> a_953_impl;
                  auto a_953 = &a_953_impl;
                  USE(a_953);
                  *a_953 = implicit_cast<TNode<FixedArray>>(t2305);
                  // ../../test/torque/test-torque.tq:425:29
                  {
                    // ../../test/torque/test-torque.tq:426:9
                    TNode<Smi> t2306 = UncheckedCast<Smi>(LoadFixedArrayBaseLength(implicit_cast<TNode<FixedArrayBase>>((*a_953))));
                    TNode<Int32T> t2307 = UncheckedCast<Int32T>(Convert7ATint32(implicit_cast<TNode<Smi>>(t2306)));
                    USE(implicit_cast<TNode<Int32T>>(t2307));
                    TNode<Int32T> t2308 = UncheckedCast<Int32T>(Int32Add(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2307)));
                    USE(implicit_cast<TNode<Int32T>>(t2308));
                    *result_394 = implicit_cast<TNode<Int32T>>(t2308);
                  }
                }
                Goto(label_try_done_951_1585);
              }
              if (label__NextCase_696->is_used())
              {
                BIND(label__NextCase_696);
                // ../../test/torque/test-torque.tq:425:7
                {
                  // ../../test/torque/test-torque.tq:428:7
                  TNode<HeapNumber> x_954_impl;
                  auto x_954 = &x_954_impl;
                  USE(x_954);
                  *x_954 = implicit_cast<TNode<HeapNumber>>(UncheckedCast<HeapNumber>(implicit_cast<TNode<Object>>((*_value_947))));
                  // ../../test/torque/test-torque.tq:428:29
                  {
                    // ../../test/torque/test-torque.tq:429:9
                    int31_t t2309 = 7;
                    TNode<Int32T> t2310 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2309)));
                    TNode<Int32T> t2311 = UncheckedCast<Int32T>(Int32Add(implicit_cast<TNode<Int32T>>((*result_394).value()), implicit_cast<TNode<Int32T>>(t2310)));
                    USE(implicit_cast<TNode<Int32T>>(t2311));
                    *result_394 = implicit_cast<TNode<Int32T>>(t2311);
                  }
                }
                Goto(label_try_done_951_1585);
              }
              BIND(label_try_done_951_1585);
            }
          }
          Goto(label_try_done_948_1583);
        }
        BIND(label_try_done_948_1583);
      }
    }
    // ../../test/torque/test-torque.tq:433:5
    *_return_393 = implicit_cast<TNode<Int32T>>((*result_394).value());
    Goto(label_macro_end_1580);
  }
  BIND(label_macro_end_1580);
  return implicit_cast<TNode<Int32T>>((*_return_393).value());
}

void TestBuiltinsFromDSLAssembler::TestTypeswitch() {
  Label label_macro_end_1587_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1587 = &label_macro_end_1587_impl;
  USE(label_macro_end_1587);
  // ../../test/torque/test-torque.tq:436:26
  {
    // ../../test/torque/test-torque.tq:437:5
    Label label__True_697_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_697 = &label__True_697_impl;
    USE(label__True_697);
    Label label__False_698_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_698 = &label__False_698_impl;
    USE(label__False_698);
    int31_t t2312 = 5;
    TNode<Smi> t2313 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2312)));
    USE(implicit_cast<TNode<Smi>>(t2313));
    TNode<Int32T> t2314 = UncheckedCast<Int32T>(TypeswitchExample(implicit_cast<TNode<Object>>(t2313)));
    USE(implicit_cast<TNode<Int32T>>(t2314));
    int31_t t2315 = 26;
    TNode<Int32T> t2316 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2315)));
    TNode<BoolT> t2317 = UncheckedCast<BoolT>(Word32Equal(implicit_cast<TNode<Int32T>>(t2314), implicit_cast<TNode<Int32T>>(t2316)));
    USE(implicit_cast<TNode<BoolT>>(t2317));
    Branch(implicit_cast<TNode<BoolT>>(t2317), label__True_697, label__False_698);
    BIND(label__False_698);
    Print("assert 'TypeswitchExample(FromConstexpr<Smi>(5)) == 26' failed at ../../test/torque/test-torque.tq:437:5");
    Unreachable();
    BIND(label__True_697);
    // ../../test/torque/test-torque.tq:438:5
    int31_t t2318 = 3;
    TNode<IntPtrT> t2319 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t2318)));
    TNode<FixedArray> t2320 = UncheckedCast<FixedArray>(AllocateZeroedFixedArray(implicit_cast<TNode<IntPtrT>>(t2319)));
    USE(implicit_cast<TNode<FixedArray>>(t2320));
    TNode<FixedArray> a_955_impl;
    auto a_955 = &a_955_impl;
    USE(a_955);
    *a_955 = implicit_cast<TNode<FixedArray>>(t2320);
    // ../../test/torque/test-torque.tq:439:5
    Label label__True_699_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_699 = &label__True_699_impl;
    USE(label__True_699);
    Label label__False_700_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_700 = &label__False_700_impl;
    USE(label__False_700);
    TNode<Int32T> t2321 = UncheckedCast<Int32T>(TypeswitchExample(implicit_cast<TNode<Object>>((*a_955))));
    USE(implicit_cast<TNode<Int32T>>(t2321));
    int31_t t2322 = 13;
    TNode<Int32T> t2323 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2322)));
    TNode<BoolT> t2324 = UncheckedCast<BoolT>(Word32Equal(implicit_cast<TNode<Int32T>>(t2321), implicit_cast<TNode<Int32T>>(t2323)));
    USE(implicit_cast<TNode<BoolT>>(t2324));
    Branch(implicit_cast<TNode<BoolT>>(t2324), label__True_699, label__False_700);
    BIND(label__False_700);
    Print("assert 'TypeswitchExample(a) == 13' failed at ../../test/torque/test-torque.tq:439:5");
    Unreachable();
    BIND(label__True_699);
    // ../../test/torque/test-torque.tq:440:5
    Label label__True_701_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_701 = &label__True_701_impl;
    USE(label__True_701);
    Label label__False_702_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_702 = &label__False_702_impl;
    USE(label__False_702);
    double t2325 = 0.5;
    TNode<Number> t2326 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<double>(t2325)));
    USE(implicit_cast<TNode<Number>>(t2326));
    TNode<Int32T> t2327 = UncheckedCast<Int32T>(TypeswitchExample(implicit_cast<TNode<Object>>(t2326)));
    USE(implicit_cast<TNode<Int32T>>(t2327));
    int31_t t2328 = 27;
    TNode<Int32T> t2329 = UncheckedCast<Int32T>(FromConstexpr7ATint32(implicit_cast<int31_t>(t2328)));
    TNode<BoolT> t2330 = UncheckedCast<BoolT>(Word32Equal(implicit_cast<TNode<Int32T>>(t2327), implicit_cast<TNode<Int32T>>(t2329)));
    USE(implicit_cast<TNode<BoolT>>(t2330));
    Branch(implicit_cast<TNode<BoolT>>(t2330), label__True_701, label__False_702);
    BIND(label__False_702);
    Print("assert 'TypeswitchExample(FromConstexpr<Number>(0.5)) == 27' failed at ../../test/torque/test-torque.tq:440:5");
    Unreachable();
    BIND(label__True_701);
  }
}

void TestBuiltinsFromDSLAssembler::TestGenericOverload() {
  Label label_macro_end_1588_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1588 = &label_macro_end_1588_impl;
  USE(label_macro_end_1588);
  // ../../test/torque/test-torque.tq:450:31
  {
    // ../../test/torque/test-torque.tq:451:5
    int31_t t2331 = 5;
    TNode<Smi> xSmi_956_impl;
    auto xSmi_956 = &xSmi_956_impl;
    USE(xSmi_956);
    TNode<Smi> t2332 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2331)));
    *xSmi_956 = implicit_cast<TNode<Smi>>(t2332);
    // ../../test/torque/test-torque.tq:452:5
    TNode<Object> xObject_957_impl;
    auto xObject_957 = &xObject_957_impl;
    USE(xObject_957);
    *xObject_957 = implicit_cast<TNode<Object>>((*xSmi_956));
    // ../../test/torque/test-torque.tq:453:5
    Label label__True_703_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_703 = &label__True_703_impl;
    USE(label__True_703);
    Label label__False_704_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_704 = &label__False_704_impl;
    USE(label__False_704);
    TNode<Smi> t2333 = UncheckedCast<Smi>(ExampleGenericOverload5ATSmi(implicit_cast<TNode<Smi>>((*xSmi_956))));
    USE(implicit_cast<TNode<Smi>>(t2333));
    int31_t t2334 = 6;
    TNode<Smi> t2335 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2334)));
    TNode<BoolT> t2336 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t2333), implicit_cast<TNode<Smi>>(t2335)));
    USE(implicit_cast<TNode<BoolT>>(t2336));
    Branch(implicit_cast<TNode<BoolT>>(t2336), label__True_703, label__False_704);
    BIND(label__False_704);
    Print("assert 'ExampleGenericOverload<Smi>(xSmi) == 6' failed at ../../test/torque/test-torque.tq:453:5");
    Unreachable();
    BIND(label__True_703);
    // ../../test/torque/test-torque.tq:454:5
    Label label__True_705_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_705 = &label__True_705_impl;
    USE(label__True_705);
    Label label__False_706_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_706 = &label__False_706_impl;
    USE(label__False_706);
    TNode<Object> t2337 = UncheckedCast<Object>(ExampleGenericOverload22UT12ATHeapObject5ATSmi(implicit_cast<TNode<Object>>((*xObject_957))));
    USE(implicit_cast<TNode<Object>>(t2337));
    TNode<Smi> t2338 = UncheckedCast<Smi>(UnsafeCast5ATSmi(implicit_cast<TNode<Object>>(t2337)));
    USE(implicit_cast<TNode<Smi>>(t2338));
    int31_t t2339 = 5;
    TNode<Smi> t2340 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t2339)));
    TNode<BoolT> t2341 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>(t2338), implicit_cast<TNode<Smi>>(t2340)));
    USE(implicit_cast<TNode<BoolT>>(t2341));
    Branch(implicit_cast<TNode<BoolT>>(t2341), label__True_705, label__False_706);
    BIND(label__False_706);
    Print("assert 'UnsafeCast<Smi>(ExampleGenericOverload<Object>(xObject)) == 5' failed at ../../test/torque/test-torque.tq:454:5");
    Unreachable();
    BIND(label__True_705);
  }
}

void TestBuiltinsFromDSLAssembler::BoolToBranch(TNode<BoolT> p_x, Label* label_Taken_707, Label* label_NotTaken_708) {
  Label label_macro_end_1589_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1589 = &label_macro_end_1589_impl;
  USE(label_macro_end_1589);
  // ../../test/torque/test-torque.tq:458:30
  {
    // ../../test/torque/test-torque.tq:459:5
    {
      Label label__True_709_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_709 = &label__True_709_impl;
      USE(label__True_709);
      Label label__False_710_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_710 = &label__False_710_impl;
      USE(label__False_710);
      Label label_if_done_label_958_1590_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_if_done_label_958_1590 = &label_if_done_label_958_1590_impl;
      USE(label_if_done_label_958_1590);
      Branch(implicit_cast<TNode<BoolT>>(p_x), label__True_709, label__False_710);
      if (label__True_709->is_used())
      {
        BIND(label__True_709);
        // ../../test/torque/test-torque.tq:459:12
        {
          // ../../test/torque/test-torque.tq:460:7
          Goto(label_Taken_707);
        }
      }
      if (label__False_710->is_used())
      {
        BIND(label__False_710);
        // ../../test/torque/test-torque.tq:461:12
        {
          // ../../test/torque/test-torque.tq:462:7
          Goto(label_NotTaken_708);
        }
      }
    }
  }
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestOrAnd1(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_395_impl);
  auto _return_395 = &_return_395_impl;
  USE(_return_395);
  Label label_macro_end_1591_impl(this, {_return_395}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1591 = &label_macro_end_1591_impl;
  USE(label_macro_end_1591);
  // ../../test/torque/test-torque.tq:466:53
  {
    // ../../test/torque/test-torque.tq:467:5
    auto t2342 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2343 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2344_959_impl);
    auto t2344_959 = &t2344_959_impl;
    USE(t2344_959);
    {
      Label label__True_711_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_711 = &label__True_711_impl;
      USE(label__True_711);
      Label label__False_712_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_712 = &label__False_712_impl;
      USE(label__False_712);
      Label label__done_960_1592_impl(this, {t2344_959}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_960_1592 = &label__done_960_1592_impl;
      USE(label__done_960_1592);
      Label label__False_713_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_713 = &label__False_713_impl;
      USE(label__False_713);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_x), label__True_711, label__False_713);
      BIND(label__False_713);
      Label label__True_714_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_714 = &label__True_714_impl;
      USE(label__True_714);
      GotoIfNot(implicit_cast<TNode<BoolT>>(p_y), label__False_712);
Branch(implicit_cast<TNode<BoolT>>(p_z), label__True_711, label__False_712);
      BIND(label__True_711);
            TNode<BoolT> t2345 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2342())));
      *t2344_959 = implicit_cast<TNode<BoolT>>(t2345);
      Goto(label__done_960_1592);
      BIND(label__False_712);
            TNode<BoolT> t2346 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2343())));
      *t2344_959 = implicit_cast<TNode<BoolT>>(t2346);
      Goto(label__done_960_1592);
      BIND(label__done_960_1592);
    }
    *_return_395 = implicit_cast<TNode<BoolT>>((*t2344_959).value());
    Goto(label_macro_end_1591);
  }
  BIND(label_macro_end_1591);
  return implicit_cast<TNode<BoolT>>((*_return_395).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestOrAnd2(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_396_impl);
  auto _return_396 = &_return_396_impl;
  USE(_return_396);
  Label label_macro_end_1593_impl(this, {_return_396}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1593 = &label_macro_end_1593_impl;
  USE(label_macro_end_1593);
  // ../../test/torque/test-torque.tq:470:53
  {
    // ../../test/torque/test-torque.tq:471:5
    auto t2347 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2348 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2349_961_impl);
    auto t2349_961 = &t2349_961_impl;
    USE(t2349_961);
    {
      Label label__True_715_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_715 = &label__True_715_impl;
      USE(label__True_715);
      Label label__False_716_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_716 = &label__False_716_impl;
      USE(label__False_716);
      Label label__done_962_1594_impl(this, {t2349_961}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_962_1594 = &label__done_962_1594_impl;
      USE(label__done_962_1594);
      Label label__False_717_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_717 = &label__False_717_impl;
      USE(label__False_717);
      GotoIf(implicit_cast<TNode<BoolT>>(p_x), label__True_715);
      Label label__True_718_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_718 = &label__True_718_impl;
      USE(label__True_718);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_y), label__True_718, label__False_716);
      BIND(label__True_718);
Branch(implicit_cast<TNode<BoolT>>(p_z), label__True_715, label__False_716);
      BIND(label__True_715);
            TNode<BoolT> t2350 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2347())));
      *t2349_961 = implicit_cast<TNode<BoolT>>(t2350);
      Goto(label__done_962_1594);
      BIND(label__False_716);
            TNode<BoolT> t2351 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2348())));
      *t2349_961 = implicit_cast<TNode<BoolT>>(t2351);
      Goto(label__done_962_1594);
      BIND(label__done_962_1594);
    }
    *_return_396 = implicit_cast<TNode<BoolT>>((*t2349_961).value());
    Goto(label_macro_end_1593);
  }
  BIND(label_macro_end_1593);
  return implicit_cast<TNode<BoolT>>((*_return_396).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestOrAnd3(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_397_impl);
  auto _return_397 = &_return_397_impl;
  USE(_return_397);
  Label label_macro_end_1595_impl(this, {_return_397}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1595 = &label_macro_end_1595_impl;
  USE(label_macro_end_1595);
  // ../../test/torque/test-torque.tq:474:53
  {
    // ../../test/torque/test-torque.tq:475:5
    auto t2352 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2353 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2354_963_impl);
    auto t2354_963 = &t2354_963_impl;
    USE(t2354_963);
    {
      Label label__True_719_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_719 = &label__True_719_impl;
      USE(label__True_719);
      Label label__False_720_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_720 = &label__False_720_impl;
      USE(label__False_720);
      Label label__done_964_1596_impl(this, {t2354_963}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_964_1596 = &label__done_964_1596_impl;
      USE(label__done_964_1596);
      Label label__False_721_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_721 = &label__False_721_impl;
      USE(label__False_721);
      GotoIf(implicit_cast<TNode<BoolT>>(p_x), label__True_719);
      Label label__True_722_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_722 = &label__True_722_impl;
      USE(label__True_722);
      GotoIfNot(implicit_cast<TNode<BoolT>>(p_y), label__False_720);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_z), label__True_719, label__False_720);
      BIND(label__True_719);
            TNode<BoolT> t2355 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2352())));
      *t2354_963 = implicit_cast<TNode<BoolT>>(t2355);
      Goto(label__done_964_1596);
      BIND(label__False_720);
            TNode<BoolT> t2356 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2353())));
      *t2354_963 = implicit_cast<TNode<BoolT>>(t2356);
      Goto(label__done_964_1596);
      BIND(label__done_964_1596);
    }
    *_return_397 = implicit_cast<TNode<BoolT>>((*t2354_963).value());
    Goto(label_macro_end_1595);
  }
  BIND(label_macro_end_1595);
  return implicit_cast<TNode<BoolT>>((*_return_397).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestAndOr1(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_398_impl);
  auto _return_398 = &_return_398_impl;
  USE(_return_398);
  Label label_macro_end_1597_impl(this, {_return_398}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1597 = &label_macro_end_1597_impl;
  USE(label_macro_end_1597);
  // ../../test/torque/test-torque.tq:478:53
  {
    // ../../test/torque/test-torque.tq:479:5
    auto t2357 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2358 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2359_965_impl);
    auto t2359_965 = &t2359_965_impl;
    USE(t2359_965);
    {
      Label label__True_723_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_723 = &label__True_723_impl;
      USE(label__True_723);
      Label label__False_724_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_724 = &label__False_724_impl;
      USE(label__False_724);
      Label label__done_966_1598_impl(this, {t2359_965}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_966_1598 = &label__done_966_1598_impl;
      USE(label__done_966_1598);
      Label label__False_725_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_725 = &label__False_725_impl;
      USE(label__False_725);
      Label label__True_726_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_726 = &label__True_726_impl;
      USE(label__True_726);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_x), label__True_726, label__False_725);
      BIND(label__True_726);
Branch(implicit_cast<TNode<BoolT>>(p_y), label__True_723, label__False_725);
      BIND(label__False_725);
Branch(implicit_cast<TNode<BoolT>>(p_z), label__True_723, label__False_724);
      BIND(label__True_723);
            TNode<BoolT> t2360 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2357())));
      *t2359_965 = implicit_cast<TNode<BoolT>>(t2360);
      Goto(label__done_966_1598);
      BIND(label__False_724);
            TNode<BoolT> t2361 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2358())));
      *t2359_965 = implicit_cast<TNode<BoolT>>(t2361);
      Goto(label__done_966_1598);
      BIND(label__done_966_1598);
    }
    *_return_398 = implicit_cast<TNode<BoolT>>((*t2359_965).value());
    Goto(label_macro_end_1597);
  }
  BIND(label_macro_end_1597);
  return implicit_cast<TNode<BoolT>>((*_return_398).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestAndOr2(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_399_impl);
  auto _return_399 = &_return_399_impl;
  USE(_return_399);
  Label label_macro_end_1599_impl(this, {_return_399}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1599 = &label_macro_end_1599_impl;
  USE(label_macro_end_1599);
  // ../../test/torque/test-torque.tq:482:53
  {
    // ../../test/torque/test-torque.tq:483:5
    auto t2362 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2363 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2364_967_impl);
    auto t2364_967 = &t2364_967_impl;
    USE(t2364_967);
    {
      Label label__True_727_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_727 = &label__True_727_impl;
      USE(label__True_727);
      Label label__False_728_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_728 = &label__False_728_impl;
      USE(label__False_728);
      Label label__done_968_1600_impl(this, {t2364_967}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_968_1600 = &label__done_968_1600_impl;
      USE(label__done_968_1600);
      Label label__False_729_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_729 = &label__False_729_impl;
      USE(label__False_729);
      Label label__True_730_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_730 = &label__True_730_impl;
      USE(label__True_730);
      GotoIfNot(implicit_cast<TNode<BoolT>>(p_x), label__False_729);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_y), label__True_727, label__False_729);
      BIND(label__False_729);
Branch(implicit_cast<TNode<BoolT>>(p_z), label__True_727, label__False_728);
      BIND(label__True_727);
            TNode<BoolT> t2365 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2362())));
      *t2364_967 = implicit_cast<TNode<BoolT>>(t2365);
      Goto(label__done_968_1600);
      BIND(label__False_728);
            TNode<BoolT> t2366 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2363())));
      *t2364_967 = implicit_cast<TNode<BoolT>>(t2366);
      Goto(label__done_968_1600);
      BIND(label__done_968_1600);
    }
    *_return_399 = implicit_cast<TNode<BoolT>>((*t2364_967).value());
    Goto(label_macro_end_1599);
  }
  BIND(label_macro_end_1599);
  return implicit_cast<TNode<BoolT>>((*_return_399).value());
}

compiler::TNode<BoolT> TestBuiltinsFromDSLAssembler::TestAndOr3(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z) {
  TVARIABLE(BoolT, _return_400_impl);
  auto _return_400 = &_return_400_impl;
  USE(_return_400);
  Label label_macro_end_1601_impl(this, {_return_400}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1601 = &label_macro_end_1601_impl;
  USE(label_macro_end_1601);
  // ../../test/torque/test-torque.tq:486:53
  {
    // ../../test/torque/test-torque.tq:487:5
    auto t2367 = [=]() {
      return implicit_cast<bool>(true);
    };
    auto t2368 = [=]() {
      return implicit_cast<bool>(false);
    };
    TVARIABLE(BoolT, t2369_969_impl);
    auto t2369_969 = &t2369_969_impl;
    USE(t2369_969);
    {
      Label label__True_731_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_731 = &label__True_731_impl;
      USE(label__True_731);
      Label label__False_732_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_732 = &label__False_732_impl;
      USE(label__False_732);
      Label label__done_970_1602_impl(this, {t2369_969}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_970_1602 = &label__done_970_1602_impl;
      USE(label__done_970_1602);
      Label label__False_733_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_733 = &label__False_733_impl;
      USE(label__False_733);
      Label label__True_734_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_734 = &label__True_734_impl;
      USE(label__True_734);
      GotoIfNot(implicit_cast<TNode<BoolT>>(p_x), label__False_733);
Branch(implicit_cast<TNode<BoolT>>(p_y), label__True_731, label__False_733);
      BIND(label__False_733);
      BoolToBranch(implicit_cast<TNode<BoolT>>(p_z), label__True_731, label__False_732);
      BIND(label__True_731);
            TNode<BoolT> t2370 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2367())));
      *t2369_969 = implicit_cast<TNode<BoolT>>(t2370);
      Goto(label__done_970_1602);
      BIND(label__False_732);
            TNode<BoolT> t2371 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(t2368())));
      *t2369_969 = implicit_cast<TNode<BoolT>>(t2371);
      Goto(label__done_970_1602);
      BIND(label__done_970_1602);
    }
    *_return_400 = implicit_cast<TNode<BoolT>>((*t2369_969).value());
    Goto(label_macro_end_1601);
  }
  BIND(label_macro_end_1601);
  return implicit_cast<TNode<BoolT>>((*_return_400).value());
}

void TestBuiltinsFromDSLAssembler::TestLogicalOperators() {
  Label label_macro_end_1603_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1603 = &label_macro_end_1603_impl;
  USE(label_macro_end_1603);
  // ../../test/torque/test-torque.tq:490:32
  {
    // ../../test/torque/test-torque.tq:491:5
    Label label__True_735_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_735 = &label__True_735_impl;
    USE(label__True_735);
    Label label__False_736_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_736 = &label__False_736_impl;
    USE(label__False_736);
    TNode<BoolT> t2372 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2373 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2374 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2375 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2372), implicit_cast<TNode<BoolT>>(t2373), implicit_cast<TNode<BoolT>>(t2374)));
    USE(implicit_cast<TNode<BoolT>>(t2375));
    Branch(implicit_cast<TNode<BoolT>>(t2375), label__True_735, label__False_736);
    BIND(label__False_736);
    Print("assert 'TestAndOr1(true, true, true)' failed at ../../test/torque/test-torque.tq:491:5");
    Unreachable();
    BIND(label__True_735);
    // ../../test/torque/test-torque.tq:492:5
    Label label__True_737_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_737 = &label__True_737_impl;
    USE(label__True_737);
    Label label__False_738_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_738 = &label__False_738_impl;
    USE(label__False_738);
    TNode<BoolT> t2376 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2377 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2378 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2379 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2376), implicit_cast<TNode<BoolT>>(t2377), implicit_cast<TNode<BoolT>>(t2378)));
    USE(implicit_cast<TNode<BoolT>>(t2379));
    Branch(implicit_cast<TNode<BoolT>>(t2379), label__True_737, label__False_738);
    BIND(label__False_738);
    Print("assert 'TestAndOr2(true, true, true)' failed at ../../test/torque/test-torque.tq:492:5");
    Unreachable();
    BIND(label__True_737);
    // ../../test/torque/test-torque.tq:493:5
    Label label__True_739_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_739 = &label__True_739_impl;
    USE(label__True_739);
    Label label__False_740_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_740 = &label__False_740_impl;
    USE(label__False_740);
    TNode<BoolT> t2380 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2381 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2382 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2383 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2380), implicit_cast<TNode<BoolT>>(t2381), implicit_cast<TNode<BoolT>>(t2382)));
    USE(implicit_cast<TNode<BoolT>>(t2383));
    Branch(implicit_cast<TNode<BoolT>>(t2383), label__True_739, label__False_740);
    BIND(label__False_740);
    Print("assert 'TestAndOr3(true, true, true)' failed at ../../test/torque/test-torque.tq:493:5");
    Unreachable();
    BIND(label__True_739);
    // ../../test/torque/test-torque.tq:494:5
    Label label__True_741_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_741 = &label__True_741_impl;
    USE(label__True_741);
    Label label__False_742_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_742 = &label__False_742_impl;
    USE(label__False_742);
    TNode<BoolT> t2384 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2385 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2386 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2387 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2384), implicit_cast<TNode<BoolT>>(t2385), implicit_cast<TNode<BoolT>>(t2386)));
    USE(implicit_cast<TNode<BoolT>>(t2387));
    Branch(implicit_cast<TNode<BoolT>>(t2387), label__True_741, label__False_742);
    BIND(label__False_742);
    Print("assert 'TestAndOr1(true, true, false)' failed at ../../test/torque/test-torque.tq:494:5");
    Unreachable();
    BIND(label__True_741);
    // ../../test/torque/test-torque.tq:495:5
    Label label__True_743_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_743 = &label__True_743_impl;
    USE(label__True_743);
    Label label__False_744_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_744 = &label__False_744_impl;
    USE(label__False_744);
    TNode<BoolT> t2388 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2389 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2390 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2391 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2388), implicit_cast<TNode<BoolT>>(t2389), implicit_cast<TNode<BoolT>>(t2390)));
    USE(implicit_cast<TNode<BoolT>>(t2391));
    Branch(implicit_cast<TNode<BoolT>>(t2391), label__True_743, label__False_744);
    BIND(label__False_744);
    Print("assert 'TestAndOr2(true, true, false)' failed at ../../test/torque/test-torque.tq:495:5");
    Unreachable();
    BIND(label__True_743);
    // ../../test/torque/test-torque.tq:496:5
    Label label__True_745_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_745 = &label__True_745_impl;
    USE(label__True_745);
    Label label__False_746_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_746 = &label__False_746_impl;
    USE(label__False_746);
    TNode<BoolT> t2392 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2393 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2394 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2395 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2392), implicit_cast<TNode<BoolT>>(t2393), implicit_cast<TNode<BoolT>>(t2394)));
    USE(implicit_cast<TNode<BoolT>>(t2395));
    Branch(implicit_cast<TNode<BoolT>>(t2395), label__True_745, label__False_746);
    BIND(label__False_746);
    Print("assert 'TestAndOr3(true, true, false)' failed at ../../test/torque/test-torque.tq:496:5");
    Unreachable();
    BIND(label__True_745);
    // ../../test/torque/test-torque.tq:497:5
    Label label__True_747_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_747 = &label__True_747_impl;
    USE(label__True_747);
    Label label__False_748_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_748 = &label__False_748_impl;
    USE(label__False_748);
    TNode<BoolT> t2396 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2397 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2398 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2399 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2396), implicit_cast<TNode<BoolT>>(t2397), implicit_cast<TNode<BoolT>>(t2398)));
    USE(implicit_cast<TNode<BoolT>>(t2399));
    Branch(implicit_cast<TNode<BoolT>>(t2399), label__True_747, label__False_748);
    BIND(label__False_748);
    Print("assert 'TestAndOr1(true, false, true)' failed at ../../test/torque/test-torque.tq:497:5");
    Unreachable();
    BIND(label__True_747);
    // ../../test/torque/test-torque.tq:498:5
    Label label__True_749_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_749 = &label__True_749_impl;
    USE(label__True_749);
    Label label__False_750_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_750 = &label__False_750_impl;
    USE(label__False_750);
    TNode<BoolT> t2400 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2401 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2402 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2403 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2400), implicit_cast<TNode<BoolT>>(t2401), implicit_cast<TNode<BoolT>>(t2402)));
    USE(implicit_cast<TNode<BoolT>>(t2403));
    Branch(implicit_cast<TNode<BoolT>>(t2403), label__True_749, label__False_750);
    BIND(label__False_750);
    Print("assert 'TestAndOr2(true, false, true)' failed at ../../test/torque/test-torque.tq:498:5");
    Unreachable();
    BIND(label__True_749);
    // ../../test/torque/test-torque.tq:499:5
    Label label__True_751_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_751 = &label__True_751_impl;
    USE(label__True_751);
    Label label__False_752_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_752 = &label__False_752_impl;
    USE(label__False_752);
    TNode<BoolT> t2404 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2405 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2406 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2407 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2404), implicit_cast<TNode<BoolT>>(t2405), implicit_cast<TNode<BoolT>>(t2406)));
    USE(implicit_cast<TNode<BoolT>>(t2407));
    Branch(implicit_cast<TNode<BoolT>>(t2407), label__True_751, label__False_752);
    BIND(label__False_752);
    Print("assert 'TestAndOr3(true, false, true)' failed at ../../test/torque/test-torque.tq:499:5");
    Unreachable();
    BIND(label__True_751);
    // ../../test/torque/test-torque.tq:500:5
    Label label__True_753_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_753 = &label__True_753_impl;
    USE(label__True_753);
    Label label__False_754_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_754 = &label__False_754_impl;
    USE(label__False_754);
    TNode<BoolT> t2408 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2409 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2410 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2411 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2408), implicit_cast<TNode<BoolT>>(t2409), implicit_cast<TNode<BoolT>>(t2410)));
    USE(implicit_cast<TNode<BoolT>>(t2411));
    TNode<BoolT> t2412 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2411)));
    USE(implicit_cast<TNode<BoolT>>(t2412));
    Branch(implicit_cast<TNode<BoolT>>(t2412), label__True_753, label__False_754);
    BIND(label__False_754);
    Print("assert '!TestAndOr1(true, false, false)' failed at ../../test/torque/test-torque.tq:500:5");
    Unreachable();
    BIND(label__True_753);
    // ../../test/torque/test-torque.tq:501:5
    Label label__True_755_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_755 = &label__True_755_impl;
    USE(label__True_755);
    Label label__False_756_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_756 = &label__False_756_impl;
    USE(label__False_756);
    TNode<BoolT> t2413 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2414 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2415 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2416 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2413), implicit_cast<TNode<BoolT>>(t2414), implicit_cast<TNode<BoolT>>(t2415)));
    USE(implicit_cast<TNode<BoolT>>(t2416));
    TNode<BoolT> t2417 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2416)));
    USE(implicit_cast<TNode<BoolT>>(t2417));
    Branch(implicit_cast<TNode<BoolT>>(t2417), label__True_755, label__False_756);
    BIND(label__False_756);
    Print("assert '!TestAndOr2(true, false, false)' failed at ../../test/torque/test-torque.tq:501:5");
    Unreachable();
    BIND(label__True_755);
    // ../../test/torque/test-torque.tq:502:5
    Label label__True_757_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_757 = &label__True_757_impl;
    USE(label__True_757);
    Label label__False_758_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_758 = &label__False_758_impl;
    USE(label__False_758);
    TNode<BoolT> t2418 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2419 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2420 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2421 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2418), implicit_cast<TNode<BoolT>>(t2419), implicit_cast<TNode<BoolT>>(t2420)));
    USE(implicit_cast<TNode<BoolT>>(t2421));
    TNode<BoolT> t2422 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2421)));
    USE(implicit_cast<TNode<BoolT>>(t2422));
    Branch(implicit_cast<TNode<BoolT>>(t2422), label__True_757, label__False_758);
    BIND(label__False_758);
    Print("assert '!TestAndOr3(true, false, false)' failed at ../../test/torque/test-torque.tq:502:5");
    Unreachable();
    BIND(label__True_757);
    // ../../test/torque/test-torque.tq:503:5
    Label label__True_759_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_759 = &label__True_759_impl;
    USE(label__True_759);
    Label label__False_760_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_760 = &label__False_760_impl;
    USE(label__False_760);
    TNode<BoolT> t2423 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2424 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2425 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2426 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2423), implicit_cast<TNode<BoolT>>(t2424), implicit_cast<TNode<BoolT>>(t2425)));
    USE(implicit_cast<TNode<BoolT>>(t2426));
    Branch(implicit_cast<TNode<BoolT>>(t2426), label__True_759, label__False_760);
    BIND(label__False_760);
    Print("assert 'TestAndOr1(false, true, true)' failed at ../../test/torque/test-torque.tq:503:5");
    Unreachable();
    BIND(label__True_759);
    // ../../test/torque/test-torque.tq:504:5
    Label label__True_761_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_761 = &label__True_761_impl;
    USE(label__True_761);
    Label label__False_762_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_762 = &label__False_762_impl;
    USE(label__False_762);
    TNode<BoolT> t2427 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2428 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2429 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2430 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2427), implicit_cast<TNode<BoolT>>(t2428), implicit_cast<TNode<BoolT>>(t2429)));
    USE(implicit_cast<TNode<BoolT>>(t2430));
    Branch(implicit_cast<TNode<BoolT>>(t2430), label__True_761, label__False_762);
    BIND(label__False_762);
    Print("assert 'TestAndOr2(false, true, true)' failed at ../../test/torque/test-torque.tq:504:5");
    Unreachable();
    BIND(label__True_761);
    // ../../test/torque/test-torque.tq:505:5
    Label label__True_763_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_763 = &label__True_763_impl;
    USE(label__True_763);
    Label label__False_764_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_764 = &label__False_764_impl;
    USE(label__False_764);
    TNode<BoolT> t2431 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2432 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2433 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2434 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2431), implicit_cast<TNode<BoolT>>(t2432), implicit_cast<TNode<BoolT>>(t2433)));
    USE(implicit_cast<TNode<BoolT>>(t2434));
    Branch(implicit_cast<TNode<BoolT>>(t2434), label__True_763, label__False_764);
    BIND(label__False_764);
    Print("assert 'TestAndOr3(false, true, true)' failed at ../../test/torque/test-torque.tq:505:5");
    Unreachable();
    BIND(label__True_763);
    // ../../test/torque/test-torque.tq:506:5
    Label label__True_765_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_765 = &label__True_765_impl;
    USE(label__True_765);
    Label label__False_766_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_766 = &label__False_766_impl;
    USE(label__False_766);
    TNode<BoolT> t2435 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2436 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2437 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2438 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2435), implicit_cast<TNode<BoolT>>(t2436), implicit_cast<TNode<BoolT>>(t2437)));
    USE(implicit_cast<TNode<BoolT>>(t2438));
    TNode<BoolT> t2439 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2438)));
    USE(implicit_cast<TNode<BoolT>>(t2439));
    Branch(implicit_cast<TNode<BoolT>>(t2439), label__True_765, label__False_766);
    BIND(label__False_766);
    Print("assert '!TestAndOr1(false, true, false)' failed at ../../test/torque/test-torque.tq:506:5");
    Unreachable();
    BIND(label__True_765);
    // ../../test/torque/test-torque.tq:507:5
    Label label__True_767_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_767 = &label__True_767_impl;
    USE(label__True_767);
    Label label__False_768_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_768 = &label__False_768_impl;
    USE(label__False_768);
    TNode<BoolT> t2440 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2441 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2442 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2443 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2440), implicit_cast<TNode<BoolT>>(t2441), implicit_cast<TNode<BoolT>>(t2442)));
    USE(implicit_cast<TNode<BoolT>>(t2443));
    TNode<BoolT> t2444 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2443)));
    USE(implicit_cast<TNode<BoolT>>(t2444));
    Branch(implicit_cast<TNode<BoolT>>(t2444), label__True_767, label__False_768);
    BIND(label__False_768);
    Print("assert '!TestAndOr2(false, true, false)' failed at ../../test/torque/test-torque.tq:507:5");
    Unreachable();
    BIND(label__True_767);
    // ../../test/torque/test-torque.tq:508:5
    Label label__True_769_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_769 = &label__True_769_impl;
    USE(label__True_769);
    Label label__False_770_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_770 = &label__False_770_impl;
    USE(label__False_770);
    TNode<BoolT> t2445 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2446 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2447 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2448 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2445), implicit_cast<TNode<BoolT>>(t2446), implicit_cast<TNode<BoolT>>(t2447)));
    USE(implicit_cast<TNode<BoolT>>(t2448));
    TNode<BoolT> t2449 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2448)));
    USE(implicit_cast<TNode<BoolT>>(t2449));
    Branch(implicit_cast<TNode<BoolT>>(t2449), label__True_769, label__False_770);
    BIND(label__False_770);
    Print("assert '!TestAndOr3(false, true, false)' failed at ../../test/torque/test-torque.tq:508:5");
    Unreachable();
    BIND(label__True_769);
    // ../../test/torque/test-torque.tq:509:5
    Label label__True_771_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_771 = &label__True_771_impl;
    USE(label__True_771);
    Label label__False_772_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_772 = &label__False_772_impl;
    USE(label__False_772);
    TNode<BoolT> t2450 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2451 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2452 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2453 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2450), implicit_cast<TNode<BoolT>>(t2451), implicit_cast<TNode<BoolT>>(t2452)));
    USE(implicit_cast<TNode<BoolT>>(t2453));
    Branch(implicit_cast<TNode<BoolT>>(t2453), label__True_771, label__False_772);
    BIND(label__False_772);
    Print("assert 'TestAndOr1(false, false, true)' failed at ../../test/torque/test-torque.tq:509:5");
    Unreachable();
    BIND(label__True_771);
    // ../../test/torque/test-torque.tq:510:5
    Label label__True_773_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_773 = &label__True_773_impl;
    USE(label__True_773);
    Label label__False_774_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_774 = &label__False_774_impl;
    USE(label__False_774);
    TNode<BoolT> t2454 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2455 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2456 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2457 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2454), implicit_cast<TNode<BoolT>>(t2455), implicit_cast<TNode<BoolT>>(t2456)));
    USE(implicit_cast<TNode<BoolT>>(t2457));
    Branch(implicit_cast<TNode<BoolT>>(t2457), label__True_773, label__False_774);
    BIND(label__False_774);
    Print("assert 'TestAndOr2(false, false, true)' failed at ../../test/torque/test-torque.tq:510:5");
    Unreachable();
    BIND(label__True_773);
    // ../../test/torque/test-torque.tq:511:5
    Label label__True_775_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_775 = &label__True_775_impl;
    USE(label__True_775);
    Label label__False_776_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_776 = &label__False_776_impl;
    USE(label__False_776);
    TNode<BoolT> t2458 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2459 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2460 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2461 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2458), implicit_cast<TNode<BoolT>>(t2459), implicit_cast<TNode<BoolT>>(t2460)));
    USE(implicit_cast<TNode<BoolT>>(t2461));
    Branch(implicit_cast<TNode<BoolT>>(t2461), label__True_775, label__False_776);
    BIND(label__False_776);
    Print("assert 'TestAndOr3(false, false, true)' failed at ../../test/torque/test-torque.tq:511:5");
    Unreachable();
    BIND(label__True_775);
    // ../../test/torque/test-torque.tq:512:5
    Label label__True_777_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_777 = &label__True_777_impl;
    USE(label__True_777);
    Label label__False_778_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_778 = &label__False_778_impl;
    USE(label__False_778);
    TNode<BoolT> t2462 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2463 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2464 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2465 = UncheckedCast<BoolT>(TestAndOr1(implicit_cast<TNode<BoolT>>(t2462), implicit_cast<TNode<BoolT>>(t2463), implicit_cast<TNode<BoolT>>(t2464)));
    USE(implicit_cast<TNode<BoolT>>(t2465));
    TNode<BoolT> t2466 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2465)));
    USE(implicit_cast<TNode<BoolT>>(t2466));
    Branch(implicit_cast<TNode<BoolT>>(t2466), label__True_777, label__False_778);
    BIND(label__False_778);
    Print("assert '!TestAndOr1(false, false, false)' failed at ../../test/torque/test-torque.tq:512:5");
    Unreachable();
    BIND(label__True_777);
    // ../../test/torque/test-torque.tq:513:5
    Label label__True_779_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_779 = &label__True_779_impl;
    USE(label__True_779);
    Label label__False_780_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_780 = &label__False_780_impl;
    USE(label__False_780);
    TNode<BoolT> t2467 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2468 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2469 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2470 = UncheckedCast<BoolT>(TestAndOr2(implicit_cast<TNode<BoolT>>(t2467), implicit_cast<TNode<BoolT>>(t2468), implicit_cast<TNode<BoolT>>(t2469)));
    USE(implicit_cast<TNode<BoolT>>(t2470));
    TNode<BoolT> t2471 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2470)));
    USE(implicit_cast<TNode<BoolT>>(t2471));
    Branch(implicit_cast<TNode<BoolT>>(t2471), label__True_779, label__False_780);
    BIND(label__False_780);
    Print("assert '!TestAndOr2(false, false, false)' failed at ../../test/torque/test-torque.tq:513:5");
    Unreachable();
    BIND(label__True_779);
    // ../../test/torque/test-torque.tq:514:5
    Label label__True_781_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_781 = &label__True_781_impl;
    USE(label__True_781);
    Label label__False_782_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_782 = &label__False_782_impl;
    USE(label__False_782);
    TNode<BoolT> t2472 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2473 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2474 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2475 = UncheckedCast<BoolT>(TestAndOr3(implicit_cast<TNode<BoolT>>(t2472), implicit_cast<TNode<BoolT>>(t2473), implicit_cast<TNode<BoolT>>(t2474)));
    USE(implicit_cast<TNode<BoolT>>(t2475));
    TNode<BoolT> t2476 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2475)));
    USE(implicit_cast<TNode<BoolT>>(t2476));
    Branch(implicit_cast<TNode<BoolT>>(t2476), label__True_781, label__False_782);
    BIND(label__False_782);
    Print("assert '!TestAndOr3(false, false, false)' failed at ../../test/torque/test-torque.tq:514:5");
    Unreachable();
    BIND(label__True_781);
    // ../../test/torque/test-torque.tq:515:5
    Label label__True_783_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_783 = &label__True_783_impl;
    USE(label__True_783);
    Label label__False_784_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_784 = &label__False_784_impl;
    USE(label__False_784);
    TNode<BoolT> t2477 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2478 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2479 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2480 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2477), implicit_cast<TNode<BoolT>>(t2478), implicit_cast<TNode<BoolT>>(t2479)));
    USE(implicit_cast<TNode<BoolT>>(t2480));
    Branch(implicit_cast<TNode<BoolT>>(t2480), label__True_783, label__False_784);
    BIND(label__False_784);
    Print("assert 'TestOrAnd1(true, true, true)' failed at ../../test/torque/test-torque.tq:515:5");
    Unreachable();
    BIND(label__True_783);
    // ../../test/torque/test-torque.tq:516:5
    Label label__True_785_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_785 = &label__True_785_impl;
    USE(label__True_785);
    Label label__False_786_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_786 = &label__False_786_impl;
    USE(label__False_786);
    TNode<BoolT> t2481 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2482 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2483 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2484 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2481), implicit_cast<TNode<BoolT>>(t2482), implicit_cast<TNode<BoolT>>(t2483)));
    USE(implicit_cast<TNode<BoolT>>(t2484));
    Branch(implicit_cast<TNode<BoolT>>(t2484), label__True_785, label__False_786);
    BIND(label__False_786);
    Print("assert 'TestOrAnd2(true, true, true)' failed at ../../test/torque/test-torque.tq:516:5");
    Unreachable();
    BIND(label__True_785);
    // ../../test/torque/test-torque.tq:517:5
    Label label__True_787_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_787 = &label__True_787_impl;
    USE(label__True_787);
    Label label__False_788_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_788 = &label__False_788_impl;
    USE(label__False_788);
    TNode<BoolT> t2485 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2486 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2487 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2488 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2485), implicit_cast<TNode<BoolT>>(t2486), implicit_cast<TNode<BoolT>>(t2487)));
    USE(implicit_cast<TNode<BoolT>>(t2488));
    Branch(implicit_cast<TNode<BoolT>>(t2488), label__True_787, label__False_788);
    BIND(label__False_788);
    Print("assert 'TestOrAnd3(true, true, true)' failed at ../../test/torque/test-torque.tq:517:5");
    Unreachable();
    BIND(label__True_787);
    // ../../test/torque/test-torque.tq:518:5
    Label label__True_789_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_789 = &label__True_789_impl;
    USE(label__True_789);
    Label label__False_790_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_790 = &label__False_790_impl;
    USE(label__False_790);
    TNode<BoolT> t2489 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2490 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2491 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2492 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2489), implicit_cast<TNode<BoolT>>(t2490), implicit_cast<TNode<BoolT>>(t2491)));
    USE(implicit_cast<TNode<BoolT>>(t2492));
    Branch(implicit_cast<TNode<BoolT>>(t2492), label__True_789, label__False_790);
    BIND(label__False_790);
    Print("assert 'TestOrAnd1(true, true, false)' failed at ../../test/torque/test-torque.tq:518:5");
    Unreachable();
    BIND(label__True_789);
    // ../../test/torque/test-torque.tq:519:5
    Label label__True_791_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_791 = &label__True_791_impl;
    USE(label__True_791);
    Label label__False_792_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_792 = &label__False_792_impl;
    USE(label__False_792);
    TNode<BoolT> t2493 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2494 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2495 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2496 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2493), implicit_cast<TNode<BoolT>>(t2494), implicit_cast<TNode<BoolT>>(t2495)));
    USE(implicit_cast<TNode<BoolT>>(t2496));
    Branch(implicit_cast<TNode<BoolT>>(t2496), label__True_791, label__False_792);
    BIND(label__False_792);
    Print("assert 'TestOrAnd2(true, true, false)' failed at ../../test/torque/test-torque.tq:519:5");
    Unreachable();
    BIND(label__True_791);
    // ../../test/torque/test-torque.tq:520:5
    Label label__True_793_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_793 = &label__True_793_impl;
    USE(label__True_793);
    Label label__False_794_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_794 = &label__False_794_impl;
    USE(label__False_794);
    TNode<BoolT> t2497 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2498 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2499 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2500 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2497), implicit_cast<TNode<BoolT>>(t2498), implicit_cast<TNode<BoolT>>(t2499)));
    USE(implicit_cast<TNode<BoolT>>(t2500));
    Branch(implicit_cast<TNode<BoolT>>(t2500), label__True_793, label__False_794);
    BIND(label__False_794);
    Print("assert 'TestOrAnd3(true, true, false)' failed at ../../test/torque/test-torque.tq:520:5");
    Unreachable();
    BIND(label__True_793);
    // ../../test/torque/test-torque.tq:521:5
    Label label__True_795_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_795 = &label__True_795_impl;
    USE(label__True_795);
    Label label__False_796_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_796 = &label__False_796_impl;
    USE(label__False_796);
    TNode<BoolT> t2501 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2502 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2503 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2504 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2501), implicit_cast<TNode<BoolT>>(t2502), implicit_cast<TNode<BoolT>>(t2503)));
    USE(implicit_cast<TNode<BoolT>>(t2504));
    Branch(implicit_cast<TNode<BoolT>>(t2504), label__True_795, label__False_796);
    BIND(label__False_796);
    Print("assert 'TestOrAnd1(true, false, true)' failed at ../../test/torque/test-torque.tq:521:5");
    Unreachable();
    BIND(label__True_795);
    // ../../test/torque/test-torque.tq:522:5
    Label label__True_797_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_797 = &label__True_797_impl;
    USE(label__True_797);
    Label label__False_798_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_798 = &label__False_798_impl;
    USE(label__False_798);
    TNode<BoolT> t2505 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2506 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2507 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2508 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2505), implicit_cast<TNode<BoolT>>(t2506), implicit_cast<TNode<BoolT>>(t2507)));
    USE(implicit_cast<TNode<BoolT>>(t2508));
    Branch(implicit_cast<TNode<BoolT>>(t2508), label__True_797, label__False_798);
    BIND(label__False_798);
    Print("assert 'TestOrAnd2(true, false, true)' failed at ../../test/torque/test-torque.tq:522:5");
    Unreachable();
    BIND(label__True_797);
    // ../../test/torque/test-torque.tq:523:5
    Label label__True_799_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_799 = &label__True_799_impl;
    USE(label__True_799);
    Label label__False_800_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_800 = &label__False_800_impl;
    USE(label__False_800);
    TNode<BoolT> t2509 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2510 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2511 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2512 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2509), implicit_cast<TNode<BoolT>>(t2510), implicit_cast<TNode<BoolT>>(t2511)));
    USE(implicit_cast<TNode<BoolT>>(t2512));
    Branch(implicit_cast<TNode<BoolT>>(t2512), label__True_799, label__False_800);
    BIND(label__False_800);
    Print("assert 'TestOrAnd3(true, false, true)' failed at ../../test/torque/test-torque.tq:523:5");
    Unreachable();
    BIND(label__True_799);
    // ../../test/torque/test-torque.tq:524:5
    Label label__True_801_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_801 = &label__True_801_impl;
    USE(label__True_801);
    Label label__False_802_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_802 = &label__False_802_impl;
    USE(label__False_802);
    TNode<BoolT> t2513 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2514 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2515 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2516 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2513), implicit_cast<TNode<BoolT>>(t2514), implicit_cast<TNode<BoolT>>(t2515)));
    USE(implicit_cast<TNode<BoolT>>(t2516));
    Branch(implicit_cast<TNode<BoolT>>(t2516), label__True_801, label__False_802);
    BIND(label__False_802);
    Print("assert 'TestOrAnd1(true, false, false)' failed at ../../test/torque/test-torque.tq:524:5");
    Unreachable();
    BIND(label__True_801);
    // ../../test/torque/test-torque.tq:525:5
    Label label__True_803_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_803 = &label__True_803_impl;
    USE(label__True_803);
    Label label__False_804_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_804 = &label__False_804_impl;
    USE(label__False_804);
    TNode<BoolT> t2517 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2518 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2519 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2520 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2517), implicit_cast<TNode<BoolT>>(t2518), implicit_cast<TNode<BoolT>>(t2519)));
    USE(implicit_cast<TNode<BoolT>>(t2520));
    Branch(implicit_cast<TNode<BoolT>>(t2520), label__True_803, label__False_804);
    BIND(label__False_804);
    Print("assert 'TestOrAnd2(true, false, false)' failed at ../../test/torque/test-torque.tq:525:5");
    Unreachable();
    BIND(label__True_803);
    // ../../test/torque/test-torque.tq:526:5
    Label label__True_805_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_805 = &label__True_805_impl;
    USE(label__True_805);
    Label label__False_806_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_806 = &label__False_806_impl;
    USE(label__False_806);
    TNode<BoolT> t2521 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2522 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2523 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2524 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2521), implicit_cast<TNode<BoolT>>(t2522), implicit_cast<TNode<BoolT>>(t2523)));
    USE(implicit_cast<TNode<BoolT>>(t2524));
    Branch(implicit_cast<TNode<BoolT>>(t2524), label__True_805, label__False_806);
    BIND(label__False_806);
    Print("assert 'TestOrAnd3(true, false, false)' failed at ../../test/torque/test-torque.tq:526:5");
    Unreachable();
    BIND(label__True_805);
    // ../../test/torque/test-torque.tq:527:5
    Label label__True_807_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_807 = &label__True_807_impl;
    USE(label__True_807);
    Label label__False_808_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_808 = &label__False_808_impl;
    USE(label__False_808);
    TNode<BoolT> t2525 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2526 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2527 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2528 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2525), implicit_cast<TNode<BoolT>>(t2526), implicit_cast<TNode<BoolT>>(t2527)));
    USE(implicit_cast<TNode<BoolT>>(t2528));
    Branch(implicit_cast<TNode<BoolT>>(t2528), label__True_807, label__False_808);
    BIND(label__False_808);
    Print("assert 'TestOrAnd1(false, true, true)' failed at ../../test/torque/test-torque.tq:527:5");
    Unreachable();
    BIND(label__True_807);
    // ../../test/torque/test-torque.tq:528:5
    Label label__True_809_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_809 = &label__True_809_impl;
    USE(label__True_809);
    Label label__False_810_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_810 = &label__False_810_impl;
    USE(label__False_810);
    TNode<BoolT> t2529 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2530 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2531 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2532 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2529), implicit_cast<TNode<BoolT>>(t2530), implicit_cast<TNode<BoolT>>(t2531)));
    USE(implicit_cast<TNode<BoolT>>(t2532));
    Branch(implicit_cast<TNode<BoolT>>(t2532), label__True_809, label__False_810);
    BIND(label__False_810);
    Print("assert 'TestOrAnd2(false, true, true)' failed at ../../test/torque/test-torque.tq:528:5");
    Unreachable();
    BIND(label__True_809);
    // ../../test/torque/test-torque.tq:529:5
    Label label__True_811_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_811 = &label__True_811_impl;
    USE(label__True_811);
    Label label__False_812_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_812 = &label__False_812_impl;
    USE(label__False_812);
    TNode<BoolT> t2533 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2534 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2535 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2536 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2533), implicit_cast<TNode<BoolT>>(t2534), implicit_cast<TNode<BoolT>>(t2535)));
    USE(implicit_cast<TNode<BoolT>>(t2536));
    Branch(implicit_cast<TNode<BoolT>>(t2536), label__True_811, label__False_812);
    BIND(label__False_812);
    Print("assert 'TestOrAnd3(false, true, true)' failed at ../../test/torque/test-torque.tq:529:5");
    Unreachable();
    BIND(label__True_811);
    // ../../test/torque/test-torque.tq:530:5
    Label label__True_813_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_813 = &label__True_813_impl;
    USE(label__True_813);
    Label label__False_814_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_814 = &label__False_814_impl;
    USE(label__False_814);
    TNode<BoolT> t2537 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2538 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2539 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2540 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2537), implicit_cast<TNode<BoolT>>(t2538), implicit_cast<TNode<BoolT>>(t2539)));
    USE(implicit_cast<TNode<BoolT>>(t2540));
    TNode<BoolT> t2541 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2540)));
    USE(implicit_cast<TNode<BoolT>>(t2541));
    Branch(implicit_cast<TNode<BoolT>>(t2541), label__True_813, label__False_814);
    BIND(label__False_814);
    Print("assert '!TestOrAnd1(false, true, false)' failed at ../../test/torque/test-torque.tq:530:5");
    Unreachable();
    BIND(label__True_813);
    // ../../test/torque/test-torque.tq:531:5
    Label label__True_815_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_815 = &label__True_815_impl;
    USE(label__True_815);
    Label label__False_816_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_816 = &label__False_816_impl;
    USE(label__False_816);
    TNode<BoolT> t2542 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2543 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2544 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2545 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2542), implicit_cast<TNode<BoolT>>(t2543), implicit_cast<TNode<BoolT>>(t2544)));
    USE(implicit_cast<TNode<BoolT>>(t2545));
    TNode<BoolT> t2546 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2545)));
    USE(implicit_cast<TNode<BoolT>>(t2546));
    Branch(implicit_cast<TNode<BoolT>>(t2546), label__True_815, label__False_816);
    BIND(label__False_816);
    Print("assert '!TestOrAnd2(false, true, false)' failed at ../../test/torque/test-torque.tq:531:5");
    Unreachable();
    BIND(label__True_815);
    // ../../test/torque/test-torque.tq:532:5
    Label label__True_817_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_817 = &label__True_817_impl;
    USE(label__True_817);
    Label label__False_818_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_818 = &label__False_818_impl;
    USE(label__False_818);
    TNode<BoolT> t2547 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2548 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2549 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2550 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2547), implicit_cast<TNode<BoolT>>(t2548), implicit_cast<TNode<BoolT>>(t2549)));
    USE(implicit_cast<TNode<BoolT>>(t2550));
    TNode<BoolT> t2551 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2550)));
    USE(implicit_cast<TNode<BoolT>>(t2551));
    Branch(implicit_cast<TNode<BoolT>>(t2551), label__True_817, label__False_818);
    BIND(label__False_818);
    Print("assert '!TestOrAnd3(false, true, false)' failed at ../../test/torque/test-torque.tq:532:5");
    Unreachable();
    BIND(label__True_817);
    // ../../test/torque/test-torque.tq:533:5
    Label label__True_819_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_819 = &label__True_819_impl;
    USE(label__True_819);
    Label label__False_820_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_820 = &label__False_820_impl;
    USE(label__False_820);
    TNode<BoolT> t2552 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2553 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2554 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2555 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2552), implicit_cast<TNode<BoolT>>(t2553), implicit_cast<TNode<BoolT>>(t2554)));
    USE(implicit_cast<TNode<BoolT>>(t2555));
    TNode<BoolT> t2556 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2555)));
    USE(implicit_cast<TNode<BoolT>>(t2556));
    Branch(implicit_cast<TNode<BoolT>>(t2556), label__True_819, label__False_820);
    BIND(label__False_820);
    Print("assert '!TestOrAnd1(false, false, true)' failed at ../../test/torque/test-torque.tq:533:5");
    Unreachable();
    BIND(label__True_819);
    // ../../test/torque/test-torque.tq:534:5
    Label label__True_821_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_821 = &label__True_821_impl;
    USE(label__True_821);
    Label label__False_822_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_822 = &label__False_822_impl;
    USE(label__False_822);
    TNode<BoolT> t2557 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2558 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2559 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2560 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2557), implicit_cast<TNode<BoolT>>(t2558), implicit_cast<TNode<BoolT>>(t2559)));
    USE(implicit_cast<TNode<BoolT>>(t2560));
    TNode<BoolT> t2561 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2560)));
    USE(implicit_cast<TNode<BoolT>>(t2561));
    Branch(implicit_cast<TNode<BoolT>>(t2561), label__True_821, label__False_822);
    BIND(label__False_822);
    Print("assert '!TestOrAnd2(false, false, true)' failed at ../../test/torque/test-torque.tq:534:5");
    Unreachable();
    BIND(label__True_821);
    // ../../test/torque/test-torque.tq:535:5
    Label label__True_823_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_823 = &label__True_823_impl;
    USE(label__True_823);
    Label label__False_824_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_824 = &label__False_824_impl;
    USE(label__False_824);
    TNode<BoolT> t2562 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2563 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2564 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
    TNode<BoolT> t2565 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2562), implicit_cast<TNode<BoolT>>(t2563), implicit_cast<TNode<BoolT>>(t2564)));
    USE(implicit_cast<TNode<BoolT>>(t2565));
    TNode<BoolT> t2566 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2565)));
    USE(implicit_cast<TNode<BoolT>>(t2566));
    Branch(implicit_cast<TNode<BoolT>>(t2566), label__True_823, label__False_824);
    BIND(label__False_824);
    Print("assert '!TestOrAnd3(false, false, true)' failed at ../../test/torque/test-torque.tq:535:5");
    Unreachable();
    BIND(label__True_823);
    // ../../test/torque/test-torque.tq:536:5
    Label label__True_825_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_825 = &label__True_825_impl;
    USE(label__True_825);
    Label label__False_826_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_826 = &label__False_826_impl;
    USE(label__False_826);
    TNode<BoolT> t2567 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2568 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2569 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2570 = UncheckedCast<BoolT>(TestOrAnd1(implicit_cast<TNode<BoolT>>(t2567), implicit_cast<TNode<BoolT>>(t2568), implicit_cast<TNode<BoolT>>(t2569)));
    USE(implicit_cast<TNode<BoolT>>(t2570));
    TNode<BoolT> t2571 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2570)));
    USE(implicit_cast<TNode<BoolT>>(t2571));
    Branch(implicit_cast<TNode<BoolT>>(t2571), label__True_825, label__False_826);
    BIND(label__False_826);
    Print("assert '!TestOrAnd1(false, false, false)' failed at ../../test/torque/test-torque.tq:536:5");
    Unreachable();
    BIND(label__True_825);
    // ../../test/torque/test-torque.tq:537:5
    Label label__True_827_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_827 = &label__True_827_impl;
    USE(label__True_827);
    Label label__False_828_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_828 = &label__False_828_impl;
    USE(label__False_828);
    TNode<BoolT> t2572 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2573 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2574 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2575 = UncheckedCast<BoolT>(TestOrAnd2(implicit_cast<TNode<BoolT>>(t2572), implicit_cast<TNode<BoolT>>(t2573), implicit_cast<TNode<BoolT>>(t2574)));
    USE(implicit_cast<TNode<BoolT>>(t2575));
    TNode<BoolT> t2576 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2575)));
    USE(implicit_cast<TNode<BoolT>>(t2576));
    Branch(implicit_cast<TNode<BoolT>>(t2576), label__True_827, label__False_828);
    BIND(label__False_828);
    Print("assert '!TestOrAnd2(false, false, false)' failed at ../../test/torque/test-torque.tq:537:5");
    Unreachable();
    BIND(label__True_827);
    // ../../test/torque/test-torque.tq:538:5
    Label label__True_829_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_829 = &label__True_829_impl;
    USE(label__True_829);
    Label label__False_830_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_830 = &label__False_830_impl;
    USE(label__False_830);
    TNode<BoolT> t2577 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2578 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2579 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
    TNode<BoolT> t2580 = UncheckedCast<BoolT>(TestOrAnd3(implicit_cast<TNode<BoolT>>(t2577), implicit_cast<TNode<BoolT>>(t2578), implicit_cast<TNode<BoolT>>(t2579)));
    USE(implicit_cast<TNode<BoolT>>(t2580));
    TNode<BoolT> t2581 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t2580)));
    USE(implicit_cast<TNode<BoolT>>(t2581));
    Branch(implicit_cast<TNode<BoolT>>(t2581), label__True_829, label__False_830);
    BIND(label__False_830);
    Print("assert '!TestOrAnd3(false, false, false)' failed at ../../test/torque/test-torque.tq:538:5");
    Unreachable();
    BIND(label__True_829);
  }
}

TF_BUILTIN(GenericBuiltinTest5ATSmi, TestBuiltinsFromDSLAssembler) {
  TNode<Context> p_c = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_c);
  TNode<Smi> p_param = UncheckedCast<Smi>(Parameter(Descriptor::kParam));
  USE(p_param);
  // ../../test/torque/test-torque.tq:84:69
  {
    // ../../test/torque/test-torque.tq:85:5
    Return(implicit_cast<TNode<Object>>(Null()));
  }
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::GenericMacroTest5ATSmi(TNode<Smi> p_param) {
  TVARIABLE(Object, _return_548_impl);
  auto _return_548 = &_return_548_impl;
  USE(_return_548);
  Label label_macro_end_1769_impl(this, {_return_548}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1769 = &label_macro_end_1769_impl;
  USE(label_macro_end_1769);
  // ../../test/torque/test-torque.tq:131:53
  {
    // ../../test/torque/test-torque.tq:132:5
    *_return_548 = implicit_cast<TNode<Object>>(Undefined());
    Goto(label_macro_end_1769);
  }
  BIND(label_macro_end_1769);
  return implicit_cast<TNode<Object>>((*_return_548).value());
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::GenericMacroTestWithLabels5ATSmi(TNode<Smi> p_param, Label* label_X_1193) {
  TVARIABLE(Object, _return_549_impl);
  auto _return_549 = &_return_549_impl;
  USE(_return_549);
  Label label_macro_end_1770_impl(this, {_return_549}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1770 = &label_macro_end_1770_impl;
  USE(label_macro_end_1770);
  // ../../test/torque/test-torque.tq:140:16
  {
    // ../../test/torque/test-torque.tq:141:5
    *_return_549 = implicit_cast<TNode<Object>>(Undefined());
    Goto(label_macro_end_1770);
  }
  BIND(label_macro_end_1770);
  return implicit_cast<TNode<Object>>((*_return_549).value());
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::IncrementIfSmi36UT12ATFixedArray12ATHeapNumber5ATSmi(TNode<Object> p_x) {
  TVARIABLE(Object, _return_550_impl);
  auto _return_550 = &_return_550_impl;
  USE(_return_550);
  Label label_macro_end_1772_impl(this, {_return_550}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1772 = &label_macro_end_1772_impl;
  USE(label_macro_end_1772);
  // ../../test/torque/test-torque.tq:397:42
  {
    // ../../test/torque/test-torque.tq:398:5
    {
      // ../../test/torque/test-torque.tq:398:17
      TNode<Object> _value_1226_impl;
      auto _value_1226 = &_value_1226_impl;
      USE(_value_1226);
      *_value_1226 = implicit_cast<TNode<Object>>(p_x);
      // ../../test/torque/test-torque.tq:399:7
      {
        Label label_try_done_1227_1773_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_done_1227_1773 = &label_try_done_1227_1773_impl;
        USE(label_try_done_1227_1773);
        Label label__NextCase_1194_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label__NextCase_1194 = &label__NextCase_1194_impl;
        USE(label__NextCase_1194);
        Label label_try_begin_1228_1774_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_try_begin_1228_1774 = &label_try_begin_1228_1774_impl;
        USE(label_try_begin_1228_1774);
        Goto(label_try_begin_1228_1774);
        if (label_try_begin_1228_1774->is_used())
        {
          BIND(label_try_begin_1228_1774);
          // ../../test/torque/test-torque.tq:399:7
          {
            // ../../test/torque/test-torque.tq:399:7
            TNode<Smi> t3824 = UncheckedCast<Smi>(Cast5ATSmi(implicit_cast<TNode<Object>>((*_value_1226)), label__NextCase_1194));
            USE(implicit_cast<TNode<Smi>>(t3824));
            TNode<Smi> x_1229_impl;
            auto x_1229 = &x_1229_impl;
            USE(x_1229);
            *x_1229 = implicit_cast<TNode<Smi>>(t3824);
            // ../../test/torque/test-torque.tq:399:22
            {
              // ../../test/torque/test-torque.tq:400:9
              int31_t t3825 = 1;
              TNode<Smi> t3826 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t3825)));
              TNode<Smi> t3827 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*x_1229)), implicit_cast<TNode<Smi>>(t3826)));
              USE(implicit_cast<TNode<Smi>>(t3827));
              *_return_550 = implicit_cast<TNode<Object>>(t3827);
              Goto(label_macro_end_1772);
            }
          }
        }
        if (label__NextCase_1194->is_used())
        {
          BIND(label__NextCase_1194);
          // ../../test/torque/test-torque.tq:399:7
          {
            // ../../test/torque/test-torque.tq:402:7
            TNode<Object> o_1230_impl;
            auto o_1230 = &o_1230_impl;
            USE(o_1230);
            *o_1230 = implicit_cast<TNode<Object>>(UncheckedCast<HeapObject>(implicit_cast<TNode<Object>>((*_value_1226))));
            // ../../test/torque/test-torque.tq:402:20
            {
              // ../../test/torque/test-torque.tq:403:9
              *_return_550 = implicit_cast<TNode<Object>>((*o_1230));
              Goto(label_macro_end_1772);
            }
          }
        }
      }
    }
  }
  BIND(label_macro_end_1772);
  return implicit_cast<TNode<Object>>((*_return_550).value());
}

compiler::TNode<Smi> TestBuiltinsFromDSLAssembler::ExampleGenericOverload5ATSmi(TNode<Smi> p_o) {
  TVARIABLE(Smi, _return_552_impl);
  auto _return_552 = &_return_552_impl;
  USE(_return_552);
  Label label_macro_end_1776_impl(this, {_return_552}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1776 = &label_macro_end_1776_impl;
  USE(label_macro_end_1776);
  // ../../test/torque/test-torque.tq:446:52
  {
    // ../../test/torque/test-torque.tq:447:5
    int31_t t3830 = 1;
    TNode<Smi> t3831 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t3830)));
    TNode<Smi> t3832 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>(p_o), implicit_cast<TNode<Smi>>(t3831)));
    USE(implicit_cast<TNode<Smi>>(t3832));
    *_return_552 = implicit_cast<TNode<Smi>>(t3832);
    Goto(label_macro_end_1776);
  }
  BIND(label_macro_end_1776);
  return implicit_cast<TNode<Smi>>((*_return_552).value());
}

compiler::TNode<Object> TestBuiltinsFromDSLAssembler::ExampleGenericOverload22UT12ATHeapObject5ATSmi(TNode<Object> p_o) {
  TVARIABLE(Object, _return_553_impl);
  auto _return_553 = &_return_553_impl;
  USE(_return_553);
  Label label_macro_end_1777_impl(this, {_return_553}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1777 = &label_macro_end_1777_impl;
  USE(label_macro_end_1777);
  // ../../test/torque/test-torque.tq:443:55
  {
    // ../../test/torque/test-torque.tq:444:5
    *_return_553 = implicit_cast<TNode<Object>>(p_o);
    Goto(label_macro_end_1777);
  }
  BIND(label_macro_end_1777);
  return implicit_cast<TNode<Object>>((*_return_553).value());
}

}  // namespace internal
}  // namespace v8

