#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-utils-gen.h"
#include "src/builtins/builtins.h"
#include "src/code-factory.h"
#include "src/elements-kind.h"
#include "src/heap/factory-inl.h"
#include "src/objects.h"
#include "src/objects/bigint.h"
#include "builtins-typed-array-from-dsl-gen.h"

namespace v8 {
namespace internal {

using Node = compiler::Node;

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType17ATFixedUint8Array() {
  ElementsKind _return_124_impl;
  auto _return_124 = &_return_124_impl;
  USE(_return_124);
  Label label_macro_end_1387_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1387 = &label_macro_end_1387_impl;
  USE(label_macro_end_1387);
  // ../../src/builtins/typed-array.tq:20:63
  {
    // ../../src/builtins/typed-array.tq:21:5
    *_return_124 = implicit_cast<ElementsKind>(UINT8_ELEMENTS);
    Goto(label_macro_end_1387);
  }
  BIND(label_macro_end_1387);
  return implicit_cast<ElementsKind>((*_return_124));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType16ATFixedInt8Array() {
  ElementsKind _return_125_impl;
  auto _return_125 = &_return_125_impl;
  USE(_return_125);
  Label label_macro_end_1388_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1388 = &label_macro_end_1388_impl;
  USE(label_macro_end_1388);
  // ../../src/builtins/typed-array.tq:23:62
  {
    // ../../src/builtins/typed-array.tq:24:5
    *_return_125 = implicit_cast<ElementsKind>(INT8_ELEMENTS);
    Goto(label_macro_end_1388);
  }
  BIND(label_macro_end_1388);
  return implicit_cast<ElementsKind>((*_return_125));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType18ATFixedUint16Array() {
  ElementsKind _return_126_impl;
  auto _return_126 = &_return_126_impl;
  USE(_return_126);
  Label label_macro_end_1389_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1389 = &label_macro_end_1389_impl;
  USE(label_macro_end_1389);
  // ../../src/builtins/typed-array.tq:26:64
  {
    // ../../src/builtins/typed-array.tq:27:5
    *_return_126 = implicit_cast<ElementsKind>(UINT16_ELEMENTS);
    Goto(label_macro_end_1389);
  }
  BIND(label_macro_end_1389);
  return implicit_cast<ElementsKind>((*_return_126));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType17ATFixedInt16Array() {
  ElementsKind _return_127_impl;
  auto _return_127 = &_return_127_impl;
  USE(_return_127);
  Label label_macro_end_1390_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1390 = &label_macro_end_1390_impl;
  USE(label_macro_end_1390);
  // ../../src/builtins/typed-array.tq:29:63
  {
    // ../../src/builtins/typed-array.tq:30:5
    *_return_127 = implicit_cast<ElementsKind>(INT16_ELEMENTS);
    Goto(label_macro_end_1390);
  }
  BIND(label_macro_end_1390);
  return implicit_cast<ElementsKind>((*_return_127));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType18ATFixedUint32Array() {
  ElementsKind _return_128_impl;
  auto _return_128 = &_return_128_impl;
  USE(_return_128);
  Label label_macro_end_1391_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1391 = &label_macro_end_1391_impl;
  USE(label_macro_end_1391);
  // ../../src/builtins/typed-array.tq:32:64
  {
    // ../../src/builtins/typed-array.tq:33:5
    *_return_128 = implicit_cast<ElementsKind>(UINT32_ELEMENTS);
    Goto(label_macro_end_1391);
  }
  BIND(label_macro_end_1391);
  return implicit_cast<ElementsKind>((*_return_128));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType17ATFixedInt32Array() {
  ElementsKind _return_129_impl;
  auto _return_129 = &_return_129_impl;
  USE(_return_129);
  Label label_macro_end_1392_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1392 = &label_macro_end_1392_impl;
  USE(label_macro_end_1392);
  // ../../src/builtins/typed-array.tq:35:63
  {
    // ../../src/builtins/typed-array.tq:36:5
    *_return_129 = implicit_cast<ElementsKind>(INT32_ELEMENTS);
    Goto(label_macro_end_1392);
  }
  BIND(label_macro_end_1392);
  return implicit_cast<ElementsKind>((*_return_129));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType19ATFixedFloat32Array() {
  ElementsKind _return_130_impl;
  auto _return_130 = &_return_130_impl;
  USE(_return_130);
  Label label_macro_end_1393_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1393 = &label_macro_end_1393_impl;
  USE(label_macro_end_1393);
  // ../../src/builtins/typed-array.tq:38:65
  {
    // ../../src/builtins/typed-array.tq:39:5
    *_return_130 = implicit_cast<ElementsKind>(FLOAT32_ELEMENTS);
    Goto(label_macro_end_1393);
  }
  BIND(label_macro_end_1393);
  return implicit_cast<ElementsKind>((*_return_130));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType19ATFixedFloat64Array() {
  ElementsKind _return_131_impl;
  auto _return_131 = &_return_131_impl;
  USE(_return_131);
  Label label_macro_end_1394_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1394 = &label_macro_end_1394_impl;
  USE(label_macro_end_1394);
  // ../../src/builtins/typed-array.tq:41:65
  {
    // ../../src/builtins/typed-array.tq:42:5
    *_return_131 = implicit_cast<ElementsKind>(FLOAT64_ELEMENTS);
    Goto(label_macro_end_1394);
  }
  BIND(label_macro_end_1394);
  return implicit_cast<ElementsKind>((*_return_131));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType24ATFixedUint8ClampedArray() {
  ElementsKind _return_132_impl;
  auto _return_132 = &_return_132_impl;
  USE(_return_132);
  Label label_macro_end_1395_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1395 = &label_macro_end_1395_impl;
  USE(label_macro_end_1395);
  // ../../src/builtins/typed-array.tq:44:70
  {
    // ../../src/builtins/typed-array.tq:45:5
    *_return_132 = implicit_cast<ElementsKind>(UINT8_CLAMPED_ELEMENTS);
    Goto(label_macro_end_1395);
  }
  BIND(label_macro_end_1395);
  return implicit_cast<ElementsKind>((*_return_132));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType21ATFixedBigUint64Array() {
  ElementsKind _return_133_impl;
  auto _return_133 = &_return_133_impl;
  USE(_return_133);
  Label label_macro_end_1396_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1396 = &label_macro_end_1396_impl;
  USE(label_macro_end_1396);
  // ../../src/builtins/typed-array.tq:47:67
  {
    // ../../src/builtins/typed-array.tq:48:5
    *_return_133 = implicit_cast<ElementsKind>(BIGUINT64_ELEMENTS);
    Goto(label_macro_end_1396);
  }
  BIND(label_macro_end_1396);
  return implicit_cast<ElementsKind>((*_return_133));
}

ElementsKind TypedArrayBuiltinsFromDSLAssembler::KindForArrayType20ATFixedBigInt64Array() {
  ElementsKind _return_134_impl;
  auto _return_134 = &_return_134_impl;
  USE(_return_134);
  Label label_macro_end_1397_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1397 = &label_macro_end_1397_impl;
  USE(label_macro_end_1397);
  // ../../src/builtins/typed-array.tq:50:66
  {
    // ../../src/builtins/typed-array.tq:51:5
    *_return_134 = implicit_cast<ElementsKind>(BIGINT64_ELEMENTS);
    Goto(label_macro_end_1397);
  }
  BIND(label_macro_end_1397);
  return implicit_cast<ElementsKind>((*_return_134));
}

compiler::TNode<Number> TypedArrayBuiltinsFromDSLAssembler::CallCompareWithDetachedCheck(TNode<Context> p_context, TNode<JSTypedArray> p_array, TNode<JSReceiver> p_comparefn, TNode<Object> p_a, TNode<Object> p_b, Label* label_Detached_195) {
  TVARIABLE(Number, _return_135_impl);
  auto _return_135 = &_return_135_impl;
  USE(_return_135);
  Label label_macro_end_1398_impl(this, {_return_135}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1398 = &label_macro_end_1398_impl;
  USE(label_macro_end_1398);
  // ../../src/builtins/typed-array.tq:73:23
  {
    // ../../src/builtins/typed-array.tq:75:5
    TNode<Object> t572 = UncheckedCast<Object>(Call(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>(Undefined()), implicit_cast<TNode<Object>>(p_a), implicit_cast<TNode<Object>>(p_b)));
    USE(implicit_cast<TNode<Object>>(t572));
    TNode<Number> t573 = UncheckedCast<Number>(ToNumber_Inline(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<Object>>(t572)));
    USE(implicit_cast<TNode<Number>>(t573));
    TNode<Number> v_746_impl;
    auto v_746 = &v_746_impl;
    USE(v_746);
    *v_746 = implicit_cast<TNode<Number>>(t573);
    // ../../src/builtins/typed-array.tq:79:5
    {
      Label label__True_196_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_196 = &label__True_196_impl;
      USE(label__True_196);
      Label label__False_197_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_197 = &label__False_197_impl;
      USE(label__False_197);
      TNode<JSArrayBuffer> t574 = UncheckedCast<JSArrayBuffer>(LoadTypedArrayBuffer(implicit_cast<TNode<JSTypedArray>>(p_array)));
      TNode<BoolT> t575 = UncheckedCast<BoolT>(IsDetachedBuffer(implicit_cast<TNode<JSArrayBuffer>>(t574)));
      USE(implicit_cast<TNode<BoolT>>(t575));
      Branch(implicit_cast<TNode<BoolT>>(t575), label__True_196, label__False_197);
      if (label__True_196->is_used())
      {
        BIND(label__True_196);
        // ../../src/builtins/typed-array.tq:79:41
        Goto(label_Detached_195);
      }
      BIND(label__False_197);
    }
    // ../../src/builtins/typed-array.tq:82:5
    {
      Label label__True_198_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_198 = &label__True_198_impl;
      USE(label__True_198);
      Label label__False_199_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_199 = &label__False_199_impl;
      USE(label__False_199);
      TNode<BoolT> t576 = UncheckedCast<BoolT>(NumberIsNaN(implicit_cast<TNode<Number>>((*v_746))));
      USE(implicit_cast<TNode<BoolT>>(t576));
      Branch(implicit_cast<TNode<BoolT>>(t576), label__True_198, label__False_199);
      if (label__True_198->is_used())
      {
        BIND(label__True_198);
        // ../../src/builtins/typed-array.tq:82:25
        int31_t t577 = 0;
        TNode<Number> t578 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t577)));
        *_return_135 = implicit_cast<TNode<Number>>(t578);
        Goto(label_macro_end_1398);
      }
      BIND(label__False_199);
    }
    // ../../src/builtins/typed-array.tq:85:5
    *_return_135 = implicit_cast<TNode<Number>>((*v_746));
    Goto(label_macro_end_1398);
  }
  BIND(label_macro_end_1398);
  return implicit_cast<TNode<Number>>((*_return_135).value());
}

void TypedArrayBuiltinsFromDSLAssembler::TypedArrayInsertionSort(TNode<Context> p_context, TNode<JSTypedArray> p_array, TNode<Smi> p_fromArg, TNode<Smi> p_toArg, TNode<JSReceiver> p_comparefn, TNode<Code> p_load, TNode<Code> p_store, Label* label_Detached_200) {
  Label label_macro_end_1399_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1399 = &label_macro_end_1399_impl;
  USE(label_macro_end_1399);
  // ../../src/builtins/typed-array.tq:92:19
  {
    // ../../src/builtins/typed-array.tq:93:5
    TVARIABLE(Smi, from_136_impl);
    auto from_136 = &from_136_impl;
    USE(from_136);
    *from_136 = implicit_cast<TNode<Smi>>(p_fromArg);
    // ../../src/builtins/typed-array.tq:94:5
    TVARIABLE(Smi, to_137_impl);
    auto to_137 = &to_137_impl;
    USE(to_137);
    *to_137 = implicit_cast<TNode<Smi>>(p_toArg);
    // ../../src/builtins/typed-array.tq:96:5
    {
      Label label__True_201_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_201 = &label__True_201_impl;
      USE(label__True_201);
      Label label__False_202_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_202 = &label__False_202_impl;
      USE(label__False_202);
      TNode<JSArrayBuffer> t579 = UncheckedCast<JSArrayBuffer>(LoadTypedArrayBuffer(implicit_cast<TNode<JSTypedArray>>(p_array)));
      TNode<BoolT> t580 = UncheckedCast<BoolT>(IsDetachedBuffer(implicit_cast<TNode<JSArrayBuffer>>(t579)));
      USE(implicit_cast<TNode<BoolT>>(t580));
      Branch(implicit_cast<TNode<BoolT>>(t580), label__True_201, label__False_202);
      if (label__True_201->is_used())
      {
        BIND(label__True_201);
        // ../../src/builtins/typed-array.tq:96:41
        Goto(label_Detached_200);
      }
      BIND(label__False_202);
    }
    // ../../src/builtins/typed-array.tq:98:5
    int31_t t581 = 1;
    TNode<Smi> t582 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t581)));
    TNode<Smi> t583 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*from_136).value()), implicit_cast<TNode<Smi>>(t582)));
    USE(implicit_cast<TNode<Smi>>(t583));
    TVARIABLE(Smi, i_138_impl);
    auto i_138 = &i_138_impl;
    USE(i_138);
    *i_138 = implicit_cast<TNode<Smi>>(t583);
    Label label__True_203_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__True_203 = &label__True_203_impl;
    USE(label__True_203);
    Label label__False_204_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label__False_204 = &label__False_204_impl;
    USE(label__False_204);
    Label label_header_747_1400_impl(this, {i_138}, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_header_747_1400 = &label_header_747_1400_impl;
    USE(label_header_747_1400);
    Goto(label_header_747_1400);
    BIND(label_header_747_1400);
    Label label_action_748_1401_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
    Label* label_action_748_1401 = &label_action_748_1401_impl;
    USE(label_action_748_1401);
    TNode<BoolT> t584 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*i_138).value()), implicit_cast<TNode<Smi>>((*to_137).value())));
    USE(implicit_cast<TNode<BoolT>>(t584));
    Branch(implicit_cast<TNode<BoolT>>(t584), label__True_203, label__False_204);
    if (label__True_203->is_used())
    {
      BIND(label__True_203);
      // ../../src/builtins/typed-array.tq:98:46
      {
        // ../../src/builtins/typed-array.tq:99:7
        TNode<Object> t585 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*i_138).value())));
        USE(implicit_cast<TNode<Object>>(t585));
        TNode<Object> element_749_impl;
        auto element_749 = &element_749_impl;
        USE(element_749);
        *element_749 = implicit_cast<TNode<Object>>(t585);
        // ../../src/builtins/typed-array.tq:100:7
        int31_t t586 = 1;
        TNode<Smi> t587 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t586)));
        TNode<Smi> t588 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*i_138).value()), implicit_cast<TNode<Smi>>(t587)));
        USE(implicit_cast<TNode<Smi>>(t588));
        TVARIABLE(Smi, j_139_impl);
        auto j_139 = &j_139_impl;
        USE(j_139);
        *j_139 = implicit_cast<TNode<Smi>>(t588);
        // ../../src/builtins/typed-array.tq:101:7
        Label label__True_205_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label__True_205 = &label__True_205_impl;
        USE(label__True_205);
        Label label__False_206_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label__False_206 = &label__False_206_impl;
        USE(label__False_206);
        Label label_header_750_1402_impl(this, {j_139}, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_header_750_1402 = &label_header_750_1402_impl;
        USE(label_header_750_1402);
        Goto(label_header_750_1402);
        BIND(label_header_750_1402);
        Label label_action_751_1403_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
        Label* label_action_751_1403 = &label_action_751_1403_impl;
        USE(label_action_751_1403);
        TNode<BoolT> t589 = UncheckedCast<BoolT>(SmiGreaterThanOrEqual(implicit_cast<TNode<Smi>>((*j_139).value()), implicit_cast<TNode<Smi>>((*from_136).value())));
        USE(implicit_cast<TNode<BoolT>>(t589));
        Branch(implicit_cast<TNode<BoolT>>(t589), label__True_205, label__False_206);
        if (label__True_205->is_used())
        {
          BIND(label__True_205);
          // ../../src/builtins/typed-array.tq:101:30
          {
            // ../../src/builtins/typed-array.tq:102:9
            TNode<Object> t590 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*j_139).value())));
            USE(implicit_cast<TNode<Object>>(t590));
            TNode<Object> tmp_752_impl;
            auto tmp_752 = &tmp_752_impl;
            USE(tmp_752);
            *tmp_752 = implicit_cast<TNode<Object>>(t590);
            // ../../src/builtins/typed-array.tq:103:9
            TNode<Number> t591 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*tmp_752)), implicit_cast<TNode<Object>>((*element_749)), label_Detached_200));
            USE(implicit_cast<TNode<Number>>(t591));
            TNode<Number> order_753_impl;
            auto order_753 = &order_753_impl;
            USE(order_753);
            *order_753 = implicit_cast<TNode<Number>>(t591);
            // ../../src/builtins/typed-array.tq:105:9
            {
              Label label__True_207_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label__True_207 = &label__True_207_impl;
              USE(label__True_207);
              Label label__False_208_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label__False_208 = &label__False_208_impl;
              USE(label__False_208);
              Label label_if_done_label_754_1404_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
              Label* label_if_done_label_754_1404 = &label_if_done_label_754_1404_impl;
              USE(label_if_done_label_754_1404);
              int31_t t592 = 0;
              TNode<Number> t593 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t592)));
              BranchIfNumberGreaterThan(implicit_cast<TNode<Number>>((*order_753)), implicit_cast<TNode<Number>>(t593), label__True_207, label__False_208);
              if (label__True_207->is_used())
              {
                BIND(label__True_207);
                // ../../src/builtins/typed-array.tq:105:24
                {
                  // ../../src/builtins/typed-array.tq:106:11
                  int31_t t594 = 1;
                  TNode<Smi> t595 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t594)));
                  TNode<Smi> t596 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_139).value()), implicit_cast<TNode<Smi>>(t595)));
                  USE(implicit_cast<TNode<Smi>>(t596));
                  TNode<Object> t597 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>(t596), implicit_cast<TNode<Object>>((*tmp_752))));
                  USE(implicit_cast<TNode<Object>>(t597));
                }
                Goto(label_if_done_label_754_1404);
              }
              if (label__False_208->is_used())
              {
                BIND(label__False_208);
                // ../../src/builtins/typed-array.tq:107:16
                {
                  // ../../src/builtins/typed-array.tq:108:11
                  Goto(label__False_206);
                }
              }
              BIND(label_if_done_label_754_1404);
            }
          }
          Goto(label_action_751_1403);
        }
        {
          BIND(label_action_751_1403);
          TNode<Smi> t598 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
          TNode<Smi> t599 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*j_139).value()), implicit_cast<TNode<Smi>>(t598)));
          *j_139 = implicit_cast<TNode<Smi>>(t599);
          Goto(label_header_750_1402);
        }
        BIND(label__False_206);
        // ../../src/builtins/typed-array.tq:111:7
        int31_t t600 = 1;
        TNode<Smi> t601 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t600)));
        TNode<Smi> t602 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*j_139).value()), implicit_cast<TNode<Smi>>(t601)));
        USE(implicit_cast<TNode<Smi>>(t602));
        TNode<Object> t603 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>(t602), implicit_cast<TNode<Object>>((*element_749))));
        USE(implicit_cast<TNode<Object>>(t603));
      }
      Goto(label_action_748_1401);
    }
    {
      BIND(label_action_748_1401);
      TNode<Smi> t604 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
      TNode<Smi> t605 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*i_138).value()), implicit_cast<TNode<Smi>>(t604)));
      *i_138 = implicit_cast<TNode<Smi>>(t605);
      Goto(label_header_747_1400);
    }
    BIND(label__False_204);
  }
}

void TypedArrayBuiltinsFromDSLAssembler::TypedArrayQuickSortImpl(TNode<Context> p_context, TNode<JSTypedArray> p_array, TNode<Smi> p_fromArg, TNode<Smi> p_toArg, TNode<JSReceiver> p_comparefn, TNode<Code> p_load, TNode<Code> p_store, Label* label_Detached_209) {
  Label label_macro_end_1405_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
  Label* label_macro_end_1405 = &label_macro_end_1405_impl;
  USE(label_macro_end_1405);
  // ../../src/builtins/typed-array.tq:118:19
  {
    // ../../src/builtins/typed-array.tq:119:5
    TVARIABLE(Smi, from_140_impl);
    auto from_140 = &from_140_impl;
    USE(from_140);
    *from_140 = implicit_cast<TNode<Smi>>(p_fromArg);
    // ../../src/builtins/typed-array.tq:120:5
    TVARIABLE(Smi, to_141_impl);
    auto to_141 = &to_141_impl;
    USE(to_141);
    *to_141 = implicit_cast<TNode<Smi>>(p_toArg);
    // ../../src/builtins/typed-array.tq:122:5
    {
      Label label__True_210_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_210 = &label__True_210_impl;
      USE(label__True_210);
      Label label__False_211_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_211 = &label__False_211_impl;
      USE(label__False_211);
      Label label_header_755_1406_impl(this, {from_140, to_141}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_header_755_1406 = &label_header_755_1406_impl;
      USE(label_header_755_1406);
      Goto(label_header_755_1406);
      BIND(label_header_755_1406);
      TNode<Smi> t606 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>((*from_140).value())));
      USE(implicit_cast<TNode<Smi>>(t606));
      int31_t t607 = 1;
      TNode<Smi> t608 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t607)));
      TNode<BoolT> t609 = UncheckedCast<BoolT>(SmiGreaterThan(implicit_cast<TNode<Smi>>(t606), implicit_cast<TNode<Smi>>(t608)));
      USE(implicit_cast<TNode<BoolT>>(t609));
      Branch(implicit_cast<TNode<BoolT>>(t609), label__True_210, label__False_211);
      if (label__True_210->is_used())
      {
        BIND(label__True_210);
        // ../../src/builtins/typed-array.tq:122:27
        {
          // ../../src/builtins/typed-array.tq:123:7
          {
            Label label__True_212_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_212 = &label__True_212_impl;
            USE(label__True_212);
            Label label__False_213_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_213 = &label__False_213_impl;
            USE(label__False_213);
            TNode<Smi> t610 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>((*from_140).value())));
            USE(implicit_cast<TNode<Smi>>(t610));
            int31_t t611 = 10;
            TNode<Smi> t612 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t611)));
            TNode<BoolT> t613 = UncheckedCast<BoolT>(SmiLessThanOrEqual(implicit_cast<TNode<Smi>>(t610), implicit_cast<TNode<Smi>>(t612)));
            USE(implicit_cast<TNode<BoolT>>(t613));
            Branch(implicit_cast<TNode<BoolT>>(t613), label__True_212, label__False_213);
            if (label__True_212->is_used())
            {
              BIND(label__True_212);
              // ../../src/builtins/typed-array.tq:123:28
              {
                // ../../src/builtins/typed-array.tq:127:9
                TypedArrayInsertionSort(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*from_140).value()), implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Code>>(p_store), label_Detached_209);
                // ../../src/builtins/typed-array.tq:130:9
                Goto(label__False_211);
              }
            }
            BIND(label__False_213);
          }
          // ../../src/builtins/typed-array.tq:135:7
          TNode<Smi> t614 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>((*from_140).value())));
          USE(implicit_cast<TNode<Smi>>(t614));
          int31_t t615 = 1;
          TNode<Smi> t616 = UncheckedCast<Smi>(SmiShr(implicit_cast<TNode<Smi>>(t614), implicit_cast<int31_t>(t615)));
          USE(implicit_cast<TNode<Smi>>(t616));
          TNode<Smi> t617 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*from_140).value()), implicit_cast<TNode<Smi>>(t616)));
          USE(implicit_cast<TNode<Smi>>(t617));
          TNode<Smi> thirdIndex_756_impl;
          auto thirdIndex_756 = &thirdIndex_756_impl;
          USE(thirdIndex_756);
          *thirdIndex_756 = implicit_cast<TNode<Smi>>(t617);
          // ../../src/builtins/typed-array.tq:137:7
          {
            Label label__True_214_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_214 = &label__True_214_impl;
            USE(label__True_214);
            Label label__False_215_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_215 = &label__False_215_impl;
            USE(label__False_215);
            TNode<JSArrayBuffer> t618 = UncheckedCast<JSArrayBuffer>(LoadTypedArrayBuffer(implicit_cast<TNode<JSTypedArray>>(p_array)));
            TNode<BoolT> t619 = UncheckedCast<BoolT>(IsDetachedBuffer(implicit_cast<TNode<JSArrayBuffer>>(t618)));
            USE(implicit_cast<TNode<BoolT>>(t619));
            Branch(implicit_cast<TNode<BoolT>>(t619), label__True_214, label__False_215);
            if (label__True_214->is_used())
            {
              BIND(label__True_214);
              // ../../src/builtins/typed-array.tq:137:43
              Goto(label_Detached_209);
            }
            BIND(label__False_215);
          }
          // ../../src/builtins/typed-array.tq:140:7
          TNode<Object> t620 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*from_140).value())));
          USE(implicit_cast<TNode<Object>>(t620));
          TVARIABLE(Object, v0_142_impl);
          auto v0_142 = &v0_142_impl;
          USE(v0_142);
          *v0_142 = implicit_cast<TNode<Object>>(t620);
          // ../../src/builtins/typed-array.tq:141:7
          int31_t t621 = 1;
          TNode<Smi> t622 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t621)));
          TNode<Smi> t623 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>(t622)));
          USE(implicit_cast<TNode<Smi>>(t623));
          TNode<Object> t624 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>(t623)));
          USE(implicit_cast<TNode<Object>>(t624));
          TVARIABLE(Object, v1_143_impl);
          auto v1_143 = &v1_143_impl;
          USE(v1_143);
          *v1_143 = implicit_cast<TNode<Object>>(t624);
          // ../../src/builtins/typed-array.tq:142:7
          TNode<Object> t625 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*thirdIndex_756))));
          USE(implicit_cast<TNode<Object>>(t625));
          TVARIABLE(Object, v2_144_impl);
          auto v2_144 = &v2_144_impl;
          USE(v2_144);
          *v2_144 = implicit_cast<TNode<Object>>(t625);
          // ../../src/builtins/typed-array.tq:144:7
          TNode<Number> t626 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*v0_142).value()), implicit_cast<TNode<Object>>((*v1_143).value()), label_Detached_209));
          USE(implicit_cast<TNode<Number>>(t626));
          TNode<Number> c01_757_impl;
          auto c01_757 = &c01_757_impl;
          USE(c01_757);
          *c01_757 = implicit_cast<TNode<Number>>(t626);
          // ../../src/builtins/typed-array.tq:146:7
          {
            Label label__True_216_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_216 = &label__True_216_impl;
            USE(label__True_216);
            Label label__False_217_impl(this, {v0_142, v1_143}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_217 = &label__False_217_impl;
            USE(label__False_217);
            int31_t t627 = 0;
            TNode<Number> t628 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t627)));
            BranchIfNumberGreaterThan(implicit_cast<TNode<Number>>((*c01_757)), implicit_cast<TNode<Number>>(t628), label__True_216, label__False_217);
            if (label__True_216->is_used())
            {
              BIND(label__True_216);
              // ../../src/builtins/typed-array.tq:146:20
              {
                // ../../src/builtins/typed-array.tq:148:9
                TVARIABLE(Object, tmp_145_impl);
                auto tmp_145 = &tmp_145_impl;
                USE(tmp_145);
                *tmp_145 = implicit_cast<TNode<Object>>((*v0_142).value());
                // ../../src/builtins/typed-array.tq:149:9
                *v0_142 = implicit_cast<TNode<Object>>((*v1_143).value());
                // ../../src/builtins/typed-array.tq:150:9
                *v1_143 = implicit_cast<TNode<Object>>((*tmp_145).value());
              }
              Goto(label__False_217);
            }
            BIND(label__False_217);
          }
          // ../../src/builtins/typed-array.tq:153:7
          TNode<Number> t629 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*v0_142).value()), implicit_cast<TNode<Object>>((*v2_144).value()), label_Detached_209));
          USE(implicit_cast<TNode<Number>>(t629));
          TNode<Number> c02_758_impl;
          auto c02_758 = &c02_758_impl;
          USE(c02_758);
          *c02_758 = implicit_cast<TNode<Number>>(t629);
          // ../../src/builtins/typed-array.tq:155:7
          {
            Label label__True_218_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_218 = &label__True_218_impl;
            USE(label__True_218);
            Label label__False_219_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_219 = &label__False_219_impl;
            USE(label__False_219);
            Label label_if_done_label_759_1407_impl(this, {v0_142, v1_143, v2_144}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label_if_done_label_759_1407 = &label_if_done_label_759_1407_impl;
            USE(label_if_done_label_759_1407);
            int31_t t630 = 0;
            TNode<Number> t631 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t630)));
            BranchIfNumberGreaterThanOrEqual(implicit_cast<TNode<Number>>((*c02_758)), implicit_cast<TNode<Number>>(t631), label__True_218, label__False_219);
            if (label__True_218->is_used())
            {
              BIND(label__True_218);
              // ../../src/builtins/typed-array.tq:155:21
              {
                // ../../src/builtins/typed-array.tq:157:9
                TNode<Object> tmp_760_impl;
                auto tmp_760 = &tmp_760_impl;
                USE(tmp_760);
                *tmp_760 = implicit_cast<TNode<Object>>((*v0_142).value());
                // ../../src/builtins/typed-array.tq:158:9
                *v0_142 = implicit_cast<TNode<Object>>((*v2_144).value());
                // ../../src/builtins/typed-array.tq:159:9
                *v2_144 = implicit_cast<TNode<Object>>((*v1_143).value());
                // ../../src/builtins/typed-array.tq:160:9
                *v1_143 = implicit_cast<TNode<Object>>((*tmp_760));
              }
              Goto(label_if_done_label_759_1407);
            }
            if (label__False_219->is_used())
            {
              BIND(label__False_219);
              // ../../src/builtins/typed-array.tq:161:14
              {
                // ../../src/builtins/typed-array.tq:163:9
                TNode<Number> t632 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*v1_143).value()), implicit_cast<TNode<Object>>((*v2_144).value()), label_Detached_209));
                USE(implicit_cast<TNode<Number>>(t632));
                TNode<Number> c12_761_impl;
                auto c12_761 = &c12_761_impl;
                USE(c12_761);
                *c12_761 = implicit_cast<TNode<Number>>(t632);
                // ../../src/builtins/typed-array.tq:165:9
                {
                  Label label__True_220_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__True_220 = &label__True_220_impl;
                  USE(label__True_220);
                  Label label__False_221_impl(this, {v1_143, v2_144}, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__False_221 = &label__False_221_impl;
                  USE(label__False_221);
                  int31_t t633 = 0;
                  TNode<Number> t634 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t633)));
                  BranchIfNumberGreaterThan(implicit_cast<TNode<Number>>((*c12_761)), implicit_cast<TNode<Number>>(t634), label__True_220, label__False_221);
                  if (label__True_220->is_used())
                  {
                    BIND(label__True_220);
                    // ../../src/builtins/typed-array.tq:165:22
                    {
                      // ../../src/builtins/typed-array.tq:167:11
                      TNode<Object> tmp_762_impl;
                      auto tmp_762 = &tmp_762_impl;
                      USE(tmp_762);
                      *tmp_762 = implicit_cast<TNode<Object>>((*v1_143).value());
                      // ../../src/builtins/typed-array.tq:168:11
                      *v1_143 = implicit_cast<TNode<Object>>((*v2_144).value());
                      // ../../src/builtins/typed-array.tq:169:11
                      *v2_144 = implicit_cast<TNode<Object>>((*tmp_762));
                    }
                    Goto(label__False_221);
                  }
                  BIND(label__False_221);
                }
              }
              Goto(label_if_done_label_759_1407);
            }
            BIND(label_if_done_label_759_1407);
          }
          // ../../src/builtins/typed-array.tq:174:7
          TNode<Object> t635 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*from_140).value()), implicit_cast<TNode<Object>>((*v0_142).value())));
          USE(implicit_cast<TNode<Object>>(t635));
          // ../../src/builtins/typed-array.tq:175:7
          int31_t t636 = 1;
          TNode<Smi> t637 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t636)));
          TNode<Smi> t638 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>(t637)));
          USE(implicit_cast<TNode<Smi>>(t638));
          TNode<Object> t639 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>(t638), implicit_cast<TNode<Object>>((*v2_144).value())));
          USE(implicit_cast<TNode<Object>>(t639));
          // ../../src/builtins/typed-array.tq:177:7
          TNode<Object> pivot_763_impl;
          auto pivot_763 = &pivot_763_impl;
          USE(pivot_763);
          *pivot_763 = implicit_cast<TNode<Object>>((*v1_143).value());
          // ../../src/builtins/typed-array.tq:178:7
          int31_t t640 = 1;
          TNode<Smi> t641 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t640)));
          TNode<Smi> t642 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*from_140).value()), implicit_cast<TNode<Smi>>(t641)));
          USE(implicit_cast<TNode<Smi>>(t642));
          TVARIABLE(Smi, lowEnd_146_impl);
          auto lowEnd_146 = &lowEnd_146_impl;
          USE(lowEnd_146);
          *lowEnd_146 = implicit_cast<TNode<Smi>>(t642);
          // ../../src/builtins/typed-array.tq:179:7
          int31_t t643 = 1;
          TNode<Smi> t644 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t643)));
          TNode<Smi> t645 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>(t644)));
          USE(implicit_cast<TNode<Smi>>(t645));
          TVARIABLE(Smi, highStart_147_impl);
          auto highStart_147 = &highStart_147_impl;
          USE(highStart_147);
          *highStart_147 = implicit_cast<TNode<Smi>>(t645);
          // ../../src/builtins/typed-array.tq:181:7
          TNode<Object> t646 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value())));
          USE(implicit_cast<TNode<Object>>(t646));
          TVARIABLE(Object, lowEndValue_148_impl);
          auto lowEndValue_148 = &lowEndValue_148_impl;
          USE(lowEndValue_148);
          *lowEndValue_148 = implicit_cast<TNode<Object>>(t646);
          // ../../src/builtins/typed-array.tq:182:7
          TNode<Object> t647 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*thirdIndex_756)), implicit_cast<TNode<Object>>((*lowEndValue_148).value())));
          USE(implicit_cast<TNode<Object>>(t647));
          // ../../src/builtins/typed-array.tq:183:7
          TNode<Object> t648 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Object>>((*pivot_763))));
          USE(implicit_cast<TNode<Object>>(t648));
          // ../../src/builtins/typed-array.tq:187:7
          int31_t t649 = 1;
          TNode<Smi> t650 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t649)));
          TNode<Smi> t651 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Smi>>(t650)));
          USE(implicit_cast<TNode<Smi>>(t651));
          TVARIABLE(Smi, idx_149_impl);
          auto idx_149 = &idx_149_impl;
          USE(idx_149);
          *idx_149 = implicit_cast<TNode<Smi>>(t651);
          Label label__True_222_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__True_222 = &label__True_222_impl;
          USE(label__True_222);
          Label label__False_223_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label__False_223 = &label__False_223_impl;
          USE(label__False_223);
          Label label_header_764_1408_impl(this, {highStart_147, idx_149, lowEndValue_148, lowEnd_146}, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label_header_764_1408 = &label_header_764_1408_impl;
          USE(label_header_764_1408);
          Goto(label_header_764_1408);
          BIND(label_header_764_1408);
          Label label_action_765_1409_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
          Label* label_action_765_1409 = &label_action_765_1409_impl;
          USE(label_action_765_1409);
          TNode<BoolT> t652 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>((*idx_149).value()), implicit_cast<TNode<Smi>>((*highStart_147).value())));
          USE(implicit_cast<TNode<BoolT>>(t652));
          Branch(implicit_cast<TNode<BoolT>>(t652), label__True_222, label__False_223);
          if (label__True_222->is_used())
          {
            BIND(label__True_222);
            // ../../src/builtins/typed-array.tq:187:63
            {
              // ../../src/builtins/typed-array.tq:188:9
              TNode<Object> t653 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*idx_149).value())));
              USE(implicit_cast<TNode<Object>>(t653));
              TVARIABLE(Object, element_150_impl);
              auto element_150 = &element_150_impl;
              USE(element_150);
              *element_150 = implicit_cast<TNode<Object>>(t653);
              // ../../src/builtins/typed-array.tq:189:9
              TNode<Number> t654 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*element_150).value()), implicit_cast<TNode<Object>>((*pivot_763)), label_Detached_209));
              USE(implicit_cast<TNode<Number>>(t654));
              TVARIABLE(Number, order_151_impl);
              auto order_151 = &order_151_impl;
              USE(order_151);
              *order_151 = implicit_cast<TNode<Number>>(t654);
              // ../../src/builtins/typed-array.tq:192:9
              {
                Label label__True_224_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                Label* label__True_224 = &label__True_224_impl;
                USE(label__True_224);
                Label label__False_225_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                Label* label__False_225 = &label__False_225_impl;
                USE(label__False_225);
                Label label_if_done_label_766_1410_impl(this, {element_150, highStart_147, lowEndValue_148, lowEnd_146, order_151}, compiler::CodeAssemblerLabel::kNonDeferred);
                Label* label_if_done_label_766_1410 = &label_if_done_label_766_1410_impl;
                USE(label_if_done_label_766_1410);
                int31_t t655 = 0;
                TNode<Number> t656 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t655)));
                BranchIfNumberLessThan(implicit_cast<TNode<Number>>((*order_151).value()), implicit_cast<TNode<Number>>(t656), label__True_224, label__False_225);
                if (label__True_224->is_used())
                {
                  BIND(label__True_224);
                  // ../../src/builtins/typed-array.tq:192:24
                  {
                    // ../../src/builtins/typed-array.tq:193:11
                    TNode<Object> t657 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value())));
                    USE(implicit_cast<TNode<Object>>(t657));
                    *lowEndValue_148 = implicit_cast<TNode<Object>>(t657);
                    // ../../src/builtins/typed-array.tq:194:11
                    TNode<Object> t658 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*idx_149).value()), implicit_cast<TNode<Object>>((*lowEndValue_148).value())));
                    USE(implicit_cast<TNode<Object>>(t658));
                    // ../../src/builtins/typed-array.tq:195:11
                    TNode<Object> t659 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Object>>((*element_150).value())));
                    USE(implicit_cast<TNode<Object>>(t659));
                    // ../../src/builtins/typed-array.tq:196:11
                    TNode<Smi> t660 = implicit_cast<TNode<Smi>>((*lowEnd_146).value());
                    USE(t660);
                    TNode<Smi> t661 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
                    TNode<Smi> t662 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Smi>>(t661)));
                    *lowEnd_146 = implicit_cast<TNode<Smi>>(t662);
                  }
                  Goto(label_if_done_label_766_1410);
                }
                if (label__False_225->is_used())
                {
                  BIND(label__False_225);
                  // ../../src/builtins/typed-array.tq:197:16
                  {
                    Label label__True_226_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                    Label* label__True_226 = &label__True_226_impl;
                    USE(label__True_226);
                    Label label__False_227_impl(this, {element_150, highStart_147, lowEndValue_148, lowEnd_146, order_151}, compiler::CodeAssemblerLabel::kNonDeferred);
                    Label* label__False_227 = &label__False_227_impl;
                    USE(label__False_227);
                    int31_t t663 = 0;
                    TNode<Number> t664 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t663)));
                    BranchIfNumberGreaterThan(implicit_cast<TNode<Number>>((*order_151).value()), implicit_cast<TNode<Number>>(t664), label__True_226, label__False_227);
                    if (label__True_226->is_used())
                    {
                      BIND(label__True_226);
                      // ../../src/builtins/typed-array.tq:197:31
                      {
                        // ../../src/builtins/typed-array.tq:198:11
                        TVARIABLE(BoolT, breakFor_152_impl);
                        auto breakFor_152 = &breakFor_152_impl;
                        USE(breakFor_152);
                        TNode<BoolT> t665 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(false)));
                        *breakFor_152 = implicit_cast<TNode<BoolT>>(t665);
                        // ../../src/builtins/typed-array.tq:200:11
                        {
                          Label label__True_228_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__True_228 = &label__True_228_impl;
                          USE(label__True_228);
                          Label label__False_229_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__False_229 = &label__False_229_impl;
                          USE(label__False_229);
                          Label label_header_767_1411_impl(this, {breakFor_152, highStart_147, order_151}, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label_header_767_1411 = &label_header_767_1411_impl;
                          USE(label_header_767_1411);
                          Goto(label_header_767_1411);
                          BIND(label_header_767_1411);
                          int31_t t666 = 0;
                          TNode<Number> t667 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t666)));
                          BranchIfNumberGreaterThan(implicit_cast<TNode<Number>>((*order_151).value()), implicit_cast<TNode<Number>>(t667), label__True_228, label__False_229);
                          if (label__True_228->is_used())
                          {
                            BIND(label__True_228);
                            // ../../src/builtins/typed-array.tq:200:29
                            {
                              // ../../src/builtins/typed-array.tq:201:13
                              TNode<Smi> t668 = implicit_cast<TNode<Smi>>((*highStart_147).value());
                              USE(t668);
                              TNode<Smi> t669 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
                              TNode<Smi> t670 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*highStart_147).value()), implicit_cast<TNode<Smi>>(t669)));
                              *highStart_147 = implicit_cast<TNode<Smi>>(t670);
                              // ../../src/builtins/typed-array.tq:202:13
                              {
                                Label label__True_230_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                Label* label__True_230 = &label__True_230_impl;
                                USE(label__True_230);
                                Label label__False_231_impl(this, {breakFor_152}, compiler::CodeAssemblerLabel::kNonDeferred);
                                Label* label__False_231 = &label__False_231_impl;
                                USE(label__False_231);
                                TNode<BoolT> t671 = UncheckedCast<BoolT>(SmiEqual(implicit_cast<TNode<Smi>>((*highStart_147).value()), implicit_cast<TNode<Smi>>((*idx_149).value())));
                                USE(implicit_cast<TNode<BoolT>>(t671));
                                Branch(implicit_cast<TNode<BoolT>>(t671), label__True_230, label__False_231);
                                if (label__True_230->is_used())
                                {
                                  BIND(label__True_230);
                                  // ../../src/builtins/typed-array.tq:202:35
                                  {
                                    // ../../src/builtins/typed-array.tq:203:15
                                    TNode<BoolT> t672 = UncheckedCast<BoolT>(FromConstexpr6ATbool(implicit_cast<bool>(true)));
                                    *breakFor_152 = implicit_cast<TNode<BoolT>>(t672);
                                    // ../../src/builtins/typed-array.tq:204:15
                                    Goto(label__False_229);
                                  }
                                }
                                BIND(label__False_231);
                              }
                              // ../../src/builtins/typed-array.tq:207:13
                              TNode<Object> t673 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*highStart_147).value())));
                              USE(implicit_cast<TNode<Object>>(t673));
                              TNode<Object> topElement_768_impl;
                              auto topElement_768 = &topElement_768_impl;
                              USE(topElement_768);
                              *topElement_768 = implicit_cast<TNode<Object>>(t673);
                              // ../../src/builtins/typed-array.tq:208:13
                              TNode<Number> t674 = UncheckedCast<Number>(CallCompareWithDetachedCheck(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Object>>((*topElement_768)), implicit_cast<TNode<Object>>((*pivot_763)), label_Detached_209));
                              USE(implicit_cast<TNode<Number>>(t674));
                              *order_151 = implicit_cast<TNode<Number>>(t674);
                            }
                            Goto(label_header_767_1411);
                          }
                          BIND(label__False_229);
                        }
                        // ../../src/builtins/typed-array.tq:213:11
                        {
                          Label label__True_232_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__True_232 = &label__True_232_impl;
                          USE(label__True_232);
                          Label label__False_233_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__False_233 = &label__False_233_impl;
                          USE(label__False_233);
                          Branch(implicit_cast<TNode<BoolT>>((*breakFor_152).value()), label__True_232, label__False_233);
                          if (label__True_232->is_used())
                          {
                            BIND(label__True_232);
                            // ../../src/builtins/typed-array.tq:213:25
                            {
                              // ../../src/builtins/typed-array.tq:214:13
                              Goto(label__False_223);
                            }
                          }
                          BIND(label__False_233);
                        }
                        // ../../src/builtins/typed-array.tq:217:11
                        TNode<Object> t675 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*highStart_147).value())));
                        USE(implicit_cast<TNode<Object>>(t675));
                        TNode<Object> highStartValue_769_impl;
                        auto highStartValue_769 = &highStartValue_769_impl;
                        USE(highStartValue_769);
                        *highStartValue_769 = implicit_cast<TNode<Object>>(t675);
                        // ../../src/builtins/typed-array.tq:218:11
                        TNode<Object> t676 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*idx_149).value()), implicit_cast<TNode<Object>>((*highStartValue_769))));
                        USE(implicit_cast<TNode<Object>>(t676));
                        // ../../src/builtins/typed-array.tq:219:11
                        TNode<Object> t677 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*highStart_147).value()), implicit_cast<TNode<Object>>((*element_150).value())));
                        USE(implicit_cast<TNode<Object>>(t677));
                        // ../../src/builtins/typed-array.tq:221:11
                        {
                          Label label__True_234_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__True_234 = &label__True_234_impl;
                          USE(label__True_234);
                          Label label__False_235_impl(this, {element_150, lowEndValue_148, lowEnd_146}, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__False_235 = &label__False_235_impl;
                          USE(label__False_235);
                          int31_t t678 = 0;
                          TNode<Number> t679 = UncheckedCast<Number>(FromConstexpr22UT12ATHeapNumber5ATSmi(implicit_cast<int31_t>(t678)));
                          BranchIfNumberLessThan(implicit_cast<TNode<Number>>((*order_151).value()), implicit_cast<TNode<Number>>(t679), label__True_234, label__False_235);
                          if (label__True_234->is_used())
                          {
                            BIND(label__True_234);
                            // ../../src/builtins/typed-array.tq:221:26
                            {
                              // ../../src/builtins/typed-array.tq:222:13
                              TNode<Object> t680 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*idx_149).value())));
                              USE(implicit_cast<TNode<Object>>(t680));
                              *element_150 = implicit_cast<TNode<Object>>(t680);
                              // ../../src/builtins/typed-array.tq:224:13
                              TNode<Object> t681 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value())));
                              USE(implicit_cast<TNode<Object>>(t681));
                              *lowEndValue_148 = implicit_cast<TNode<Object>>(t681);
                              // ../../src/builtins/typed-array.tq:225:13
                              TNode<Object> t682 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*idx_149).value()), implicit_cast<TNode<Object>>((*lowEndValue_148).value())));
                              USE(implicit_cast<TNode<Object>>(t682));
                              // ../../src/builtins/typed-array.tq:226:13
                              TNode<Object> t683 = UncheckedCast<Object>(CallStub(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).descriptor(), implicit_cast<TNode<Code>>(p_store), implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Object>>((*element_150).value())));
                              USE(implicit_cast<TNode<Object>>(t683));
                              // ../../src/builtins/typed-array.tq:227:13
                              TNode<Smi> t684 = implicit_cast<TNode<Smi>>((*lowEnd_146).value());
                              USE(t684);
                              TNode<Smi> t685 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
                              TNode<Smi> t686 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Smi>>(t685)));
                              *lowEnd_146 = implicit_cast<TNode<Smi>>(t686);
                            }
                            Goto(label__False_235);
                          }
                          BIND(label__False_235);
                        }
                      }
                      Goto(label__False_227);
                    }
                    BIND(label__False_227);
                  }
                  Goto(label_if_done_label_766_1410);
                }
                BIND(label_if_done_label_766_1410);
              }
            }
            Goto(label_action_765_1409);
          }
          {
            BIND(label_action_765_1409);
            TNode<Smi> t687 = implicit_cast<TNode<Smi>>((*idx_149).value());
            USE(t687);
            TNode<Smi> t688 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(1)));
            TNode<Smi> t689 = UncheckedCast<Smi>(SmiAdd(implicit_cast<TNode<Smi>>((*idx_149).value()), implicit_cast<TNode<Smi>>(t688)));
            *idx_149 = implicit_cast<TNode<Smi>>(t689);
            Goto(label_header_764_1408);
          }
          BIND(label__False_223);
          // ../../src/builtins/typed-array.tq:232:7
          {
            Label label__True_236_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_236 = &label__True_236_impl;
            USE(label__True_236);
            Label label__False_237_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_237 = &label__False_237_impl;
            USE(label__False_237);
            Label label_if_done_label_770_1412_impl(this, {from_140, to_141}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label_if_done_label_770_1412 = &label_if_done_label_770_1412_impl;
            USE(label_if_done_label_770_1412);
            TNode<Smi> t690 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<Smi>>((*highStart_147).value())));
            USE(implicit_cast<TNode<Smi>>(t690));
            TNode<Smi> t691 = UncheckedCast<Smi>(SmiSub(implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<Smi>>((*from_140).value())));
            USE(implicit_cast<TNode<Smi>>(t691));
            TNode<BoolT> t692 = UncheckedCast<BoolT>(SmiLessThan(implicit_cast<TNode<Smi>>(t690), implicit_cast<TNode<Smi>>(t691)));
            USE(implicit_cast<TNode<BoolT>>(t692));
            Branch(implicit_cast<TNode<BoolT>>(t692), label__True_236, label__False_237);
            if (label__True_236->is_used())
            {
              BIND(label__True_236);
              // ../../src/builtins/typed-array.tq:232:47
              {
                // ../../src/builtins/typed-array.tq:233:9
                TNode<JSTypedArray> t693 = UncheckedCast<JSTypedArray>(CallBuiltin(Builtins::kTypedArrayQuickSort, implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*highStart_147).value()), implicit_cast<TNode<Smi>>((*to_141).value()), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Code>>(p_store)));
                USE(implicit_cast<TNode<JSTypedArray>>(t693));
                // ../../src/builtins/typed-array.tq:235:9
                *to_141 = implicit_cast<TNode<Smi>>((*lowEnd_146).value());
              }
              Goto(label_if_done_label_770_1412);
            }
            if (label__False_237->is_used())
            {
              BIND(label__False_237);
              // ../../src/builtins/typed-array.tq:236:14
              {
                // ../../src/builtins/typed-array.tq:237:9
                TNode<JSTypedArray> t694 = UncheckedCast<JSTypedArray>(CallBuiltin(Builtins::kTypedArrayQuickSort, implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>((*from_140).value()), implicit_cast<TNode<Smi>>((*lowEnd_146).value()), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Code>>(p_store)));
                USE(implicit_cast<TNode<JSTypedArray>>(t694));
                // ../../src/builtins/typed-array.tq:239:9
                *from_140 = implicit_cast<TNode<Smi>>((*highStart_147).value());
              }
              Goto(label_if_done_label_770_1412);
            }
            BIND(label_if_done_label_770_1412);
          }
        }
        Goto(label_header_755_1406);
      }
      BIND(label__False_211);
    }
  }
}

TF_BUILTIN(TypedArrayQuickSort, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_from = UncheckedCast<Smi>(Parameter(Descriptor::kFrom));
  USE(p_from);
  TNode<Smi> p_to = UncheckedCast<Smi>(Parameter(Descriptor::kTo));
  USE(p_to);
  TNode<JSReceiver> p_comparefn = UncheckedCast<JSReceiver>(Parameter(Descriptor::kComparefn));
  USE(p_comparefn);
  TNode<Code> p_load = UncheckedCast<Code>(Parameter(Descriptor::kLoad));
  USE(p_load);
  TNode<Code> p_store = UncheckedCast<Code>(Parameter(Descriptor::kStore));
  USE(p_store);
  // ../../src/builtins/typed-array.tq:246:72
  {
    // ../../src/builtins/typed-array.tq:247:5
    {
      Label label_try_done_771_1413_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_771_1413 = &label_try_done_771_1413_impl;
      USE(label_try_done_771_1413);
      Label label_Detached_238_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_Detached_238 = &label_Detached_238_impl;
      USE(label_Detached_238);
      Label label_try_begin_772_1414_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_772_1414 = &label_try_begin_772_1414_impl;
      USE(label_try_begin_772_1414);
      Goto(label_try_begin_772_1414);
      if (label_try_begin_772_1414->is_used())
      {
        BIND(label_try_begin_772_1414);
        // ../../src/builtins/typed-array.tq:247:9
        {
          // ../../src/builtins/typed-array.tq:248:7
          TypedArrayQuickSortImpl(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>(p_array), implicit_cast<TNode<Smi>>(p_from), implicit_cast<TNode<Smi>>(p_to), implicit_cast<TNode<JSReceiver>>(p_comparefn), implicit_cast<TNode<Code>>(p_load), implicit_cast<TNode<Code>>(p_store), label_Detached_238);
        }
        Goto(label_try_done_771_1413);
      }
      if (label_Detached_238->is_used())
      {
        BIND(label_Detached_238);
        // ../../src/builtins/typed-array.tq:251:20
        {
          // ../../src/builtins/typed-array.tq:252:7
          const char* t695 = "%TypedArray%.prototype.sort";
          TNode<Object> t696 = UncheckedCast<Object>(FromConstexpr22UT12ATHeapObject5ATSmi(implicit_cast<const char*>(t695)));
          ThrowTypeError(implicit_cast<TNode<Context>>(p_context), implicit_cast<MessageTemplate::Template>(MessageTemplate::kDetachedOperation), implicit_cast<TNode<Object>>(t696));
        }
      }
      BIND(label_try_done_771_1413);
    }
    // ../../src/builtins/typed-array.tq:255:5
    Return(implicit_cast<TNode<JSTypedArray>>(p_array));
  }
}

TF_BUILTIN(TypedArrayPrototypeSort, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  Node* argc = Parameter(Descriptor::kJSActualArgumentsCount);
  CodeStubArguments arguments_impl(this, ChangeInt32ToIntPtr(argc));
  TNode<Object> p_receiver = arguments_impl.GetReceiver();
  auto arguments = &arguments_impl;
  USE(arguments);
  USE(p_receiver);
  // ../../src/builtins/typed-array.tq:260:71
  {
    // ../../src/builtins/typed-array.tq:263:5
    auto t697 = [=]() {
      int31_t t699 = 0;
      TNode<IntPtrT> t700 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t699)));
      TNode<Object> t701 = UncheckedCast<Object>(GetArgumentValue(implicit_cast<CodeStubArguments*>(arguments), implicit_cast<TNode<IntPtrT>>(t700)));
      return implicit_cast<TNode<Object>>(t701);
    };
    auto t698 = [=]() {
      return implicit_cast<TNode<Oddball>>(Undefined());
    };
    TVARIABLE(Object, t702_773_impl);
    auto t702_773 = &t702_773_impl;
    USE(t702_773);
    {
      Label label__True_239_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_239 = &label__True_239_impl;
      USE(label__True_239);
      Label label__False_240_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_240 = &label__False_240_impl;
      USE(label__False_240);
      Label label__done_774_1415_impl(this, {t702_773}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__done_774_1415 = &label__done_774_1415_impl;
      USE(label__done_774_1415);
      TNode<IntPtrT> t703 = UncheckedCast<IntPtrT>(GetArgumentsLength(implicit_cast<CodeStubArguments*>(arguments)));
      int31_t t704 = 0;
      TNode<IntPtrT> t705 = UncheckedCast<IntPtrT>(FromConstexpr8ATintptr(implicit_cast<int31_t>(t704)));
      TNode<BoolT> t706 = UncheckedCast<BoolT>(IntPtrGreaterThan(implicit_cast<TNode<IntPtrT>>(t703), implicit_cast<TNode<IntPtrT>>(t705)));
      USE(implicit_cast<TNode<BoolT>>(t706));
      Branch(implicit_cast<TNode<BoolT>>(t706), label__True_239, label__False_240);
      BIND(label__True_239);
            *t702_773 = implicit_cast<TNode<Object>>(t697());
      Goto(label__done_774_1415);
      BIND(label__False_240);
            *t702_773 = implicit_cast<TNode<Object>>(t698());
      Goto(label__done_774_1415);
      BIND(label__done_774_1415);
    }
    TNode<Object> comparefnObj_775_impl;
    auto comparefnObj_775 = &comparefnObj_775_impl;
    USE(comparefnObj_775);
    *comparefnObj_775 = implicit_cast<TNode<Object>>((*t702_773).value());
    // ../../src/builtins/typed-array.tq:265:5
    {
      Label label__True_241_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_241 = &label__True_241_impl;
      USE(label__True_241);
      Label label__False_242_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_242 = &label__False_242_impl;
      USE(label__False_242);
      Label label__True_243_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_243 = &label__True_243_impl;
      USE(label__True_243);
      TNode<BoolT> t707 = UncheckedCast<BoolT>(WordNotEqual(implicit_cast<TNode<Object>>((*comparefnObj_775)), implicit_cast<TNode<Object>>(Undefined())));
      USE(implicit_cast<TNode<BoolT>>(t707));
      GotoIfNot(implicit_cast<TNode<BoolT>>(t707), label__False_242);
      TNode<BoolT> t708 = UncheckedCast<BoolT>(TaggedIsCallable(implicit_cast<TNode<Object>>((*comparefnObj_775))));
      USE(implicit_cast<TNode<BoolT>>(t708));
      TNode<BoolT> t709 = UncheckedCast<BoolT>(Word32BinaryNot(implicit_cast<TNode<BoolT>>(t708)));
      USE(implicit_cast<TNode<BoolT>>(t709));
Branch(implicit_cast<TNode<BoolT>>(t709), label__True_241, label__False_242);
      if (label__True_241->is_used())
      {
        BIND(label__True_241);
        // ../../src/builtins/typed-array.tq:265:71
        {
          // ../../src/builtins/typed-array.tq:266:7
          ThrowTypeError(implicit_cast<TNode<Context>>(p_context), implicit_cast<MessageTemplate::Template>(MessageTemplate::kBadSortComparisonFunction), implicit_cast<TNode<Object>>((*comparefnObj_775)));
        }
      }
      BIND(label__False_242);
    }
    // ../../src/builtins/typed-array.tq:270:5
    TNode<Object> obj_776_impl;
    auto obj_776 = &obj_776_impl;
    USE(obj_776);
    *obj_776 = implicit_cast<TNode<Object>>(p_receiver);
    // ../../src/builtins/typed-array.tq:274:5
    const char* t710 = "%TypedArray%.prototype.sort";
    TNode<JSTypedArray> t711 = UncheckedCast<JSTypedArray>(ValidateTypedArray(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<Object>>((*obj_776)), implicit_cast<const char*>(t710)));
    USE(implicit_cast<TNode<JSTypedArray>>(t711));
    TNode<JSTypedArray> array_777_impl;
    auto array_777 = &array_777_impl;
    USE(array_777);
    *array_777 = implicit_cast<TNode<JSTypedArray>>(t711);
    // ../../src/builtins/typed-array.tq:278:5
    {
      Label label__True_244_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__True_244 = &label__True_244_impl;
      USE(label__True_244);
      Label label__False_245_impl(this, {}, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label__False_245 = &label__False_245_impl;
      USE(label__False_245);
      TNode<BoolT> t712 = UncheckedCast<BoolT>(WordEqual(implicit_cast<TNode<Object>>((*comparefnObj_775)), implicit_cast<TNode<Object>>(Undefined())));
      USE(implicit_cast<TNode<BoolT>>(t712));
      Branch(implicit_cast<TNode<BoolT>>(t712), label__True_244, label__False_245);
      if (label__True_244->is_used())
      {
        BIND(label__True_244);
        // ../../src/builtins/typed-array.tq:278:36
        {
          // ../../src/builtins/typed-array.tq:279:7
          TNode<JSTypedArray> t713 = UncheckedCast<JSTypedArray>(CallRuntime(Runtime::kTypedArraySortFast, implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<Object>>((*obj_776))));
          USE(implicit_cast<TNode<JSTypedArray>>(t713));
          arguments->PopAndReturn(implicit_cast<TNode<JSTypedArray>>(t713));
        }
      }
      BIND(label__False_245);
    }
    // ../../src/builtins/typed-array.tq:283:5
    TNode<Smi> t714 = UncheckedCast<Smi>(LoadJSTypedArrayLength(implicit_cast<TNode<JSTypedArray>>((*array_777))));
    TNode<Smi> len_778_impl;
    auto len_778 = &len_778_impl;
    USE(len_778);
    *len_778 = implicit_cast<TNode<Smi>>(t714);
    // ../../src/builtins/typed-array.tq:285:5
    {
      Label label_try_done_779_1416_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_done_779_1416 = &label_try_done_779_1416_impl;
      USE(label_try_done_779_1416);
      Label label_CastError_246_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_CastError_246 = &label_CastError_246_impl;
      USE(label_CastError_246);
      Label label_try_begin_780_1417_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
      Label* label_try_begin_780_1417 = &label_try_begin_780_1417_impl;
      USE(label_try_begin_780_1417);
      Goto(label_try_begin_780_1417);
      if (label_try_begin_780_1417->is_used())
      {
        BIND(label_try_begin_780_1417);
        // ../../src/builtins/typed-array.tq:285:9
        {
          // ../../src/builtins/typed-array.tq:286:7
          TNode<JSReceiver> t715 = UncheckedCast<JSReceiver>(Cast45UT17ATJSBoundFunction12ATJSFunction9ATJSProxy(implicit_cast<TNode<Object>>((*comparefnObj_775)), label_CastError_246));
          USE(implicit_cast<TNode<JSReceiver>>(t715));
          TNode<JSReceiver> comparefn_781_impl;
          auto comparefn_781 = &comparefn_781_impl;
          USE(comparefn_781);
          *comparefn_781 = implicit_cast<TNode<JSReceiver>>(t715);
          // ../../src/builtins/typed-array.tq:288:7
          TVARIABLE(Code, loadfn_153_impl);
          auto loadfn_153 = &loadfn_153_impl;
          USE(loadfn_153);
          // ../../src/builtins/typed-array.tq:289:7
          TVARIABLE(Code, storefn_154_impl);
          auto storefn_154 = &storefn_154_impl;
          USE(storefn_154);
          // ../../src/builtins/typed-array.tq:291:7
          TNode<Int32T> t716 = UncheckedCast<Int32T>(LoadElementsKind(implicit_cast<TNode<JSTypedArray>>((*array_777))));
          TVARIABLE(Int32T, elementsKind_155_impl);
          auto elementsKind_155 = &elementsKind_155_impl;
          USE(elementsKind_155);
          *elementsKind_155 = implicit_cast<TNode<Int32T>>(t716);
          // ../../src/builtins/typed-array.tq:293:7
          {
            Label label__True_247_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__True_247 = &label__True_247_impl;
            USE(label__True_247);
            Label label__False_248_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label__False_248 = &label__False_248_impl;
            USE(label__False_248);
            Label label_if_done_label_782_1418_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
            Label* label_if_done_label_782_1418 = &label_if_done_label_782_1418_impl;
            USE(label_if_done_label_782_1418);
            TNode<BoolT> t717 = UncheckedCast<BoolT>(IsElementsKindGreaterThan(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<ElementsKind>(UINT32_ELEMENTS)));
            USE(implicit_cast<TNode<BoolT>>(t717));
            Branch(implicit_cast<TNode<BoolT>>(t717), label__True_247, label__False_248);
            if (label__True_247->is_used())
            {
              BIND(label__True_247);
              // ../../src/builtins/typed-array.tq:293:69
              {
                // ../../src/builtins/typed-array.tq:294:9
                {
                  Label label__True_249_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__True_249 = &label__True_249_impl;
                  USE(label__True_249);
                  Label label__False_250_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__False_250 = &label__False_250_impl;
                  USE(label__False_250);
                  Label label_if_done_label_783_1419_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label_if_done_label_783_1419 = &label_if_done_label_783_1419_impl;
                  USE(label_if_done_label_783_1419);
                  TNode<Int32T> t718 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(INT32_ELEMENTS)));
                  TNode<BoolT> t719 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t718)));
                  USE(implicit_cast<TNode<BoolT>>(t719));
                  Branch(implicit_cast<TNode<BoolT>>(t719), label__True_249, label__False_250);
                  if (label__True_249->is_used())
                  {
                    BIND(label__True_249);
                    // ../../src/builtins/typed-array.tq:294:45
                    {
                      // ../../src/builtins/typed-array.tq:295:11
                      *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt32Array).code()));
                      // ../../src/builtins/typed-array.tq:296:11
                      *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt32Array).code()));
                    }
                    Goto(label_if_done_label_783_1419);
                  }
                  if (label__False_250->is_used())
                  {
                    BIND(label__False_250);
                    // ../../src/builtins/typed-array.tq:297:16
                    {
                      Label label__True_251_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label__True_251 = &label__True_251_impl;
                      USE(label__True_251);
                      Label label__False_252_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label__False_252 = &label__False_252_impl;
                      USE(label__False_252);
                      Label label_if_done_label_784_1420_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label_if_done_label_784_1420 = &label_if_done_label_784_1420_impl;
                      USE(label_if_done_label_784_1420);
                      TNode<Int32T> t720 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(FLOAT32_ELEMENTS)));
                      TNode<BoolT> t721 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t720)));
                      USE(implicit_cast<TNode<BoolT>>(t721));
                      Branch(implicit_cast<TNode<BoolT>>(t721), label__True_251, label__False_252);
                      if (label__True_251->is_used())
                      {
                        BIND(label__True_251);
                        // ../../src/builtins/typed-array.tq:297:54
                        {
                          // ../../src/builtins/typed-array.tq:298:11
                          *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement19ATFixedFloat32Array).code()));
                          // ../../src/builtins/typed-array.tq:299:11
                          *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement19ATFixedFloat32Array).code()));
                        }
                        Goto(label_if_done_label_784_1420);
                      }
                      if (label__False_252->is_used())
                      {
                        BIND(label__False_252);
                        // ../../src/builtins/typed-array.tq:300:16
                        {
                          Label label__True_253_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__True_253 = &label__True_253_impl;
                          USE(label__True_253);
                          Label label__False_254_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__False_254 = &label__False_254_impl;
                          USE(label__False_254);
                          Label label_if_done_label_785_1421_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label_if_done_label_785_1421 = &label_if_done_label_785_1421_impl;
                          USE(label_if_done_label_785_1421);
                          TNode<Int32T> t722 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(FLOAT64_ELEMENTS)));
                          TNode<BoolT> t723 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t722)));
                          USE(implicit_cast<TNode<BoolT>>(t723));
                          Branch(implicit_cast<TNode<BoolT>>(t723), label__True_253, label__False_254);
                          if (label__True_253->is_used())
                          {
                            BIND(label__True_253);
                            // ../../src/builtins/typed-array.tq:300:54
                            {
                              // ../../src/builtins/typed-array.tq:301:11
                              *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement19ATFixedFloat64Array).code()));
                              // ../../src/builtins/typed-array.tq:302:11
                              *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement19ATFixedFloat64Array).code()));
                            }
                            Goto(label_if_done_label_785_1421);
                          }
                          if (label__False_254->is_used())
                          {
                            BIND(label__False_254);
                            // ../../src/builtins/typed-array.tq:303:16
                            {
                              Label label__True_255_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label__True_255 = &label__True_255_impl;
                              USE(label__True_255);
                              Label label__False_256_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label__False_256 = &label__False_256_impl;
                              USE(label__False_256);
                              Label label_if_done_label_786_1422_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label_if_done_label_786_1422 = &label_if_done_label_786_1422_impl;
                              USE(label_if_done_label_786_1422);
                              TNode<Int32T> t724 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(UINT8_CLAMPED_ELEMENTS)));
                              TNode<BoolT> t725 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t724)));
                              USE(implicit_cast<TNode<BoolT>>(t725));
                              Branch(implicit_cast<TNode<BoolT>>(t725), label__True_255, label__False_256);
                              if (label__True_255->is_used())
                              {
                                BIND(label__True_255);
                                // ../../src/builtins/typed-array.tq:303:60
                                {
                                  // ../../src/builtins/typed-array.tq:304:11
                                  *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement24ATFixedUint8ClampedArray).code()));
                                  // ../../src/builtins/typed-array.tq:305:11
                                  *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement24ATFixedUint8ClampedArray).code()));
                                }
                                Goto(label_if_done_label_786_1422);
                              }
                              if (label__False_256->is_used())
                              {
                                BIND(label__False_256);
                                // ../../src/builtins/typed-array.tq:306:16
                                {
                                  Label label__True_257_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label__True_257 = &label__True_257_impl;
                                  USE(label__True_257);
                                  Label label__False_258_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label__False_258 = &label__False_258_impl;
                                  USE(label__False_258);
                                  Label label_if_done_label_787_1423_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label_if_done_label_787_1423 = &label_if_done_label_787_1423_impl;
                                  USE(label_if_done_label_787_1423);
                                  TNode<Int32T> t726 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(BIGUINT64_ELEMENTS)));
                                  TNode<BoolT> t727 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t726)));
                                  USE(implicit_cast<TNode<BoolT>>(t727));
                                  Branch(implicit_cast<TNode<BoolT>>(t727), label__True_257, label__False_258);
                                  if (label__True_257->is_used())
                                  {
                                    BIND(label__True_257);
                                    // ../../src/builtins/typed-array.tq:306:56
                                    {
                                      // ../../src/builtins/typed-array.tq:307:11
                                      *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement21ATFixedBigUint64Array).code()));
                                      // ../../src/builtins/typed-array.tq:308:11
                                      *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement21ATFixedBigUint64Array).code()));
                                    }
                                    Goto(label_if_done_label_787_1423);
                                  }
                                  if (label__False_258->is_used())
                                  {
                                    BIND(label__False_258);
                                    // ../../src/builtins/typed-array.tq:309:16
                                    {
                                      Label label__True_259_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                      Label* label__True_259 = &label__True_259_impl;
                                      USE(label__True_259);
                                      Label label__False_260_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                      Label* label__False_260 = &label__False_260_impl;
                                      USE(label__False_260);
                                      Label label_if_done_label_788_1424_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                                      Label* label_if_done_label_788_1424 = &label_if_done_label_788_1424_impl;
                                      USE(label_if_done_label_788_1424);
                                      TNode<Int32T> t728 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(BIGINT64_ELEMENTS)));
                                      TNode<BoolT> t729 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t728)));
                                      USE(implicit_cast<TNode<BoolT>>(t729));
                                      Branch(implicit_cast<TNode<BoolT>>(t729), label__True_259, label__False_260);
                                      if (label__True_259->is_used())
                                      {
                                        BIND(label__True_259);
                                        // ../../src/builtins/typed-array.tq:309:55
                                        {
                                          // ../../src/builtins/typed-array.tq:310:11
                                          *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement20ATFixedBigInt64Array).code()));
                                          // ../../src/builtins/typed-array.tq:311:11
                                          *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement20ATFixedBigInt64Array).code()));
                                        }
                                        Goto(label_if_done_label_788_1424);
                                      }
                                      if (label__False_260->is_used())
                                      {
                                        BIND(label__False_260);
                                        // ../../src/builtins/typed-array.tq:312:16
                                        {
                                          // ../../src/builtins/typed-array.tq:313:11
                                          Unreachable();
                                        }
                                      }
                                      BIND(label_if_done_label_788_1424);
                                    }
                                    Goto(label_if_done_label_787_1423);
                                  }
                                  BIND(label_if_done_label_787_1423);
                                }
                                Goto(label_if_done_label_786_1422);
                              }
                              BIND(label_if_done_label_786_1422);
                            }
                            Goto(label_if_done_label_785_1421);
                          }
                          BIND(label_if_done_label_785_1421);
                        }
                        Goto(label_if_done_label_784_1420);
                      }
                      BIND(label_if_done_label_784_1420);
                    }
                    Goto(label_if_done_label_783_1419);
                  }
                  BIND(label_if_done_label_783_1419);
                }
              }
              Goto(label_if_done_label_782_1418);
            }
            if (label__False_248->is_used())
            {
              BIND(label__False_248);
              // ../../src/builtins/typed-array.tq:315:14
              {
                // ../../src/builtins/typed-array.tq:316:9
                {
                  Label label__True_261_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__True_261 = &label__True_261_impl;
                  USE(label__True_261);
                  Label label__False_262_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label__False_262 = &label__False_262_impl;
                  USE(label__False_262);
                  Label label_if_done_label_789_1425_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                  Label* label_if_done_label_789_1425 = &label_if_done_label_789_1425_impl;
                  USE(label_if_done_label_789_1425);
                  TNode<Int32T> t730 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(UINT8_ELEMENTS)));
                  TNode<BoolT> t731 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t730)));
                  USE(implicit_cast<TNode<BoolT>>(t731));
                  Branch(implicit_cast<TNode<BoolT>>(t731), label__True_261, label__False_262);
                  if (label__True_261->is_used())
                  {
                    BIND(label__True_261);
                    // ../../src/builtins/typed-array.tq:316:45
                    {
                      // ../../src/builtins/typed-array.tq:317:11
                      *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedUint8Array).code()));
                      // ../../src/builtins/typed-array.tq:318:11
                      *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedUint8Array).code()));
                    }
                    Goto(label_if_done_label_789_1425);
                  }
                  if (label__False_262->is_used())
                  {
                    BIND(label__False_262);
                    // ../../src/builtins/typed-array.tq:319:16
                    {
                      Label label__True_263_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label__True_263 = &label__True_263_impl;
                      USE(label__True_263);
                      Label label__False_264_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label__False_264 = &label__False_264_impl;
                      USE(label__False_264);
                      Label label_if_done_label_790_1426_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                      Label* label_if_done_label_790_1426 = &label_if_done_label_790_1426_impl;
                      USE(label_if_done_label_790_1426);
                      TNode<Int32T> t732 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(INT8_ELEMENTS)));
                      TNode<BoolT> t733 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t732)));
                      USE(implicit_cast<TNode<BoolT>>(t733));
                      Branch(implicit_cast<TNode<BoolT>>(t733), label__True_263, label__False_264);
                      if (label__True_263->is_used())
                      {
                        BIND(label__True_263);
                        // ../../src/builtins/typed-array.tq:319:51
                        {
                          // ../../src/builtins/typed-array.tq:320:11
                          *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement16ATFixedInt8Array).code()));
                          // ../../src/builtins/typed-array.tq:321:11
                          *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement16ATFixedInt8Array).code()));
                        }
                        Goto(label_if_done_label_790_1426);
                      }
                      if (label__False_264->is_used())
                      {
                        BIND(label__False_264);
                        // ../../src/builtins/typed-array.tq:322:16
                        {
                          Label label__True_265_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__True_265 = &label__True_265_impl;
                          USE(label__True_265);
                          Label label__False_266_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label__False_266 = &label__False_266_impl;
                          USE(label__False_266);
                          Label label_if_done_label_791_1427_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                          Label* label_if_done_label_791_1427 = &label_if_done_label_791_1427_impl;
                          USE(label_if_done_label_791_1427);
                          TNode<Int32T> t734 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(UINT16_ELEMENTS)));
                          TNode<BoolT> t735 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t734)));
                          USE(implicit_cast<TNode<BoolT>>(t735));
                          Branch(implicit_cast<TNode<BoolT>>(t735), label__True_265, label__False_266);
                          if (label__True_265->is_used())
                          {
                            BIND(label__True_265);
                            // ../../src/builtins/typed-array.tq:322:53
                            {
                              // ../../src/builtins/typed-array.tq:323:11
                              *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement18ATFixedUint16Array).code()));
                              // ../../src/builtins/typed-array.tq:324:11
                              *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement18ATFixedUint16Array).code()));
                            }
                            Goto(label_if_done_label_791_1427);
                          }
                          if (label__False_266->is_used())
                          {
                            BIND(label__False_266);
                            // ../../src/builtins/typed-array.tq:325:16
                            {
                              Label label__True_267_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label__True_267 = &label__True_267_impl;
                              USE(label__True_267);
                              Label label__False_268_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label__False_268 = &label__False_268_impl;
                              USE(label__False_268);
                              Label label_if_done_label_792_1428_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                              Label* label_if_done_label_792_1428 = &label_if_done_label_792_1428_impl;
                              USE(label_if_done_label_792_1428);
                              TNode<Int32T> t736 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(INT16_ELEMENTS)));
                              TNode<BoolT> t737 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t736)));
                              USE(implicit_cast<TNode<BoolT>>(t737));
                              Branch(implicit_cast<TNode<BoolT>>(t737), label__True_267, label__False_268);
                              if (label__True_267->is_used())
                              {
                                BIND(label__True_267);
                                // ../../src/builtins/typed-array.tq:325:52
                                {
                                  // ../../src/builtins/typed-array.tq:326:11
                                  *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement17ATFixedInt16Array).code()));
                                  // ../../src/builtins/typed-array.tq:327:11
                                  *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement17ATFixedInt16Array).code()));
                                }
                                Goto(label_if_done_label_792_1428);
                              }
                              if (label__False_268->is_used())
                              {
                                BIND(label__False_268);
                                // ../../src/builtins/typed-array.tq:328:16
                                {
                                  Label label__True_269_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label__True_269 = &label__True_269_impl;
                                  USE(label__True_269);
                                  Label label__False_270_impl(this, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label__False_270 = &label__False_270_impl;
                                  USE(label__False_270);
                                  Label label_if_done_label_793_1429_impl(this, {loadfn_153, storefn_154}, compiler::CodeAssemblerLabel::kNonDeferred);
                                  Label* label_if_done_label_793_1429 = &label_if_done_label_793_1429_impl;
                                  USE(label_if_done_label_793_1429);
                                  TNode<Int32T> t738 = UncheckedCast<Int32T>(FromConstexpr14ATElementsKind(implicit_cast<ElementsKind>(UINT32_ELEMENTS)));
                                  TNode<BoolT> t739 = UncheckedCast<BoolT>(ElementsKindEqual(implicit_cast<TNode<Int32T>>((*elementsKind_155).value()), implicit_cast<TNode<Int32T>>(t738)));
                                  USE(implicit_cast<TNode<BoolT>>(t739));
                                  Branch(implicit_cast<TNode<BoolT>>(t739), label__True_269, label__False_270);
                                  if (label__True_269->is_used())
                                  {
                                    BIND(label__True_269);
                                    // ../../src/builtins/typed-array.tq:328:53
                                    {
                                      // ../../src/builtins/typed-array.tq:329:11
                                      *loadfn_153 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kLoadFixedElement18ATFixedUint32Array).code()));
                                      // ../../src/builtins/typed-array.tq:330:11
                                      *storefn_154 = implicit_cast<TNode<Code>>(HeapConstant(Builtins::CallableFor(isolate(), Builtins::kStoreFixedElement18ATFixedUint32Array).code()));
                                    }
                                    Goto(label_if_done_label_793_1429);
                                  }
                                  if (label__False_270->is_used())
                                  {
                                    BIND(label__False_270);
                                    // ../../src/builtins/typed-array.tq:331:16
                                    {
                                      // ../../src/builtins/typed-array.tq:332:11
                                      Unreachable();
                                    }
                                  }
                                  BIND(label_if_done_label_793_1429);
                                }
                                Goto(label_if_done_label_792_1428);
                              }
                              BIND(label_if_done_label_792_1428);
                            }
                            Goto(label_if_done_label_791_1427);
                          }
                          BIND(label_if_done_label_791_1427);
                        }
                        Goto(label_if_done_label_790_1426);
                      }
                      BIND(label_if_done_label_790_1426);
                    }
                    Goto(label_if_done_label_789_1425);
                  }
                  BIND(label_if_done_label_789_1425);
                }
              }
              Goto(label_if_done_label_782_1418);
            }
            BIND(label_if_done_label_782_1418);
          }
          // ../../src/builtins/typed-array.tq:336:7
          int31_t t740 = 0;
          TNode<Smi> t741 = UncheckedCast<Smi>(FromConstexpr5ATSmi(implicit_cast<int31_t>(t740)));
          TNode<JSTypedArray> t742 = UncheckedCast<JSTypedArray>(CallBuiltin(Builtins::kTypedArrayQuickSort, implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<JSTypedArray>>((*array_777)), implicit_cast<TNode<Smi>>(t741), implicit_cast<TNode<Smi>>((*len_778)), implicit_cast<TNode<JSReceiver>>((*comparefn_781)), implicit_cast<TNode<Code>>((*loadfn_153).value()), implicit_cast<TNode<Code>>((*storefn_154).value())));
          USE(implicit_cast<TNode<JSTypedArray>>(t742));
        }
        Goto(label_try_done_779_1416);
      }
      if (label_CastError_246->is_used())
      {
        BIND(label_CastError_246);
        // ../../src/builtins/typed-array.tq:338:21
        {
          // ../../src/builtins/typed-array.tq:339:7
          Unreachable();
        }
      }
      BIND(label_try_done_779_1416);
    }
    // ../../src/builtins/typed-array.tq:341:5
    arguments->PopAndReturn(implicit_cast<TNode<JSTypedArray>>((*array_777)));
  }
}

TF_BUILTIN(LoadFixedElement17ATFixedInt32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3754 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3755 = KindForArrayType17ATFixedInt32Array();
    USE(implicit_cast<ElementsKind>(t3755));
    TNode<Object> t3756 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3754), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3755), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3756));
    Return(implicit_cast<TNode<Object>>(t3756));
  }
}

TF_BUILTIN(StoreFixedElement17ATFixedInt32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3757 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3758 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3757)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3758));
    TNode<FixedTypedArrayBase> elements_1215_impl;
    auto elements_1215 = &elements_1215_impl;
    USE(elements_1215);
    *elements_1215 = implicit_cast<TNode<FixedTypedArrayBase>>(t3758);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3759 = KindForArrayType17ATFixedInt32Array();
    USE(implicit_cast<ElementsKind>(t3759));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1215)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3759), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement19ATFixedFloat32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3760 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3761 = KindForArrayType19ATFixedFloat32Array();
    USE(implicit_cast<ElementsKind>(t3761));
    TNode<Object> t3762 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3760), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3761), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3762));
    Return(implicit_cast<TNode<Object>>(t3762));
  }
}

TF_BUILTIN(StoreFixedElement19ATFixedFloat32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3763 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3764 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3763)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3764));
    TNode<FixedTypedArrayBase> elements_1216_impl;
    auto elements_1216 = &elements_1216_impl;
    USE(elements_1216);
    *elements_1216 = implicit_cast<TNode<FixedTypedArrayBase>>(t3764);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3765 = KindForArrayType19ATFixedFloat32Array();
    USE(implicit_cast<ElementsKind>(t3765));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1216)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3765), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement19ATFixedFloat64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3766 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3767 = KindForArrayType19ATFixedFloat64Array();
    USE(implicit_cast<ElementsKind>(t3767));
    TNode<Object> t3768 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3766), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3767), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3768));
    Return(implicit_cast<TNode<Object>>(t3768));
  }
}

TF_BUILTIN(StoreFixedElement19ATFixedFloat64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3769 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3770 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3769)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3770));
    TNode<FixedTypedArrayBase> elements_1217_impl;
    auto elements_1217 = &elements_1217_impl;
    USE(elements_1217);
    *elements_1217 = implicit_cast<TNode<FixedTypedArrayBase>>(t3770);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3771 = KindForArrayType19ATFixedFloat64Array();
    USE(implicit_cast<ElementsKind>(t3771));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1217)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3771), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement24ATFixedUint8ClampedArray, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3772 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3773 = KindForArrayType24ATFixedUint8ClampedArray();
    USE(implicit_cast<ElementsKind>(t3773));
    TNode<Object> t3774 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3772), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3773), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3774));
    Return(implicit_cast<TNode<Object>>(t3774));
  }
}

TF_BUILTIN(StoreFixedElement24ATFixedUint8ClampedArray, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3775 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3776 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3775)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3776));
    TNode<FixedTypedArrayBase> elements_1218_impl;
    auto elements_1218 = &elements_1218_impl;
    USE(elements_1218);
    *elements_1218 = implicit_cast<TNode<FixedTypedArrayBase>>(t3776);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3777 = KindForArrayType24ATFixedUint8ClampedArray();
    USE(implicit_cast<ElementsKind>(t3777));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1218)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3777), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement21ATFixedBigUint64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3778 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3779 = KindForArrayType21ATFixedBigUint64Array();
    USE(implicit_cast<ElementsKind>(t3779));
    TNode<Object> t3780 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3778), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3779), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3780));
    Return(implicit_cast<TNode<Object>>(t3780));
  }
}

TF_BUILTIN(StoreFixedElement21ATFixedBigUint64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3781 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3782 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3781)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3782));
    TNode<FixedTypedArrayBase> elements_1219_impl;
    auto elements_1219 = &elements_1219_impl;
    USE(elements_1219);
    *elements_1219 = implicit_cast<TNode<FixedTypedArrayBase>>(t3782);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3783 = KindForArrayType21ATFixedBigUint64Array();
    USE(implicit_cast<ElementsKind>(t3783));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1219)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3783), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement20ATFixedBigInt64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3784 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3785 = KindForArrayType20ATFixedBigInt64Array();
    USE(implicit_cast<ElementsKind>(t3785));
    TNode<Object> t3786 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3784), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3785), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3786));
    Return(implicit_cast<TNode<Object>>(t3786));
  }
}

TF_BUILTIN(StoreFixedElement20ATFixedBigInt64Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3787 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3788 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3787)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3788));
    TNode<FixedTypedArrayBase> elements_1220_impl;
    auto elements_1220 = &elements_1220_impl;
    USE(elements_1220);
    *elements_1220 = implicit_cast<TNode<FixedTypedArrayBase>>(t3788);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3789 = KindForArrayType20ATFixedBigInt64Array();
    USE(implicit_cast<ElementsKind>(t3789));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1220)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3789), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement17ATFixedUint8Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3790 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3791 = KindForArrayType17ATFixedUint8Array();
    USE(implicit_cast<ElementsKind>(t3791));
    TNode<Object> t3792 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3790), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3791), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3792));
    Return(implicit_cast<TNode<Object>>(t3792));
  }
}

TF_BUILTIN(StoreFixedElement17ATFixedUint8Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3793 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3794 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3793)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3794));
    TNode<FixedTypedArrayBase> elements_1221_impl;
    auto elements_1221 = &elements_1221_impl;
    USE(elements_1221);
    *elements_1221 = implicit_cast<TNode<FixedTypedArrayBase>>(t3794);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3795 = KindForArrayType17ATFixedUint8Array();
    USE(implicit_cast<ElementsKind>(t3795));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1221)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3795), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement16ATFixedInt8Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3796 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3797 = KindForArrayType16ATFixedInt8Array();
    USE(implicit_cast<ElementsKind>(t3797));
    TNode<Object> t3798 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3796), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3797), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3798));
    Return(implicit_cast<TNode<Object>>(t3798));
  }
}

TF_BUILTIN(StoreFixedElement16ATFixedInt8Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3799 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3800 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3799)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3800));
    TNode<FixedTypedArrayBase> elements_1222_impl;
    auto elements_1222 = &elements_1222_impl;
    USE(elements_1222);
    *elements_1222 = implicit_cast<TNode<FixedTypedArrayBase>>(t3800);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3801 = KindForArrayType16ATFixedInt8Array();
    USE(implicit_cast<ElementsKind>(t3801));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1222)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3801), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement18ATFixedUint16Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3802 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3803 = KindForArrayType18ATFixedUint16Array();
    USE(implicit_cast<ElementsKind>(t3803));
    TNode<Object> t3804 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3802), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3803), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3804));
    Return(implicit_cast<TNode<Object>>(t3804));
  }
}

TF_BUILTIN(StoreFixedElement18ATFixedUint16Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3805 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3806 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3805)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3806));
    TNode<FixedTypedArrayBase> elements_1223_impl;
    auto elements_1223 = &elements_1223_impl;
    USE(elements_1223);
    *elements_1223 = implicit_cast<TNode<FixedTypedArrayBase>>(t3806);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3807 = KindForArrayType18ATFixedUint16Array();
    USE(implicit_cast<ElementsKind>(t3807));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1223)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3807), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement17ATFixedInt16Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3808 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3809 = KindForArrayType17ATFixedInt16Array();
    USE(implicit_cast<ElementsKind>(t3809));
    TNode<Object> t3810 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3808), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3809), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3810));
    Return(implicit_cast<TNode<Object>>(t3810));
  }
}

TF_BUILTIN(StoreFixedElement17ATFixedInt16Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3811 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3812 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3811)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3812));
    TNode<FixedTypedArrayBase> elements_1224_impl;
    auto elements_1224 = &elements_1224_impl;
    USE(elements_1224);
    *elements_1224 = implicit_cast<TNode<FixedTypedArrayBase>>(t3812);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3813 = KindForArrayType17ATFixedInt16Array();
    USE(implicit_cast<ElementsKind>(t3813));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1224)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3813), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

TF_BUILTIN(LoadFixedElement18ATFixedUint32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  // ../../src/builtins/typed-array.tq:55:66
  {
    // ../../src/builtins/typed-array.tq:56:5
    TNode<RawPtrT> t3814 = UncheckedCast<RawPtrT>(LoadDataPtr(implicit_cast<TNode<JSTypedArray>>(p_array)));
    ElementsKind t3815 = KindForArrayType18ATFixedUint32Array();
    USE(implicit_cast<ElementsKind>(t3815));
    TNode<Object> t3816 = UncheckedCast<Object>(LoadFixedTypedArrayElementAsTagged(implicit_cast<TNode<RawPtrT>>(t3814), implicit_cast<TNode<Smi>>(p_index), implicit_cast<ElementsKind>(t3815), implicit_cast<ParameterMode>(SMI_PARAMETERS)));
    USE(implicit_cast<TNode<Object>>(t3816));
    Return(implicit_cast<TNode<Object>>(t3816));
  }
}

TF_BUILTIN(StoreFixedElement18ATFixedUint32Array, TypedArrayBuiltinsFromDSLAssembler) {
  TNode<Context> p_context = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(p_context);
  TNode<JSTypedArray> p_array = UncheckedCast<JSTypedArray>(Parameter(Descriptor::kArray));
  USE(p_array);
  TNode<Smi> p_index = UncheckedCast<Smi>(Parameter(Descriptor::kIndex));
  USE(p_index);
  TNode<Object> p_value = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(p_value);
  // ../../src/builtins/typed-array.tq:62:30
  {
    // ../../src/builtins/typed-array.tq:63:5
    TNode<FixedArrayBase> t3817 = UncheckedCast<FixedArrayBase>(LoadElements(implicit_cast<TNode<JSObject>>(p_array)));
    TNode<FixedTypedArrayBase> t3818 = UncheckedCast<FixedTypedArrayBase>(UnsafeCast21ATFixedTypedArrayBase(implicit_cast<TNode<Object>>(t3817)));
    USE(implicit_cast<TNode<FixedTypedArrayBase>>(t3818));
    TNode<FixedTypedArrayBase> elements_1225_impl;
    auto elements_1225 = &elements_1225_impl;
    USE(elements_1225);
    *elements_1225 = implicit_cast<TNode<FixedTypedArrayBase>>(t3818);
    // ../../src/builtins/typed-array.tq:65:5
    ElementsKind t3819 = KindForArrayType18ATFixedUint32Array();
    USE(implicit_cast<ElementsKind>(t3819));
    StoreFixedTypedArrayElementFromTagged(implicit_cast<TNode<Context>>(p_context), implicit_cast<TNode<FixedTypedArrayBase>>((*elements_1225)), implicit_cast<TNode<Smi>>(p_index), implicit_cast<TNode<Object>>(p_value), implicit_cast<ElementsKind>(t3819), implicit_cast<ParameterMode>(SMI_PARAMETERS));
    // ../../src/builtins/typed-array.tq:67:5
    Return(implicit_cast<TNode<Object>>(Undefined()));
  }
}

}  // namespace internal
}  // namespace v8

